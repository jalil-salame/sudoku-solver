<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="997.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="364"><g><title>[unknown] (1 samples, 0.27%)</title><rect x="0.0000%" y="933" width="0.2747%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.27%)</title><rect x="0.5495%" y="917" width="0.2747%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.7995%" y="927.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (1 samples, 0.27%)</title><rect x="0.8242%" y="917" width="0.2747%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="1.0742%" y="927.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.27%)</title><rect x="0.8242%" y="901" width="0.2747%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="1.0742%" y="911.50"></text></g><g><title>main (1 samples, 0.27%)</title><rect x="0.8242%" y="885" width="0.2747%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="1.0742%" y="895.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.27%)</title><rect x="0.8242%" y="869" width="0.2747%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="1.0742%" y="879.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.27%)</title><rect x="0.8242%" y="853" width="0.2747%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="1.0742%" y="863.50"></text></g><g><title>std::panicking::try (1 samples, 0.27%)</title><rect x="0.8242%" y="837" width="0.2747%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="1.0742%" y="847.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.27%)</title><rect x="0.8242%" y="821" width="0.2747%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="1.0742%" y="831.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8242%" y="805" width="0.2747%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="1.0742%" y="815.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.27%)</title><rect x="0.8242%" y="789" width="0.2747%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="1.0742%" y="799.50"></text></g><g><title>std::panicking::try (1 samples, 0.27%)</title><rect x="0.8242%" y="773" width="0.2747%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="1.0742%" y="783.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.27%)</title><rect x="0.8242%" y="757" width="0.2747%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="1.0742%" y="767.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.27%)</title><rect x="0.8242%" y="741" width="0.2747%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="1.0742%" y="751.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8242%" y="725" width="0.2747%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="1.0742%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.27%)</title><rect x="0.8242%" y="709" width="0.2747%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="1.0742%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.27%)</title><rect x="0.8242%" y="693" width="0.2747%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="1.0742%" y="703.50"></text></g><g><title>test::test_main_static (1 samples, 0.27%)</title><rect x="0.8242%" y="677" width="0.2747%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="1.0742%" y="687.50"></text></g><g><title>test::test_main (1 samples, 0.27%)</title><rect x="0.8242%" y="661" width="0.2747%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="1.0742%" y="671.50"></text></g><g><title>test::console::run_tests_console (1 samples, 0.27%)</title><rect x="0.8242%" y="645" width="0.2747%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="1.0742%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.27%)</title><rect x="0.8242%" y="629" width="0.2747%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="1.0742%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.27%)</title><rect x="0.8242%" y="613" width="0.2747%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="1.0742%" y="623.50"></text></g><g><title>test::helpers::concurrency::get_concurrency (1 samples, 0.27%)</title><rect x="0.8242%" y="597" width="0.2747%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="1.0742%" y="607.50"></text></g><g><title>std::thread::available_parallelism (1 samples, 0.27%)</title><rect x="0.8242%" y="581" width="0.2747%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="1.0742%" y="591.50"></text></g><g><title>std::sys::pal::unix::thread::available_parallelism (1 samples, 0.27%)</title><rect x="0.8242%" y="565" width="0.2747%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="1.0742%" y="575.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota (1 samples, 0.27%)</title><rect x="0.8242%" y="549" width="0.2747%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="1.0742%" y="559.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota_v2 (1 samples, 0.27%)</title><rect x="0.8242%" y="533" width="0.2747%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="1.0742%" y="543.50"></text></g><g><title>std::path::PathBuf::pop (1 samples, 0.27%)</title><rect x="0.8242%" y="517" width="0.2747%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="1.0742%" y="527.50"></text></g><g><title>std::path::Path::parent (1 samples, 0.27%)</title><rect x="0.8242%" y="501" width="0.2747%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="1.0742%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.27%)</title><rect x="0.8242%" y="485" width="0.2747%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1"/><text x="1.0742%" y="495.50"></text></g><g><title>std::path::Path::parent::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8242%" y="469" width="0.2747%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="1.0742%" y="479.50"></text></g><g><title>std::path::Components::as_path (1 samples, 0.27%)</title><rect x="0.8242%" y="453" width="0.2747%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="1.0742%" y="463.50"></text></g><g><title>std::path::Components::trim_right (1 samples, 0.27%)</title><rect x="0.8242%" y="437" width="0.2747%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="1.0742%" y="447.50"></text></g><g><title>std::path::Components::parse_next_component_back (1 samples, 0.27%)</title><rect x="0.8242%" y="421" width="0.2747%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="1.0742%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.27%)</title><rect x="0.8242%" y="405" width="0.2747%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="1.0742%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.27%)</title><rect x="0.8242%" y="389" width="0.2747%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="1.0742%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.27%)</title><rect x="1.9231%" y="901" width="0.2747%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="1"/><text x="2.1731%" y="911.50"></text></g><g><title>libsolver-df786 (9 samples, 2.47%)</title><rect x="0.0000%" y="949" width="2.4725%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="9"/><text x="0.2500%" y="959.50">li..</text></g><g><title>_start (8 samples, 2.20%)</title><rect x="0.2747%" y="933" width="2.1978%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="8"/><text x="0.5247%" y="943.50">_..</text></g><g><title>_dl_start (5 samples, 1.37%)</title><rect x="1.0989%" y="917" width="1.3736%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="5"/><text x="1.3489%" y="927.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.27%)</title><rect x="2.1978%" y="901" width="0.2747%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="2.4478%" y="911.50"></text></g><g><title>dl_main (1 samples, 0.27%)</title><rect x="2.1978%" y="885" width="0.2747%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="2.4478%" y="895.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.27%)</title><rect x="2.1978%" y="869" width="0.2747%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="2.4478%" y="879.50"></text></g><g><title>std::io::stdio::set_output_capture (1 samples, 0.27%)</title><rect x="2.4725%" y="821" width="0.2747%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="2.7225%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.55%)</title><rect x="9.3407%" y="309" width="0.5495%" height="15" fill="rgb(222,207,29)" fg:x="34" fg:w="2"/><text x="9.5907%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.27%)</title><rect x="11.2637%" y="261" width="0.2747%" height="15" fill="rgb(206,96,30)" fg:x="41" fg:w="1"/><text x="11.5137%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (1 samples, 0.27%)</title><rect x="11.2637%" y="245" width="0.2747%" height="15" fill="rgb(218,138,4)" fg:x="41" fg:w="1"/><text x="11.5137%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 4.67%)</title><rect x="7.6923%" y="325" width="4.6703%" height="15" fill="rgb(250,191,14)" fg:x="28" fg:w="17"/><text x="7.9423%" y="335.50">&lt;hash..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 2.47%)</title><rect x="9.8901%" y="309" width="2.4725%" height="15" fill="rgb(239,60,40)" fg:x="36" fg:w="9"/><text x="10.1401%" y="319.50">&lt;h..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (4 samples, 1.10%)</title><rect x="11.2637%" y="293" width="1.0989%" height="15" fill="rgb(206,27,48)" fg:x="41" fg:w="4"/><text x="11.5137%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.10%)</title><rect x="11.2637%" y="277" width="1.0989%" height="15" fill="rgb(225,35,8)" fg:x="41" fg:w="4"/><text x="11.5137%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (3 samples, 0.82%)</title><rect x="11.5385%" y="261" width="0.8242%" height="15" fill="rgb(250,213,24)" fg:x="42" fg:w="3"/><text x="11.7885%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.82%)</title><rect x="12.3626%" y="165" width="0.8242%" height="15" fill="rgb(247,123,22)" fg:x="45" fg:w="3"/><text x="12.6126%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.27%)</title><rect x="12.9121%" y="149" width="0.2747%" height="15" fill="rgb(231,138,38)" fg:x="47" fg:w="1"/><text x="13.1621%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 1.10%)</title><rect x="12.3626%" y="213" width="1.0989%" height="15" fill="rgb(231,145,46)" fg:x="45" fg:w="4"/><text x="12.6126%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 1.10%)</title><rect x="12.3626%" y="197" width="1.0989%" height="15" fill="rgb(251,118,11)" fg:x="45" fg:w="4"/><text x="12.6126%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 1.10%)</title><rect x="12.3626%" y="181" width="1.0989%" height="15" fill="rgb(217,147,25)" fg:x="45" fg:w="4"/><text x="12.6126%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.27%)</title><rect x="13.1868%" y="165" width="0.2747%" height="15" fill="rgb(247,81,37)" fg:x="48" fg:w="1"/><text x="13.4368%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.27%)</title><rect x="13.1868%" y="149" width="0.2747%" height="15" fill="rgb(209,12,38)" fg:x="48" fg:w="1"/><text x="13.4368%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 1.92%)</title><rect x="12.3626%" y="245" width="1.9231%" height="15" fill="rgb(227,1,9)" fg:x="45" fg:w="7"/><text x="12.6126%" y="255.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 1.92%)</title><rect x="12.3626%" y="229" width="1.9231%" height="15" fill="rgb(248,47,43)" fg:x="45" fg:w="7"/><text x="12.6126%" y="239.50">c..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.82%)</title><rect x="13.4615%" y="213" width="0.8242%" height="15" fill="rgb(221,10,30)" fg:x="49" fg:w="3"/><text x="13.7115%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.82%)</title><rect x="13.4615%" y="197" width="0.8242%" height="15" fill="rgb(210,229,1)" fg:x="49" fg:w="3"/><text x="13.7115%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.82%)</title><rect x="13.4615%" y="181" width="0.8242%" height="15" fill="rgb(222,148,37)" fg:x="49" fg:w="3"/><text x="13.7115%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.82%)</title><rect x="13.4615%" y="165" width="0.8242%" height="15" fill="rgb(234,67,33)" fg:x="49" fg:w="3"/><text x="13.7115%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (1 samples, 0.27%)</title><rect x="14.2857%" y="165" width="0.2747%" height="15" fill="rgb(247,98,35)" fg:x="52" fg:w="1"/><text x="14.5357%" y="175.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (1 samples, 0.27%)</title><rect x="14.2857%" y="149" width="0.2747%" height="15" fill="rgb(247,138,52)" fg:x="52" fg:w="1"/><text x="14.5357%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.27%)</title><rect x="14.2857%" y="133" width="0.2747%" height="15" fill="rgb(213,79,30)" fg:x="52" fg:w="1"/><text x="14.5357%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.27%)</title><rect x="14.2857%" y="117" width="0.2747%" height="15" fill="rgb(246,177,23)" fg:x="52" fg:w="1"/><text x="14.5357%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.27%)</title><rect x="14.2857%" y="101" width="0.2747%" height="15" fill="rgb(230,62,27)" fg:x="52" fg:w="1"/><text x="14.5357%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.27%)</title><rect x="14.2857%" y="85" width="0.2747%" height="15" fill="rgb(216,154,8)" fg:x="52" fg:w="1"/><text x="14.5357%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.27%)</title><rect x="14.2857%" y="69" width="0.2747%" height="15" fill="rgb(244,35,45)" fg:x="52" fg:w="1"/><text x="14.5357%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.55%)</title><rect x="14.2857%" y="229" width="0.5495%" height="15" fill="rgb(251,115,12)" fg:x="52" fg:w="2"/><text x="14.5357%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.55%)</title><rect x="14.2857%" y="213" width="0.5495%" height="15" fill="rgb(240,54,50)" fg:x="52" fg:w="2"/><text x="14.5357%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2 samples, 0.55%)</title><rect x="14.2857%" y="197" width="0.5495%" height="15" fill="rgb(233,84,52)" fg:x="52" fg:w="2"/><text x="14.5357%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2 samples, 0.55%)</title><rect x="14.2857%" y="181" width="0.5495%" height="15" fill="rgb(207,117,47)" fg:x="52" fg:w="2"/><text x="14.5357%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.27%)</title><rect x="14.5604%" y="165" width="0.2747%" height="15" fill="rgb(249,43,39)" fg:x="53" fg:w="1"/><text x="14.8104%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.27%)</title><rect x="14.5604%" y="149" width="0.2747%" height="15" fill="rgb(209,38,44)" fg:x="53" fg:w="1"/><text x="14.8104%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.27%)</title><rect x="14.5604%" y="133" width="0.2747%" height="15" fill="rgb(236,212,23)" fg:x="53" fg:w="1"/><text x="14.8104%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.10%)</title><rect x="16.4835%" y="213" width="1.0989%" height="15" fill="rgb(242,79,21)" fg:x="60" fg:w="4"/><text x="16.7335%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.55%)</title><rect x="17.5824%" y="213" width="0.5495%" height="15" fill="rgb(211,96,35)" fg:x="64" fg:w="2"/><text x="17.8324%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.55%)</title><rect x="17.5824%" y="197" width="0.5495%" height="15" fill="rgb(253,215,40)" fg:x="64" fg:w="2"/><text x="17.8324%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2 samples, 0.55%)</title><rect x="18.1319%" y="213" width="0.5495%" height="15" fill="rgb(211,81,21)" fg:x="66" fg:w="2"/><text x="18.3819%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2 samples, 0.55%)</title><rect x="18.1319%" y="197" width="0.5495%" height="15" fill="rgb(208,190,38)" fg:x="66" fg:w="2"/><text x="18.3819%" y="207.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.55%)</title><rect x="18.1319%" y="181" width="0.5495%" height="15" fill="rgb(235,213,38)" fg:x="66" fg:w="2"/><text x="18.3819%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.55%)</title><rect x="18.1319%" y="165" width="0.5495%" height="15" fill="rgb(237,122,38)" fg:x="66" fg:w="2"/><text x="18.3819%" y="175.50"></text></g><g><title>&lt;libsolver::solver::SudokuValue as core::cmp::PartialEq&gt;::eq (2 samples, 0.55%)</title><rect x="18.1319%" y="149" width="0.5495%" height="15" fill="rgb(244,218,35)" fg:x="66" fg:w="2"/><text x="18.3819%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZero&lt;u8&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.55%)</title><rect x="18.1319%" y="133" width="0.5495%" height="15" fill="rgb(240,68,47)" fg:x="66" fg:w="2"/><text x="18.3819%" y="143.50"></text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (27 samples, 7.42%)</title><rect x="12.3626%" y="325" width="7.4176%" height="15" fill="rgb(210,16,53)" fg:x="45" fg:w="27"/><text x="12.6126%" y="335.50">&lt;hashbrown..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (27 samples, 7.42%)</title><rect x="12.3626%" y="309" width="7.4176%" height="15" fill="rgb(235,124,12)" fg:x="45" fg:w="27"/><text x="12.6126%" y="319.50">core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (27 samples, 7.42%)</title><rect x="12.3626%" y="293" width="7.4176%" height="15" fill="rgb(224,169,11)" fg:x="45" fg:w="27"/><text x="12.6126%" y="303.50">core::iter..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (27 samples, 7.42%)</title><rect x="12.3626%" y="277" width="7.4176%" height="15" fill="rgb(250,166,2)" fg:x="45" fg:w="27"/><text x="12.6126%" y="287.50">&lt;hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (27 samples, 7.42%)</title><rect x="12.3626%" y="261" width="7.4176%" height="15" fill="rgb(242,216,29)" fg:x="45" fg:w="27"/><text x="12.6126%" y="271.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (20 samples, 5.49%)</title><rect x="14.2857%" y="245" width="5.4945%" height="15" fill="rgb(230,116,27)" fg:x="52" fg:w="20"/><text x="14.5357%" y="255.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (18 samples, 4.95%)</title><rect x="14.8352%" y="229" width="4.9451%" height="15" fill="rgb(228,99,48)" fg:x="54" fg:w="18"/><text x="15.0852%" y="239.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 1.10%)</title><rect x="18.6813%" y="213" width="1.0989%" height="15" fill="rgb(253,11,6)" fg:x="68" fg:w="4"/><text x="18.9313%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (2 samples, 0.55%)</title><rect x="19.2308%" y="197" width="0.5495%" height="15" fill="rgb(247,143,39)" fg:x="70" fg:w="2"/><text x="19.4808%" y="207.50"></text></g><g><title>hashbrown::raw::is_full (2 samples, 0.55%)</title><rect x="19.2308%" y="181" width="0.5495%" height="15" fill="rgb(236,97,10)" fg:x="70" fg:w="2"/><text x="19.4808%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (73 samples, 20.05%)</title><rect x="3.5714%" y="421" width="20.0549%" height="15" fill="rgb(233,208,19)" fg:x="13" fg:w="73"/><text x="3.8214%" y="431.50">core::iter::traits::iterator::I..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (73 samples, 20.05%)</title><rect x="3.5714%" y="405" width="20.0549%" height="15" fill="rgb(216,164,2)" fg:x="13" fg:w="73"/><text x="3.8214%" y="415.50">&lt;core::iter::adapters::map::Map..</text></g><g><title>&lt;std::collections::hash::set::IntoIter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::fold (73 samples, 20.05%)</title><rect x="3.5714%" y="389" width="20.0549%" height="15" fill="rgb(220,129,5)" fg:x="13" fg:w="73"/><text x="3.8214%" y="399.50">&lt;std::collections::hash::set::I..</text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (73 samples, 20.05%)</title><rect x="3.5714%" y="373" width="20.0549%" height="15" fill="rgb(242,17,10)" fg:x="13" fg:w="73"/><text x="3.8214%" y="383.50">&lt;hashbrown::set::IntoIter&lt;K,A&gt; ..</text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (63 samples, 17.31%)</title><rect x="6.3187%" y="357" width="17.3077%" height="15" fill="rgb(242,107,0)" fg:x="23" fg:w="63"/><text x="6.5687%" y="367.50">&lt;hashbrown::map::IntoIter&lt;K..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (63 samples, 17.31%)</title><rect x="6.3187%" y="341" width="17.3077%" height="15" fill="rgb(251,28,31)" fg:x="23" fg:w="63"/><text x="6.5687%" y="351.50">core::iter::traits::iterato..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(libsolver::solver::SudokuValue,())&gt;&gt; (14 samples, 3.85%)</title><rect x="19.7802%" y="325" width="3.8462%" height="15" fill="rgb(233,223,10)" fg:x="72" fg:w="14"/><text x="20.0302%" y="335.50">core..</text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 3.85%)</title><rect x="19.7802%" y="309" width="3.8462%" height="15" fill="rgb(215,21,27)" fg:x="72" fg:w="14"/><text x="20.0302%" y="319.50">&lt;has..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 3.85%)</title><rect x="19.7802%" y="293" width="3.8462%" height="15" fill="rgb(232,23,21)" fg:x="72" fg:w="14"/><text x="20.0302%" y="303.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (14 samples, 3.85%)</title><rect x="19.7802%" y="277" width="3.8462%" height="15" fill="rgb(244,5,23)" fg:x="72" fg:w="14"/><text x="20.0302%" y="287.50">allo..</text></g><g><title>cfree@GLIBC_2.2.5 (14 samples, 3.85%)</title><rect x="19.7802%" y="261" width="3.8462%" height="15" fill="rgb(226,81,46)" fg:x="72" fg:w="14"/><text x="20.0302%" y="271.50">cfre..</text></g><g><title>_int_free (9 samples, 2.47%)</title><rect x="21.1538%" y="245" width="2.4725%" height="15" fill="rgb(247,70,30)" fg:x="77" fg:w="9"/><text x="21.4038%" y="255.50">_i..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.27%)</title><rect x="23.9011%" y="341" width="0.2747%" height="15" fill="rgb(212,68,19)" fg:x="87" fg:w="1"/><text x="24.1511%" y="351.50"></text></g><g><title>core::mem::swap (1 samples, 0.27%)</title><rect x="24.1758%" y="341" width="0.2747%" height="15" fill="rgb(240,187,13)" fg:x="88" fg:w="1"/><text x="24.4258%" y="351.50"></text></g><g><title>core::ptr::swap_nonoverlapping (1 samples, 0.27%)</title><rect x="24.1758%" y="325" width="0.2747%" height="15" fill="rgb(223,113,26)" fg:x="88" fg:w="1"/><text x="24.4258%" y="335.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (1 samples, 0.27%)</title><rect x="24.1758%" y="309" width="0.2747%" height="15" fill="rgb(206,192,2)" fg:x="88" fg:w="1"/><text x="24.4258%" y="319.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.27%)</title><rect x="24.1758%" y="293" width="0.2747%" height="15" fill="rgb(241,108,4)" fg:x="88" fg:w="1"/><text x="24.4258%" y="303.50"></text></g><g><title>core::ptr::write (1 samples, 0.27%)</title><rect x="24.1758%" y="277" width="0.2747%" height="15" fill="rgb(247,173,49)" fg:x="88" fg:w="1"/><text x="24.4258%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.27%)</title><rect x="24.4505%" y="341" width="0.2747%" height="15" fill="rgb(224,114,35)" fg:x="89" fg:w="1"/><text x="24.7005%" y="351.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.27%)</title><rect x="24.4505%" y="325" width="0.2747%" height="15" fill="rgb(245,159,27)" fg:x="89" fg:w="1"/><text x="24.7005%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (1 samples, 0.27%)</title><rect x="24.4505%" y="309" width="0.2747%" height="15" fill="rgb(245,172,44)" fg:x="89" fg:w="1"/><text x="24.7005%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.27%)</title><rect x="24.4505%" y="293" width="0.2747%" height="15" fill="rgb(236,23,11)" fg:x="89" fg:w="1"/><text x="24.7005%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.27%)</title><rect x="24.4505%" y="277" width="0.2747%" height="15" fill="rgb(205,117,38)" fg:x="89" fg:w="1"/><text x="24.7005%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.27%)</title><rect x="24.4505%" y="261" width="0.2747%" height="15" fill="rgb(237,72,25)" fg:x="89" fg:w="1"/><text x="24.7005%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.27%)</title><rect x="25.8242%" y="229" width="0.2747%" height="15" fill="rgb(244,70,9)" fg:x="94" fg:w="1"/><text x="26.0742%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.27%)</title><rect x="25.8242%" y="213" width="0.2747%" height="15" fill="rgb(217,125,39)" fg:x="94" fg:w="1"/><text x="26.0742%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 1.65%)</title><rect x="24.7253%" y="277" width="1.6484%" height="15" fill="rgb(235,36,10)" fg:x="90" fg:w="6"/><text x="24.9753%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 1.65%)</title><rect x="24.7253%" y="261" width="1.6484%" height="15" fill="rgb(251,123,47)" fg:x="90" fg:w="6"/><text x="24.9753%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 1.65%)</title><rect x="24.7253%" y="245" width="1.6484%" height="15" fill="rgb(221,13,13)" fg:x="90" fg:w="6"/><text x="24.9753%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.27%)</title><rect x="26.0989%" y="229" width="0.2747%" height="15" fill="rgb(238,131,9)" fg:x="95" fg:w="1"/><text x="26.3489%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.27%)</title><rect x="26.0989%" y="213" width="0.2747%" height="15" fill="rgb(211,50,8)" fg:x="95" fg:w="1"/><text x="26.3489%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (7 samples, 1.92%)</title><rect x="24.7253%" y="341" width="1.9231%" height="15" fill="rgb(245,182,24)" fg:x="90" fg:w="7"/><text x="24.9753%" y="351.50">h..</text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (7 samples, 1.92%)</title><rect x="24.7253%" y="325" width="1.9231%" height="15" fill="rgb(242,14,37)" fg:x="90" fg:w="7"/><text x="24.9753%" y="335.50">h..</text></g><g><title>hashbrown::map::make_hash (7 samples, 1.92%)</title><rect x="24.7253%" y="309" width="1.9231%" height="15" fill="rgb(246,228,12)" fg:x="90" fg:w="7"/><text x="24.9753%" y="319.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 1.92%)</title><rect x="24.7253%" y="293" width="1.9231%" height="15" fill="rgb(213,55,15)" fg:x="90" fg:w="7"/><text x="24.9753%" y="303.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.27%)</title><rect x="26.3736%" y="277" width="0.2747%" height="15" fill="rgb(209,9,3)" fg:x="96" fg:w="1"/><text x="26.6236%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (4 samples, 1.10%)</title><rect x="26.6484%" y="341" width="1.0989%" height="15" fill="rgb(230,59,30)" fg:x="97" fg:w="4"/><text x="26.8984%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 1.10%)</title><rect x="26.6484%" y="325" width="1.0989%" height="15" fill="rgb(209,121,21)" fg:x="97" fg:w="4"/><text x="26.8984%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (2 samples, 0.55%)</title><rect x="27.7473%" y="341" width="0.5495%" height="15" fill="rgb(220,109,13)" fg:x="101" fg:w="2"/><text x="27.9973%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (2 samples, 0.55%)</title><rect x="27.7473%" y="325" width="0.5495%" height="15" fill="rgb(232,18,1)" fg:x="101" fg:w="2"/><text x="27.9973%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (2 samples, 0.55%)</title><rect x="27.7473%" y="309" width="0.5495%" height="15" fill="rgb(215,41,42)" fg:x="101" fg:w="2"/><text x="27.9973%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4 samples, 1.10%)</title><rect x="28.5714%" y="309" width="1.0989%" height="15" fill="rgb(224,123,36)" fg:x="104" fg:w="4"/><text x="28.8214%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.82%)</title><rect x="28.8462%" y="293" width="0.8242%" height="15" fill="rgb(240,125,3)" fg:x="105" fg:w="3"/><text x="29.0962%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.82%)</title><rect x="28.8462%" y="277" width="0.8242%" height="15" fill="rgb(205,98,50)" fg:x="105" fg:w="3"/><text x="29.0962%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (18 samples, 4.95%)</title><rect x="28.2967%" y="325" width="4.9451%" height="15" fill="rgb(205,185,37)" fg:x="103" fg:w="18"/><text x="28.5467%" y="335.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (13 samples, 3.57%)</title><rect x="29.6703%" y="309" width="3.5714%" height="15" fill="rgb(238,207,15)" fg:x="108" fg:w="13"/><text x="29.9203%" y="319.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (19 samples, 5.22%)</title><rect x="28.2967%" y="341" width="5.2198%" height="15" fill="rgb(213,199,42)" fg:x="103" fg:w="19"/><text x="28.5467%" y="351.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.27%)</title><rect x="33.2418%" y="325" width="0.2747%" height="15" fill="rgb(235,201,11)" fg:x="121" fg:w="1"/><text x="33.4918%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.27%)</title><rect x="33.2418%" y="309" width="0.2747%" height="15" fill="rgb(207,46,11)" fg:x="121" fg:w="1"/><text x="33.4918%" y="319.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.27%)</title><rect x="33.5165%" y="293" width="0.2747%" height="15" fill="rgb(241,35,35)" fg:x="122" fg:w="1"/><text x="33.7665%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.27%)</title><rect x="33.5165%" y="277" width="0.2747%" height="15" fill="rgb(243,32,47)" fg:x="122" fg:w="1"/><text x="33.7665%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.27%)</title><rect x="33.5165%" y="261" width="0.2747%" height="15" fill="rgb(247,202,23)" fg:x="122" fg:w="1"/><text x="33.7665%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.55%)</title><rect x="33.5165%" y="309" width="0.5495%" height="15" fill="rgb(219,102,11)" fg:x="122" fg:w="2"/><text x="33.7665%" y="319.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.27%)</title><rect x="33.7912%" y="293" width="0.2747%" height="15" fill="rgb(243,110,44)" fg:x="123" fg:w="1"/><text x="34.0412%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.27%)</title><rect x="33.7912%" y="277" width="0.2747%" height="15" fill="rgb(222,74,54)" fg:x="123" fg:w="1"/><text x="34.0412%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.27%)</title><rect x="33.7912%" y="261" width="0.2747%" height="15" fill="rgb(216,99,12)" fg:x="123" fg:w="1"/><text x="34.0412%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.27%)</title><rect x="33.7912%" y="245" width="0.2747%" height="15" fill="rgb(226,22,26)" fg:x="123" fg:w="1"/><text x="34.0412%" y="255.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (115 samples, 31.59%)</title><rect x="3.2967%" y="437" width="31.5934%" height="15" fill="rgb(217,163,10)" fg:x="12" fg:w="115"/><text x="3.5467%" y="447.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::tr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (41 samples, 11.26%)</title><rect x="23.6264%" y="421" width="11.2637%" height="15" fill="rgb(213,25,53)" fg:x="86" fg:w="41"/><text x="23.8764%" y="431.50">hashbrown::map::H..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (41 samples, 11.26%)</title><rect x="23.6264%" y="405" width="11.2637%" height="15" fill="rgb(252,105,26)" fg:x="86" fg:w="41"/><text x="23.8764%" y="415.50">hashbrown::raw::R..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (40 samples, 10.99%)</title><rect x="23.9011%" y="389" width="10.9890%" height="15" fill="rgb(220,39,43)" fg:x="87" fg:w="40"/><text x="24.1511%" y="399.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (40 samples, 10.99%)</title><rect x="23.9011%" y="373" width="10.9890%" height="15" fill="rgb(229,68,48)" fg:x="87" fg:w="40"/><text x="24.1511%" y="383.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (40 samples, 10.99%)</title><rect x="23.9011%" y="357" width="10.9890%" height="15" fill="rgb(252,8,32)" fg:x="87" fg:w="40"/><text x="24.1511%" y="367.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (5 samples, 1.37%)</title><rect x="33.5165%" y="341" width="1.3736%" height="15" fill="rgb(223,20,43)" fg:x="122" fg:w="5"/><text x="33.7665%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (5 samples, 1.37%)</title><rect x="33.5165%" y="325" width="1.3736%" height="15" fill="rgb(229,81,49)" fg:x="122" fg:w="5"/><text x="33.7665%" y="335.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (3 samples, 0.82%)</title><rect x="34.0659%" y="309" width="0.8242%" height="15" fill="rgb(236,28,36)" fg:x="124" fg:w="3"/><text x="34.3159%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (2 samples, 0.55%)</title><rect x="34.3407%" y="293" width="0.5495%" height="15" fill="rgb(249,185,26)" fg:x="125" fg:w="2"/><text x="34.5907%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (1 samples, 0.27%)</title><rect x="34.6154%" y="277" width="0.2747%" height="15" fill="rgb(249,174,33)" fg:x="126" fg:w="1"/><text x="34.8654%" y="287.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (119 samples, 32.69%)</title><rect x="3.0220%" y="469" width="32.6923%" height="15" fill="rgb(233,201,37)" fg:x="11" fg:w="119"/><text x="3.2720%" y="479.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::i..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (119 samples, 32.69%)</title><rect x="3.0220%" y="453" width="32.6923%" height="15" fill="rgb(221,78,26)" fg:x="11" fg:w="119"/><text x="3.2720%" y="463.50">&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.82%)</title><rect x="34.8901%" y="437" width="0.8242%" height="15" fill="rgb(250,127,30)" fg:x="127" fg:w="3"/><text x="35.1401%" y="447.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.82%)</title><rect x="34.8901%" y="421" width="0.8242%" height="15" fill="rgb(230,49,44)" fg:x="127" fg:w="3"/><text x="35.1401%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.82%)</title><rect x="34.8901%" y="405" width="0.8242%" height="15" fill="rgb(229,67,23)" fg:x="127" fg:w="3"/><text x="35.1401%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.55%)</title><rect x="35.1648%" y="389" width="0.5495%" height="15" fill="rgb(249,83,47)" fg:x="128" fg:w="2"/><text x="35.4148%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_iter_from (2 samples, 0.55%)</title><rect x="35.1648%" y="373" width="0.5495%" height="15" fill="rgb(215,43,3)" fg:x="128" fg:w="2"/><text x="35.4148%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_allocation (1 samples, 0.27%)</title><rect x="35.4396%" y="357" width="0.2747%" height="15" fill="rgb(238,154,13)" fg:x="129" fg:w="1"/><text x="35.6896%" y="367.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.27%)</title><rect x="35.4396%" y="341" width="0.2747%" height="15" fill="rgb(219,56,2)" fg:x="129" fg:w="1"/><text x="35.6896%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.27%)</title><rect x="35.4396%" y="325" width="0.2747%" height="15" fill="rgb(233,0,4)" fg:x="129" fg:w="1"/><text x="35.6896%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.27%)</title><rect x="35.4396%" y="309" width="0.2747%" height="15" fill="rgb(235,30,7)" fg:x="129" fg:w="1"/><text x="35.6896%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.27%)</title><rect x="37.9121%" y="165" width="0.2747%" height="15" fill="rgb(250,79,13)" fg:x="138" fg:w="1"/><text x="38.1621%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 1.10%)</title><rect x="38.4615%" y="149" width="1.0989%" height="15" fill="rgb(211,146,34)" fg:x="140" fg:w="4"/><text x="38.7115%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 3.02%)</title><rect x="37.3626%" y="213" width="3.0220%" height="15" fill="rgb(228,22,38)" fg:x="136" fg:w="11"/><text x="37.6126%" y="223.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 3.02%)</title><rect x="37.3626%" y="197" width="3.0220%" height="15" fill="rgb(235,168,5)" fg:x="136" fg:w="11"/><text x="37.6126%" y="207.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 3.02%)</title><rect x="37.3626%" y="181" width="3.0220%" height="15" fill="rgb(221,155,16)" fg:x="136" fg:w="11"/><text x="37.6126%" y="191.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 2.20%)</title><rect x="38.1868%" y="165" width="2.1978%" height="15" fill="rgb(215,215,53)" fg:x="139" fg:w="8"/><text x="38.4368%" y="175.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.82%)</title><rect x="39.5604%" y="149" width="0.8242%" height="15" fill="rgb(223,4,10)" fg:x="144" fg:w="3"/><text x="39.8104%" y="159.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.82%)</title><rect x="40.3846%" y="213" width="0.8242%" height="15" fill="rgb(234,103,6)" fg:x="147" fg:w="3"/><text x="40.6346%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.82%)</title><rect x="40.3846%" y="197" width="0.8242%" height="15" fill="rgb(227,97,0)" fg:x="147" fg:w="3"/><text x="40.6346%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.82%)</title><rect x="40.3846%" y="181" width="0.8242%" height="15" fill="rgb(234,150,53)" fg:x="147" fg:w="3"/><text x="40.6346%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.82%)</title><rect x="40.3846%" y="165" width="0.8242%" height="15" fill="rgb(228,201,54)" fg:x="147" fg:w="3"/><text x="40.6346%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 4.40%)</title><rect x="37.0879%" y="245" width="4.3956%" height="15" fill="rgb(222,22,37)" fg:x="135" fg:w="16"/><text x="37.3379%" y="255.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 4.40%)</title><rect x="37.0879%" y="229" width="4.3956%" height="15" fill="rgb(237,53,32)" fg:x="135" fg:w="16"/><text x="37.3379%" y="239.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.27%)</title><rect x="41.2088%" y="213" width="0.2747%" height="15" fill="rgb(233,25,53)" fg:x="150" fg:w="1"/><text x="41.4588%" y="223.50"></text></g><g><title>&lt;libsolver::solver::SudokuValue as core::hash::Hash&gt;::hash (1 samples, 0.27%)</title><rect x="41.2088%" y="197" width="0.2747%" height="15" fill="rgb(210,40,34)" fg:x="150" fg:w="1"/><text x="41.4588%" y="207.50"></text></g><g><title>&lt;core::num::nonzero::NonZero&lt;u8&gt; as core::hash::Hash&gt;::hash (1 samples, 0.27%)</title><rect x="41.2088%" y="181" width="0.2747%" height="15" fill="rgb(241,220,44)" fg:x="150" fg:w="1"/><text x="41.4588%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.27%)</title><rect x="41.2088%" y="165" width="0.2747%" height="15" fill="rgb(235,28,35)" fg:x="150" fg:w="1"/><text x="41.4588%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.27%)</title><rect x="41.2088%" y="149" width="0.2747%" height="15" fill="rgb(210,56,17)" fg:x="150" fg:w="1"/><text x="41.4588%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.27%)</title><rect x="41.2088%" y="133" width="0.2747%" height="15" fill="rgb(224,130,29)" fg:x="150" fg:w="1"/><text x="41.4588%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.27%)</title><rect x="41.2088%" y="117" width="0.2747%" height="15" fill="rgb(235,212,8)" fg:x="150" fg:w="1"/><text x="41.4588%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.27%)</title><rect x="41.2088%" y="101" width="0.2747%" height="15" fill="rgb(223,33,50)" fg:x="150" fg:w="1"/><text x="41.4588%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.27%)</title><rect x="41.2088%" y="85" width="0.2747%" height="15" fill="rgb(219,149,13)" fg:x="150" fg:w="1"/><text x="41.4588%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="43.6813%" y="165" width="0.2747%" height="15" fill="rgb(250,156,29)" fg:x="159" fg:w="1"/><text x="43.9313%" y="175.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (1 samples, 0.27%)</title><rect x="43.6813%" y="149" width="0.2747%" height="15" fill="rgb(216,193,19)" fg:x="159" fg:w="1"/><text x="43.9313%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="43.6813%" y="133" width="0.2747%" height="15" fill="rgb(216,135,14)" fg:x="159" fg:w="1"/><text x="43.9313%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.27%)</title><rect x="43.9560%" y="165" width="0.2747%" height="15" fill="rgb(241,47,5)" fg:x="160" fg:w="1"/><text x="44.2060%" y="175.50"></text></g><g><title>core::mem::swap (3 samples, 0.82%)</title><rect x="44.2308%" y="165" width="0.8242%" height="15" fill="rgb(233,42,35)" fg:x="161" fg:w="3"/><text x="44.4808%" y="175.50"></text></g><g><title>core::ptr::swap_nonoverlapping (3 samples, 0.82%)</title><rect x="44.2308%" y="149" width="0.8242%" height="15" fill="rgb(231,13,6)" fg:x="161" fg:w="3"/><text x="44.4808%" y="159.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (3 samples, 0.82%)</title><rect x="44.2308%" y="133" width="0.8242%" height="15" fill="rgb(207,181,40)" fg:x="161" fg:w="3"/><text x="44.4808%" y="143.50"></text></g><g><title>core::mem::swap_simple (3 samples, 0.82%)</title><rect x="44.2308%" y="117" width="0.8242%" height="15" fill="rgb(254,173,49)" fg:x="161" fg:w="3"/><text x="44.4808%" y="127.50"></text></g><g><title>core::ptr::write (3 samples, 0.82%)</title><rect x="44.2308%" y="101" width="0.8242%" height="15" fill="rgb(221,1,38)" fg:x="161" fg:w="3"/><text x="44.4808%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.27%)</title><rect x="45.0549%" y="101" width="0.2747%" height="15" fill="rgb(206,124,46)" fg:x="164" fg:w="1"/><text x="45.3049%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.27%)</title><rect x="45.0549%" y="85" width="0.2747%" height="15" fill="rgb(249,21,11)" fg:x="164" fg:w="1"/><text x="45.3049%" y="95.50"></text></g><g><title>__rust_dealloc (1 samples, 0.27%)</title><rect x="45.0549%" y="69" width="0.2747%" height="15" fill="rgb(222,201,40)" fg:x="164" fg:w="1"/><text x="45.3049%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (3 samples, 0.82%)</title><rect x="45.0549%" y="165" width="0.8242%" height="15" fill="rgb(235,61,29)" fg:x="164" fg:w="3"/><text x="45.3049%" y="175.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.82%)</title><rect x="45.0549%" y="149" width="0.8242%" height="15" fill="rgb(219,207,3)" fg:x="164" fg:w="3"/><text x="45.3049%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (3 samples, 0.82%)</title><rect x="45.0549%" y="133" width="0.8242%" height="15" fill="rgb(222,56,46)" fg:x="164" fg:w="3"/><text x="45.3049%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.82%)</title><rect x="45.0549%" y="117" width="0.8242%" height="15" fill="rgb(239,76,54)" fg:x="164" fg:w="3"/><text x="45.3049%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (2 samples, 0.55%)</title><rect x="45.3297%" y="101" width="0.5495%" height="15" fill="rgb(231,124,27)" fg:x="165" fg:w="2"/><text x="45.5797%" y="111.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (2 samples, 0.55%)</title><rect x="45.3297%" y="85" width="0.5495%" height="15" fill="rgb(249,195,6)" fg:x="165" fg:w="2"/><text x="45.5797%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.55%)</title><rect x="45.3297%" y="69" width="0.5495%" height="15" fill="rgb(237,174,47)" fg:x="165" fg:w="2"/><text x="45.5797%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.55%)</title><rect x="45.3297%" y="53" width="0.5495%" height="15" fill="rgb(206,201,31)" fg:x="165" fg:w="2"/><text x="45.5797%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 1.10%)</title><rect x="48.9011%" y="53" width="1.0989%" height="15" fill="rgb(231,57,52)" fg:x="178" fg:w="4"/><text x="49.1511%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.27%)</title><rect x="49.7253%" y="37" width="0.2747%" height="15" fill="rgb(248,177,22)" fg:x="181" fg:w="1"/><text x="49.9753%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (16 samples, 4.40%)</title><rect x="45.8791%" y="165" width="4.3956%" height="15" fill="rgb(215,211,37)" fg:x="167" fg:w="16"/><text x="46.1291%" y="175.50">hashb..</text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (16 samples, 4.40%)</title><rect x="45.8791%" y="149" width="4.3956%" height="15" fill="rgb(241,128,51)" fg:x="167" fg:w="16"/><text x="46.1291%" y="159.50">hashb..</text></g><g><title>hashbrown::map::make_hash (16 samples, 4.40%)</title><rect x="45.8791%" y="133" width="4.3956%" height="15" fill="rgb(227,165,31)" fg:x="167" fg:w="16"/><text x="46.1291%" y="143.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 4.40%)</title><rect x="45.8791%" y="117" width="4.3956%" height="15" fill="rgb(228,167,24)" fg:x="167" fg:w="16"/><text x="46.1291%" y="127.50">core:..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (16 samples, 4.40%)</title><rect x="45.8791%" y="101" width="4.3956%" height="15" fill="rgb(228,143,12)" fg:x="167" fg:w="16"/><text x="46.1291%" y="111.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16 samples, 4.40%)</title><rect x="45.8791%" y="85" width="4.3956%" height="15" fill="rgb(249,149,8)" fg:x="167" fg:w="16"/><text x="46.1291%" y="95.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16 samples, 4.40%)</title><rect x="45.8791%" y="69" width="4.3956%" height="15" fill="rgb(243,35,44)" fg:x="167" fg:w="16"/><text x="46.1291%" y="79.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.27%)</title><rect x="50.0000%" y="53" width="0.2747%" height="15" fill="rgb(246,89,9)" fg:x="182" fg:w="1"/><text x="50.2500%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.27%)</title><rect x="50.0000%" y="37" width="0.2747%" height="15" fill="rgb(233,213,13)" fg:x="182" fg:w="1"/><text x="50.2500%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (7 samples, 1.92%)</title><rect x="50.2747%" y="165" width="1.9231%" height="15" fill="rgb(233,141,41)" fg:x="183" fg:w="7"/><text x="50.5247%" y="175.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7 samples, 1.92%)</title><rect x="50.2747%" y="149" width="1.9231%" height="15" fill="rgb(239,167,4)" fg:x="183" fg:w="7"/><text x="50.5247%" y="159.50">c..</text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (3 samples, 0.82%)</title><rect x="52.1978%" y="133" width="0.8242%" height="15" fill="rgb(209,217,16)" fg:x="190" fg:w="3"/><text x="52.4478%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (4 samples, 1.10%)</title><rect x="52.1978%" y="165" width="1.0989%" height="15" fill="rgb(219,88,35)" fg:x="190" fg:w="4"/><text x="52.4478%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (4 samples, 1.10%)</title><rect x="52.1978%" y="149" width="1.0989%" height="15" fill="rgb(220,193,23)" fg:x="190" fg:w="4"/><text x="52.4478%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.27%)</title><rect x="53.0220%" y="133" width="0.2747%" height="15" fill="rgb(230,90,52)" fg:x="193" fg:w="1"/><text x="53.2720%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.27%)</title><rect x="53.0220%" y="117" width="0.2747%" height="15" fill="rgb(252,106,19)" fg:x="193" fg:w="1"/><text x="53.2720%" y="127.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.82%)</title><rect x="55.2198%" y="117" width="0.8242%" height="15" fill="rgb(206,74,20)" fg:x="201" fg:w="3"/><text x="55.4698%" y="127.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (3 samples, 0.82%)</title><rect x="55.2198%" y="101" width="0.8242%" height="15" fill="rgb(230,138,44)" fg:x="201" fg:w="3"/><text x="55.4698%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (12 samples, 3.30%)</title><rect x="54.9451%" y="133" width="3.2967%" height="15" fill="rgb(235,182,43)" fg:x="200" fg:w="12"/><text x="55.1951%" y="143.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (8 samples, 2.20%)</title><rect x="56.0440%" y="117" width="2.1978%" height="15" fill="rgb(242,16,51)" fg:x="204" fg:w="8"/><text x="56.2940%" y="127.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 2.20%)</title><rect x="56.0440%" y="101" width="2.1978%" height="15" fill="rgb(248,9,4)" fg:x="204" fg:w="8"/><text x="56.2940%" y="111.50">c..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (41 samples, 11.26%)</title><rect x="53.2967%" y="165" width="11.2637%" height="15" fill="rgb(210,31,22)" fg:x="194" fg:w="41"/><text x="53.5467%" y="175.50">hashbrown::raw::R..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (41 samples, 11.26%)</title><rect x="53.2967%" y="149" width="11.2637%" height="15" fill="rgb(239,54,39)" fg:x="194" fg:w="41"/><text x="53.5467%" y="159.50">hashbrown::raw::R..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (23 samples, 6.32%)</title><rect x="58.2418%" y="133" width="6.3187%" height="15" fill="rgb(230,99,41)" fg:x="212" fg:w="23"/><text x="58.4918%" y="143.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.27%)</title><rect x="64.2857%" y="117" width="0.2747%" height="15" fill="rgb(253,106,12)" fg:x="234" fg:w="1"/><text x="64.5357%" y="127.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.27%)</title><rect x="64.2857%" y="101" width="0.2747%" height="15" fill="rgb(213,46,41)" fg:x="234" fg:w="1"/><text x="64.5357%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (9 samples, 2.47%)</title><rect x="64.5604%" y="133" width="2.4725%" height="15" fill="rgb(215,133,35)" fg:x="235" fg:w="9"/><text x="64.8104%" y="143.50">co..</text></g><g><title>core::intrinsics::write_bytes (9 samples, 2.47%)</title><rect x="64.5604%" y="117" width="2.4725%" height="15" fill="rgb(213,28,5)" fg:x="235" fg:w="9"/><text x="64.8104%" y="127.50">co..</text></g><g><title>__memset_avx512_unaligned_erms (5 samples, 1.37%)</title><rect x="65.6593%" y="101" width="1.3736%" height="15" fill="rgb(215,77,49)" fg:x="239" fg:w="5"/><text x="65.9093%" y="111.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.27%)</title><rect x="67.0330%" y="117" width="0.2747%" height="15" fill="rgb(248,100,22)" fg:x="244" fg:w="1"/><text x="67.2830%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.27%)</title><rect x="67.0330%" y="101" width="0.2747%" height="15" fill="rgb(208,67,9)" fg:x="244" fg:w="1"/><text x="67.2830%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.27%)</title><rect x="67.0330%" y="85" width="0.2747%" height="15" fill="rgb(219,133,21)" fg:x="244" fg:w="1"/><text x="67.2830%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.27%)</title><rect x="67.0330%" y="69" width="0.2747%" height="15" fill="rgb(246,46,29)" fg:x="244" fg:w="1"/><text x="67.2830%" y="79.50"></text></g><g><title>malloc (1 samples, 0.27%)</title><rect x="67.0330%" y="53" width="0.2747%" height="15" fill="rgb(246,185,52)" fg:x="244" fg:w="1"/><text x="67.2830%" y="63.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (94 samples, 25.82%)</title><rect x="41.7582%" y="229" width="25.8242%" height="15" fill="rgb(252,136,11)" fg:x="152" fg:w="94"/><text x="42.0082%" y="239.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserve</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (90 samples, 24.73%)</title><rect x="42.8571%" y="213" width="24.7253%" height="15" fill="rgb(219,138,53)" fg:x="156" fg:w="90"/><text x="43.1071%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserve_..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (88 samples, 24.18%)</title><rect x="43.4066%" y="197" width="24.1758%" height="15" fill="rgb(211,51,23)" fg:x="158" fg:w="88"/><text x="43.6566%" y="207.50">hashbrown::raw::RawTableInner::reserve..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (88 samples, 24.18%)</title><rect x="43.4066%" y="181" width="24.1758%" height="15" fill="rgb(247,221,28)" fg:x="158" fg:w="88"/><text x="43.6566%" y="191.50">hashbrown::raw::RawTableInner::resize_..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (11 samples, 3.02%)</title><rect x="64.5604%" y="165" width="3.0220%" height="15" fill="rgb(251,222,45)" fg:x="235" fg:w="11"/><text x="64.8104%" y="175.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (11 samples, 3.02%)</title><rect x="64.5604%" y="149" width="3.0220%" height="15" fill="rgb(217,162,53)" fg:x="235" fg:w="11"/><text x="64.8104%" y="159.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.55%)</title><rect x="67.0330%" y="133" width="0.5495%" height="15" fill="rgb(229,93,14)" fg:x="244" fg:w="2"/><text x="67.2830%" y="143.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.27%)</title><rect x="67.3077%" y="117" width="0.2747%" height="15" fill="rgb(209,67,49)" fg:x="245" fg:w="1"/><text x="67.5577%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 3.30%)</title><rect x="68.9560%" y="213" width="3.2967%" height="15" fill="rgb(213,87,29)" fg:x="251" fg:w="12"/><text x="69.2060%" y="223.50">&lt;ha..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 3.30%)</title><rect x="68.9560%" y="197" width="3.2967%" height="15" fill="rgb(205,151,52)" fg:x="251" fg:w="12"/><text x="69.2060%" y="207.50">has..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (12 samples, 3.30%)</title><rect x="68.9560%" y="181" width="3.2967%" height="15" fill="rgb(253,215,39)" fg:x="251" fg:w="12"/><text x="69.2060%" y="191.50">cor..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (6 samples, 1.65%)</title><rect x="72.2527%" y="213" width="1.6484%" height="15" fill="rgb(221,220,41)" fg:x="263" fg:w="6"/><text x="72.5027%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (39 samples, 10.71%)</title><rect x="73.9011%" y="213" width="10.7143%" height="15" fill="rgb(218,133,21)" fg:x="269" fg:w="39"/><text x="74.1511%" y="223.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (30 samples, 8.24%)</title><rect x="76.3736%" y="197" width="8.2418%" height="15" fill="rgb(221,193,43)" fg:x="278" fg:w="30"/><text x="76.6236%" y="207.50">hashbrown::..</text></g><g><title>hashbrown::raw::is_full (30 samples, 8.24%)</title><rect x="76.3736%" y="181" width="8.2418%" height="15" fill="rgb(240,128,52)" fg:x="278" fg:w="30"/><text x="76.6236%" y="191.50">hashbrown::..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (26 samples, 7.14%)</title><rect x="84.6154%" y="213" width="7.1429%" height="15" fill="rgb(253,114,12)" fg:x="308" fg:w="26"/><text x="84.8654%" y="223.50">hashbrown:..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 7.14%)</title><rect x="84.6154%" y="197" width="7.1429%" height="15" fill="rgb(215,223,47)" fg:x="308" fg:w="26"/><text x="84.8654%" y="207.50">core::core..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (189 samples, 51.92%)</title><rect x="41.4835%" y="245" width="51.9231%" height="15" fill="rgb(248,225,23)" fg:x="151" fg:w="189"/><text x="41.7335%" y="255.50">hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (94 samples, 25.82%)</title><rect x="67.5824%" y="229" width="25.8242%" height="15" fill="rgb(250,108,0)" fg:x="246" fg:w="94"/><text x="67.8324%" y="239.50">hashbrown::raw::RawTableInner::find_or_fi..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (6 samples, 1.65%)</title><rect x="91.7582%" y="213" width="1.6484%" height="15" fill="rgb(228,208,7)" fg:x="334" fg:w="6"/><text x="92.0082%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 1.65%)</title><rect x="91.7582%" y="197" width="1.6484%" height="15" fill="rgb(244,45,10)" fg:x="334" fg:w="6"/><text x="92.0082%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 1.65%)</title><rect x="91.7582%" y="181" width="1.6484%" height="15" fill="rgb(207,125,25)" fg:x="334" fg:w="6"/><text x="92.0082%" y="191.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::all_affecting (340 samples, 93.41%)</title><rect x="2.7473%" y="485" width="93.4066%" height="15" fill="rgb(210,195,18)" fg:x="10" fg:w="340"/><text x="2.9973%" y="495.50">&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::all_affecting</text></g><g><title>core::iter::traits::iterator::Iterator::collect (220 samples, 60.44%)</title><rect x="35.7143%" y="469" width="60.4396%" height="15" fill="rgb(249,80,12)" fg:x="130" fg:w="220"/><text x="35.9643%" y="479.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (220 samples, 60.44%)</title><rect x="35.7143%" y="453" width="60.4396%" height="15" fill="rgb(221,65,9)" fg:x="130" fg:w="220"/><text x="35.9643%" y="463.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_it..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (220 samples, 60.44%)</title><rect x="35.7143%" y="437" width="60.4396%" height="15" fill="rgb(235,49,36)" fg:x="130" fg:w="220"/><text x="35.9643%" y="447.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (220 samples, 60.44%)</title><rect x="35.7143%" y="421" width="60.4396%" height="15" fill="rgb(225,32,20)" fg:x="130" fg:w="220"/><text x="35.9643%" y="431.50">&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (220 samples, 60.44%)</title><rect x="35.7143%" y="405" width="60.4396%" height="15" fill="rgb(215,141,46)" fg:x="130" fg:w="220"/><text x="35.9643%" y="415.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (220 samples, 60.44%)</title><rect x="35.7143%" y="389" width="60.4396%" height="15" fill="rgb(250,160,47)" fg:x="130" fg:w="220"/><text x="35.9643%" y="399.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (220 samples, 60.44%)</title><rect x="35.7143%" y="373" width="60.4396%" height="15" fill="rgb(216,222,40)" fg:x="130" fg:w="220"/><text x="35.9643%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (220 samples, 60.44%)</title><rect x="35.7143%" y="357" width="60.4396%" height="15" fill="rgb(234,217,39)" fg:x="130" fg:w="220"/><text x="35.9643%" y="367.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (220 samples, 60.44%)</title><rect x="35.7143%" y="341" width="60.4396%" height="15" fill="rgb(207,178,40)" fg:x="130" fg:w="220"/><text x="35.9643%" y="351.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (220 samples, 60.44%)</title><rect x="35.7143%" y="325" width="60.4396%" height="15" fill="rgb(221,136,13)" fg:x="130" fg:w="220"/><text x="35.9643%" y="335.50">core::iter::adapters::filter_map::filter_map_fold::_{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (219 samples, 60.16%)</title><rect x="35.9890%" y="309" width="60.1648%" height="15" fill="rgb(249,199,10)" fg:x="131" fg:w="219"/><text x="36.2390%" y="319.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (219 samples, 60.16%)</title><rect x="35.9890%" y="293" width="60.1648%" height="15" fill="rgb(249,222,13)" fg:x="131" fg:w="219"/><text x="36.2390%" y="303.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (219 samples, 60.16%)</title><rect x="35.9890%" y="277" width="60.1648%" height="15" fill="rgb(244,185,38)" fg:x="131" fg:w="219"/><text x="36.2390%" y="287.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closur..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (216 samples, 59.34%)</title><rect x="36.8132%" y="261" width="59.3407%" height="15" fill="rgb(236,202,9)" fg:x="134" fg:w="216"/><text x="37.0632%" y="271.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (10 samples, 2.75%)</title><rect x="93.4066%" y="245" width="2.7473%" height="15" fill="rgb(250,229,37)" fg:x="340" fg:w="10"/><text x="93.6566%" y="255.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (10 samples, 2.75%)</title><rect x="93.4066%" y="229" width="2.7473%" height="15" fill="rgb(206,174,23)" fg:x="340" fg:w="10"/><text x="93.6566%" y="239.50">ha..</text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (3 samples, 0.82%)</title><rect x="95.3297%" y="213" width="0.8242%" height="15" fill="rgb(211,33,43)" fg:x="347" fg:w="3"/><text x="95.5797%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.27%)</title><rect x="96.1538%" y="485" width="0.2747%" height="15" fill="rgb(245,58,50)" fg:x="350" fg:w="1"/><text x="96.4038%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.27%)</title><rect x="96.1538%" y="469" width="0.2747%" height="15" fill="rgb(244,68,36)" fg:x="350" fg:w="1"/><text x="96.4038%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.27%)</title><rect x="96.1538%" y="453" width="0.2747%" height="15" fill="rgb(232,229,15)" fg:x="350" fg:w="1"/><text x="96.4038%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.82%)</title><rect x="96.4286%" y="325" width="0.8242%" height="15" fill="rgb(254,30,23)" fg:x="351" fg:w="3"/><text x="96.6786%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.82%)</title><rect x="96.4286%" y="309" width="0.8242%" height="15" fill="rgb(235,160,14)" fg:x="351" fg:w="3"/><text x="96.6786%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.82%)</title><rect x="96.4286%" y="293" width="0.8242%" height="15" fill="rgb(212,155,44)" fg:x="351" fg:w="3"/><text x="96.6786%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.55%)</title><rect x="96.7033%" y="277" width="0.5495%" height="15" fill="rgb(226,2,50)" fg:x="352" fg:w="2"/><text x="96.9533%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.27%)</title><rect x="97.2527%" y="325" width="0.2747%" height="15" fill="rgb(234,177,6)" fg:x="354" fg:w="1"/><text x="97.5027%" y="335.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.27%)</title><rect x="97.2527%" y="309" width="0.2747%" height="15" fill="rgb(217,24,9)" fg:x="354" fg:w="1"/><text x="97.5027%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.27%)</title><rect x="97.2527%" y="293" width="0.2747%" height="15" fill="rgb(220,13,46)" fg:x="354" fg:w="1"/><text x="97.5027%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.27%)</title><rect x="97.2527%" y="277" width="0.2747%" height="15" fill="rgb(239,221,27)" fg:x="354" fg:w="1"/><text x="97.5027%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 1.37%)</title><rect x="96.4286%" y="357" width="1.3736%" height="15" fill="rgb(222,198,25)" fg:x="351" fg:w="5"/><text x="96.6786%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 1.37%)</title><rect x="96.4286%" y="341" width="1.3736%" height="15" fill="rgb(211,99,13)" fg:x="351" fg:w="5"/><text x="96.6786%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.27%)</title><rect x="97.5275%" y="325" width="0.2747%" height="15" fill="rgb(232,111,31)" fg:x="355" fg:w="1"/><text x="97.7775%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (7 samples, 1.92%)</title><rect x="96.4286%" y="485" width="1.9231%" height="15" fill="rgb(245,82,37)" fg:x="351" fg:w="7"/><text x="96.6786%" y="495.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7 samples, 1.92%)</title><rect x="96.4286%" y="469" width="1.9231%" height="15" fill="rgb(227,149,46)" fg:x="351" fg:w="7"/><text x="96.6786%" y="479.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (7 samples, 1.92%)</title><rect x="96.4286%" y="453" width="1.9231%" height="15" fill="rgb(218,36,50)" fg:x="351" fg:w="7"/><text x="96.6786%" y="463.50">c..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (7 samples, 1.92%)</title><rect x="96.4286%" y="437" width="1.9231%" height="15" fill="rgb(226,80,48)" fg:x="351" fg:w="7"/><text x="96.6786%" y="447.50">&lt;..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (7 samples, 1.92%)</title><rect x="96.4286%" y="421" width="1.9231%" height="15" fill="rgb(238,224,15)" fg:x="351" fg:w="7"/><text x="96.6786%" y="431.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (7 samples, 1.92%)</title><rect x="96.4286%" y="405" width="1.9231%" height="15" fill="rgb(241,136,10)" fg:x="351" fg:w="7"/><text x="96.6786%" y="415.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (7 samples, 1.92%)</title><rect x="96.4286%" y="389" width="1.9231%" height="15" fill="rgb(208,32,45)" fg:x="351" fg:w="7"/><text x="96.6786%" y="399.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 1.92%)</title><rect x="96.4286%" y="373" width="1.9231%" height="15" fill="rgb(207,135,9)" fg:x="351" fg:w="7"/><text x="96.6786%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.55%)</title><rect x="97.8022%" y="357" width="0.5495%" height="15" fill="rgb(206,86,44)" fg:x="356" fg:w="2"/><text x="98.0522%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.55%)</title><rect x="97.8022%" y="341" width="0.5495%" height="15" fill="rgb(245,177,15)" fg:x="356" fg:w="2"/><text x="98.0522%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.55%)</title><rect x="97.8022%" y="325" width="0.5495%" height="15" fill="rgb(206,64,50)" fg:x="356" fg:w="2"/><text x="98.0522%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.27%)</title><rect x="98.0769%" y="309" width="0.2747%" height="15" fill="rgb(234,36,40)" fg:x="357" fg:w="1"/><text x="98.3269%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.27%)</title><rect x="98.0769%" y="293" width="0.2747%" height="15" fill="rgb(213,64,8)" fg:x="357" fg:w="1"/><text x="98.3269%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.27%)</title><rect x="98.0769%" y="277" width="0.2747%" height="15" fill="rgb(210,75,36)" fg:x="357" fg:w="1"/><text x="98.3269%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.27%)</title><rect x="98.0769%" y="261" width="0.2747%" height="15" fill="rgb(229,88,21)" fg:x="357" fg:w="1"/><text x="98.3269%" y="271.50"></text></g><g><title>all (364 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="364"/><text x="0.2500%" y="975.50"></text></g><g><title>solver::test::s (355 samples, 97.53%)</title><rect x="2.4725%" y="949" width="97.5275%" height="15" fill="rgb(208,77,27)" fg:x="9" fg:w="355"/><text x="2.7225%" y="959.50">solver::test::s</text></g><g><title>clone3 (355 samples, 97.53%)</title><rect x="2.4725%" y="933" width="97.5275%" height="15" fill="rgb(221,76,26)" fg:x="9" fg:w="355"/><text x="2.7225%" y="943.50">clone3</text></g><g><title>start_thread (355 samples, 97.53%)</title><rect x="2.4725%" y="917" width="97.5275%" height="15" fill="rgb(225,139,18)" fg:x="9" fg:w="355"/><text x="2.7225%" y="927.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (355 samples, 97.53%)</title><rect x="2.4725%" y="901" width="97.5275%" height="15" fill="rgb(230,137,11)" fg:x="9" fg:w="355"/><text x="2.7225%" y="911.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (355 samples, 97.53%)</title><rect x="2.4725%" y="885" width="97.5275%" height="15" fill="rgb(212,28,1)" fg:x="9" fg:w="355"/><text x="2.7225%" y="895.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (355 samples, 97.53%)</title><rect x="2.4725%" y="869" width="97.5275%" height="15" fill="rgb(248,164,17)" fg:x="9" fg:w="355"/><text x="2.7225%" y="879.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (355 samples, 97.53%)</title><rect x="2.4725%" y="853" width="97.5275%" height="15" fill="rgb(222,171,42)" fg:x="9" fg:w="355"/><text x="2.7225%" y="863.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (355 samples, 97.53%)</title><rect x="2.4725%" y="837" width="97.5275%" height="15" fill="rgb(243,84,45)" fg:x="9" fg:w="355"/><text x="2.7225%" y="847.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (354 samples, 97.25%)</title><rect x="2.7473%" y="821" width="97.2527%" height="15" fill="rgb(252,49,23)" fg:x="10" fg:w="354"/><text x="2.9973%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (354 samples, 97.25%)</title><rect x="2.7473%" y="805" width="97.2527%" height="15" fill="rgb(215,19,7)" fg:x="10" fg:w="354"/><text x="2.9973%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (354 samples, 97.25%)</title><rect x="2.7473%" y="789" width="97.2527%" height="15" fill="rgb(238,81,41)" fg:x="10" fg:w="354"/><text x="2.9973%" y="799.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (354 samples, 97.25%)</title><rect x="2.7473%" y="773" width="97.2527%" height="15" fill="rgb(210,199,37)" fg:x="10" fg:w="354"/><text x="2.9973%" y="783.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (354 samples, 97.25%)</title><rect x="2.7473%" y="757" width="97.2527%" height="15" fill="rgb(244,192,49)" fg:x="10" fg:w="354"/><text x="2.9973%" y="767.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (354 samples, 97.25%)</title><rect x="2.7473%" y="741" width="97.2527%" height="15" fill="rgb(226,211,11)" fg:x="10" fg:w="354"/><text x="2.9973%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (354 samples, 97.25%)</title><rect x="2.7473%" y="725" width="97.2527%" height="15" fill="rgb(236,162,54)" fg:x="10" fg:w="354"/><text x="2.9973%" y="735.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (354 samples, 97.25%)</title><rect x="2.7473%" y="709" width="97.2527%" height="15" fill="rgb(220,229,9)" fg:x="10" fg:w="354"/><text x="2.9973%" y="719.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (354 samples, 97.25%)</title><rect x="2.7473%" y="693" width="97.2527%" height="15" fill="rgb(250,87,22)" fg:x="10" fg:w="354"/><text x="2.9973%" y="703.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (354 samples, 97.25%)</title><rect x="2.7473%" y="677" width="97.2527%" height="15" fill="rgb(239,43,17)" fg:x="10" fg:w="354"/><text x="2.9973%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (354 samples, 97.25%)</title><rect x="2.7473%" y="661" width="97.2527%" height="15" fill="rgb(231,177,25)" fg:x="10" fg:w="354"/><text x="2.9973%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (354 samples, 97.25%)</title><rect x="2.7473%" y="645" width="97.2527%" height="15" fill="rgb(219,179,1)" fg:x="10" fg:w="354"/><text x="2.9973%" y="655.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (354 samples, 97.25%)</title><rect x="2.7473%" y="629" width="97.2527%" height="15" fill="rgb(238,219,53)" fg:x="10" fg:w="354"/><text x="2.9973%" y="639.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>test::run_test_in_process::_{{closure}} (354 samples, 97.25%)</title><rect x="2.7473%" y="613" width="97.2527%" height="15" fill="rgb(232,167,36)" fg:x="10" fg:w="354"/><text x="2.9973%" y="623.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (354 samples, 97.25%)</title><rect x="2.7473%" y="597" width="97.2527%" height="15" fill="rgb(244,19,51)" fg:x="10" fg:w="354"/><text x="2.9973%" y="607.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (354 samples, 97.25%)</title><rect x="2.7473%" y="581" width="97.2527%" height="15" fill="rgb(224,6,22)" fg:x="10" fg:w="354"/><text x="2.9973%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (354 samples, 97.25%)</title><rect x="2.7473%" y="565" width="97.2527%" height="15" fill="rgb(224,145,5)" fg:x="10" fg:w="354"/><text x="2.9973%" y="575.50">core::ops::function::FnOnce::call_once</text></g><g><title>libsolver::solver::test::solve_sudoku_iterative_dfs::_{{closure}} (354 samples, 97.25%)</title><rect x="2.7473%" y="549" width="97.2527%" height="15" fill="rgb(234,130,49)" fg:x="10" fg:w="354"/><text x="2.9973%" y="559.50">libsolver::solver::test::solve_sudoku_iterative_dfs::_{{closure}}</text></g><g><title>libsolver::solver::test::solve_sudoku_iterative_dfs (354 samples, 97.25%)</title><rect x="2.7473%" y="533" width="97.2527%" height="15" fill="rgb(254,6,2)" fg:x="10" fg:w="354"/><text x="2.9973%" y="543.50">libsolver::solver::test::solve_sudoku_iterative_dfs</text></g><g><title>libsolver::solver::Solver::solve (354 samples, 97.25%)</title><rect x="2.7473%" y="517" width="97.2527%" height="15" fill="rgb(208,96,46)" fg:x="10" fg:w="354"/><text x="2.9973%" y="527.50">libsolver::solver::Solver::solve</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve (354 samples, 97.25%)</title><rect x="2.7473%" y="501" width="97.2527%" height="15" fill="rgb(239,3,39)" fg:x="10" fg:w="354"/><text x="2.9973%" y="511.50">&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;libsolver::solver::SudokuValue&gt;&gt; (6 samples, 1.65%)</title><rect x="98.3516%" y="485" width="1.6484%" height="15" fill="rgb(233,210,1)" fg:x="358" fg:w="6"/><text x="98.6016%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;libsolver::solver::SudokuValue,std::hash::random::RandomState&gt;&gt; (6 samples, 1.65%)</title><rect x="98.3516%" y="469" width="1.6484%" height="15" fill="rgb(244,137,37)" fg:x="358" fg:w="6"/><text x="98.6016%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;libsolver::solver::SudokuValue,(),std::hash::random::RandomState&gt;&gt; (6 samples, 1.65%)</title><rect x="98.3516%" y="453" width="1.6484%" height="15" fill="rgb(240,136,2)" fg:x="358" fg:w="6"/><text x="98.6016%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(libsolver::solver::SudokuValue,())&gt;&gt; (6 samples, 1.65%)</title><rect x="98.3516%" y="437" width="1.6484%" height="15" fill="rgb(239,18,37)" fg:x="358" fg:w="6"/><text x="98.6016%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.65%)</title><rect x="98.3516%" y="421" width="1.6484%" height="15" fill="rgb(218,185,22)" fg:x="358" fg:w="6"/><text x="98.6016%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (6 samples, 1.65%)</title><rect x="98.3516%" y="405" width="1.6484%" height="15" fill="rgb(225,218,4)" fg:x="358" fg:w="6"/><text x="98.6016%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (6 samples, 1.65%)</title><rect x="98.3516%" y="389" width="1.6484%" height="15" fill="rgb(230,182,32)" fg:x="358" fg:w="6"/><text x="98.6016%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 1.65%)</title><rect x="98.3516%" y="373" width="1.6484%" height="15" fill="rgb(242,56,43)" fg:x="358" fg:w="6"/><text x="98.6016%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 1.65%)</title><rect x="98.3516%" y="357" width="1.6484%" height="15" fill="rgb(233,99,24)" fg:x="358" fg:w="6"/><text x="98.6016%" y="367.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 1.65%)</title><rect x="98.3516%" y="341" width="1.6484%" height="15" fill="rgb(234,209,42)" fg:x="358" fg:w="6"/><text x="98.6016%" y="351.50"></text></g><g><title>_int_free (3 samples, 0.82%)</title><rect x="99.1758%" y="325" width="0.8242%" height="15" fill="rgb(227,7,12)" fg:x="361" fg:w="3"/><text x="99.4258%" y="335.50"></text></g></svg></svg>