<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="369"><g><title>[unknown] (1 samples, 0.27%)</title><rect x="0.0000%" y="1061" width="0.2710%" height="15" fill="rgb(227,28,50)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.27%)</title><rect x="0.0000%" y="1045" width="0.2710%" height="15" fill="rgb(227,28,50)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.27%)</title><rect x="0.5420%" y="1045" width="0.2710%" height="15" fill="rgb(227,28,50)" fg:x="2" fg:w="1"/><text x="0.7920%" y="1055.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (1 samples, 0.27%)</title><rect x="0.8130%" y="1045" width="0.2710%" height="15" fill="rgb(217,176,50)" fg:x="3" fg:w="1"/><text x="1.0630%" y="1055.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.27%)</title><rect x="0.8130%" y="1029" width="0.2710%" height="15" fill="rgb(249,173,1)" fg:x="3" fg:w="1"/><text x="1.0630%" y="1039.50"></text></g><g><title>main (1 samples, 0.27%)</title><rect x="0.8130%" y="1013" width="0.2710%" height="15" fill="rgb(238,28,47)" fg:x="3" fg:w="1"/><text x="1.0630%" y="1023.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.27%)</title><rect x="0.8130%" y="997" width="0.2710%" height="15" fill="rgb(240,177,54)" fg:x="3" fg:w="1"/><text x="1.0630%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.27%)</title><rect x="0.8130%" y="981" width="0.2710%" height="15" fill="rgb(216,75,8)" fg:x="3" fg:w="1"/><text x="1.0630%" y="991.50"></text></g><g><title>std::panicking::try (1 samples, 0.27%)</title><rect x="0.8130%" y="965" width="0.2710%" height="15" fill="rgb(212,61,29)" fg:x="3" fg:w="1"/><text x="1.0630%" y="975.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.27%)</title><rect x="0.8130%" y="949" width="0.2710%" height="15" fill="rgb(232,162,46)" fg:x="3" fg:w="1"/><text x="1.0630%" y="959.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="933" width="0.2710%" height="15" fill="rgb(225,224,8)" fg:x="3" fg:w="1"/><text x="1.0630%" y="943.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.27%)</title><rect x="0.8130%" y="917" width="0.2710%" height="15" fill="rgb(216,75,8)" fg:x="3" fg:w="1"/><text x="1.0630%" y="927.50"></text></g><g><title>std::panicking::try (1 samples, 0.27%)</title><rect x="0.8130%" y="901" width="0.2710%" height="15" fill="rgb(212,61,29)" fg:x="3" fg:w="1"/><text x="1.0630%" y="911.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.27%)</title><rect x="0.8130%" y="885" width="0.2710%" height="15" fill="rgb(232,162,46)" fg:x="3" fg:w="1"/><text x="1.0630%" y="895.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.27%)</title><rect x="0.8130%" y="869" width="0.2710%" height="15" fill="rgb(212,73,0)" fg:x="3" fg:w="1"/><text x="1.0630%" y="879.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="853" width="0.2710%" height="15" fill="rgb(225,45,7)" fg:x="3" fg:w="1"/><text x="1.0630%" y="863.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.27%)</title><rect x="0.8130%" y="837" width="0.2710%" height="15" fill="rgb(210,88,34)" fg:x="3" fg:w="1"/><text x="1.0630%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.27%)</title><rect x="0.8130%" y="821" width="0.2710%" height="15" fill="rgb(210,80,10)" fg:x="3" fg:w="1"/><text x="1.0630%" y="831.50"></text></g><g><title>test::test_main_static (1 samples, 0.27%)</title><rect x="0.8130%" y="805" width="0.2710%" height="15" fill="rgb(245,20,2)" fg:x="3" fg:w="1"/><text x="1.0630%" y="815.50"></text></g><g><title>test::test_main (1 samples, 0.27%)</title><rect x="0.8130%" y="789" width="0.2710%" height="15" fill="rgb(222,193,1)" fg:x="3" fg:w="1"/><text x="1.0630%" y="799.50"></text></g><g><title>test::console::run_tests_console (1 samples, 0.27%)</title><rect x="0.8130%" y="773" width="0.2710%" height="15" fill="rgb(250,176,44)" fg:x="3" fg:w="1"/><text x="1.0630%" y="783.50"></text></g><g><title>test::term::stdout (1 samples, 0.27%)</title><rect x="0.8130%" y="757" width="0.2710%" height="15" fill="rgb(208,222,42)" fg:x="3" fg:w="1"/><text x="1.0630%" y="767.50"></text></g><g><title>test::term::terminfo::TerminfoTerminal&lt;T&gt;::new (1 samples, 0.27%)</title><rect x="0.8130%" y="741" width="0.2710%" height="15" fill="rgb(219,130,42)" fg:x="3" fg:w="1"/><text x="1.0630%" y="751.50"></text></g><g><title>test::term::terminfo::TermInfo::from_env (1 samples, 0.27%)</title><rect x="0.8130%" y="725" width="0.2710%" height="15" fill="rgb(208,182,23)" fg:x="3" fg:w="1"/><text x="1.0630%" y="735.50"></text></g><g><title>test::term::terminfo::TermInfo::from_name (1 samples, 0.27%)</title><rect x="0.8130%" y="709" width="0.2710%" height="15" fill="rgb(206,194,27)" fg:x="3" fg:w="1"/><text x="1.0630%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.27%)</title><rect x="0.8130%" y="693" width="0.2710%" height="15" fill="rgb(241,136,11)" fg:x="3" fg:w="1"/><text x="1.0630%" y="703.50"></text></g><g><title>test::term::terminfo::TermInfo::from_name::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="677" width="0.2710%" height="15" fill="rgb(241,5,10)" fg:x="3" fg:w="1"/><text x="1.0630%" y="687.50"></text></g><g><title>test::term::terminfo::TermInfo::from_path (1 samples, 0.27%)</title><rect x="0.8130%" y="661" width="0.2710%" height="15" fill="rgb(251,136,30)" fg:x="3" fg:w="1"/><text x="1.0630%" y="671.50"></text></g><g><title>test::term::terminfo::TermInfo::_from_path (1 samples, 0.27%)</title><rect x="0.8130%" y="645" width="0.2710%" height="15" fill="rgb(214,35,20)" fg:x="3" fg:w="1"/><text x="1.0630%" y="655.50"></text></g><g><title>test::term::terminfo::parser::compiled::parse (1 samples, 0.27%)</title><rect x="0.8130%" y="629" width="0.2710%" height="15" fill="rgb(243,208,17)" fg:x="3" fg:w="1"/><text x="1.0630%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.27%)</title><rect x="0.8130%" y="613" width="0.2710%" height="15" fill="rgb(222,213,17)" fg:x="3" fg:w="1"/><text x="1.0630%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (1 samples, 0.27%)</title><rect x="0.8130%" y="597" width="0.2710%" height="15" fill="rgb(235,156,41)" fg:x="3" fg:w="1"/><text x="1.0630%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.27%)</title><rect x="0.8130%" y="581" width="0.2710%" height="15" fill="rgb(236,86,7)" fg:x="3" fg:w="1"/><text x="1.0630%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="565" width="0.2710%" height="15" fill="rgb(208,118,24)" fg:x="3" fg:w="1"/><text x="1.0630%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.27%)</title><rect x="0.8130%" y="549" width="0.2710%" height="15" fill="rgb(222,213,17)" fg:x="3" fg:w="1"/><text x="1.0630%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.27%)</title><rect x="0.8130%" y="533" width="0.2710%" height="15" fill="rgb(232,49,7)" fg:x="3" fg:w="1"/><text x="1.0630%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.27%)</title><rect x="0.8130%" y="517" width="0.2710%" height="15" fill="rgb(222,152,11)" fg:x="3" fg:w="1"/><text x="1.0630%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.27%)</title><rect x="0.8130%" y="501" width="0.2710%" height="15" fill="rgb(222,167,8)" fg:x="3" fg:w="1"/><text x="1.0630%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.27%)</title><rect x="0.8130%" y="485" width="0.2710%" height="15" fill="rgb(245,181,4)" fg:x="3" fg:w="1"/><text x="1.0630%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.27%)</title><rect x="0.8130%" y="469" width="0.2710%" height="15" fill="rgb(229,37,0)" fg:x="3" fg:w="1"/><text x="1.0630%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.27%)</title><rect x="0.8130%" y="453" width="0.2710%" height="15" fill="rgb(223,213,1)" fg:x="3" fg:w="1"/><text x="1.0630%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.27%)</title><rect x="0.8130%" y="437" width="0.2710%" height="15" fill="rgb(246,51,5)" fg:x="3" fg:w="1"/><text x="1.0630%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.27%)</title><rect x="0.8130%" y="421" width="0.2710%" height="15" fill="rgb(248,187,13)" fg:x="3" fg:w="1"/><text x="1.0630%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.27%)</title><rect x="0.8130%" y="405" width="0.2710%" height="15" fill="rgb(243,14,15)" fg:x="3" fg:w="1"/><text x="1.0630%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.27%)</title><rect x="0.8130%" y="389" width="0.2710%" height="15" fill="rgb(223,137,46)" fg:x="3" fg:w="1"/><text x="1.0630%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="373" width="0.2710%" height="15" fill="rgb(248,118,6)" fg:x="3" fg:w="1"/><text x="1.0630%" y="383.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="357" width="0.2710%" height="15" fill="rgb(241,217,47)" fg:x="3" fg:w="1"/><text x="1.0630%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="341" width="0.2710%" height="15" fill="rgb(235,220,36)" fg:x="3" fg:w="1"/><text x="1.0630%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="325" width="0.2710%" height="15" fill="rgb(214,93,27)" fg:x="3" fg:w="1"/><text x="1.0630%" y="335.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="309" width="0.2710%" height="15" fill="rgb(227,50,51)" fg:x="3" fg:w="1"/><text x="1.0630%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="293" width="0.2710%" height="15" fill="rgb(227,134,13)" fg:x="3" fg:w="1"/><text x="1.0630%" y="303.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.27%)</title><rect x="0.8130%" y="277" width="0.2710%" height="15" fill="rgb(230,164,22)" fg:x="3" fg:w="1"/><text x="1.0630%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.27%)</title><rect x="0.8130%" y="261" width="0.2710%" height="15" fill="rgb(228,156,5)" fg:x="3" fg:w="1"/><text x="1.0630%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.27%)</title><rect x="0.8130%" y="245" width="0.2710%" height="15" fill="rgb(236,164,17)" fg:x="3" fg:w="1"/><text x="1.0630%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.27%)</title><rect x="0.8130%" y="229" width="0.2710%" height="15" fill="rgb(224,220,10)" fg:x="3" fg:w="1"/><text x="1.0630%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.27%)</title><rect x="0.8130%" y="213" width="0.2710%" height="15" fill="rgb(217,9,51)" fg:x="3" fg:w="1"/><text x="1.0630%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.27%)</title><rect x="0.8130%" y="197" width="0.2710%" height="15" fill="rgb(227,128,28)" fg:x="3" fg:w="1"/><text x="1.0630%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.27%)</title><rect x="0.8130%" y="181" width="0.2710%" height="15" fill="rgb(248,181,35)" fg:x="3" fg:w="1"/><text x="1.0630%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.27%)</title><rect x="0.8130%" y="165" width="0.2710%" height="15" fill="rgb(207,186,38)" fg:x="3" fg:w="1"/><text x="1.0630%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.27%)</title><rect x="0.8130%" y="149" width="0.2710%" height="15" fill="rgb(230,197,25)" fg:x="3" fg:w="1"/><text x="1.0630%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.27%)</title><rect x="0.8130%" y="133" width="0.2710%" height="15" fill="rgb(246,9,22)" fg:x="3" fg:w="1"/><text x="1.0630%" y="143.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.27%)</title><rect x="0.8130%" y="117" width="0.2710%" height="15" fill="rgb(206,172,50)" fg:x="3" fg:w="1"/><text x="1.0630%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.27%)</title><rect x="0.8130%" y="101" width="0.2710%" height="15" fill="rgb(231,114,21)" fg:x="3" fg:w="1"/><text x="1.0630%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.27%)</title><rect x="0.8130%" y="85" width="0.2710%" height="15" fill="rgb(238,209,2)" fg:x="3" fg:w="1"/><text x="1.0630%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.27%)</title><rect x="0.8130%" y="69" width="0.2710%" height="15" fill="rgb(253,135,41)" fg:x="3" fg:w="1"/><text x="1.0630%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.27%)</title><rect x="0.8130%" y="53" width="0.2710%" height="15" fill="rgb(241,201,43)" fg:x="3" fg:w="1"/><text x="1.0630%" y="63.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.27%)</title><rect x="0.8130%" y="37" width="0.2710%" height="15" fill="rgb(227,166,26)" fg:x="3" fg:w="1"/><text x="1.0630%" y="47.50"></text></g><g><title>_dl_setup_hash (1 samples, 0.27%)</title><rect x="1.8970%" y="1029" width="0.2710%" height="15" fill="rgb(206,59,51)" fg:x="7" fg:w="1"/><text x="2.1470%" y="1039.50"></text></g><g><title>_start (8 samples, 2.17%)</title><rect x="0.2710%" y="1061" width="2.1680%" height="15" fill="rgb(210,219,27)" fg:x="1" fg:w="8"/><text x="0.5210%" y="1071.50">_..</text></g><g><title>_dl_start (5 samples, 1.36%)</title><rect x="1.0840%" y="1045" width="1.3550%" height="15" fill="rgb(214,13,30)" fg:x="4" fg:w="5"/><text x="1.3340%" y="1055.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.27%)</title><rect x="2.1680%" y="1029" width="0.2710%" height="15" fill="rgb(238,104,49)" fg:x="8" fg:w="1"/><text x="2.4180%" y="1039.50"></text></g><g><title>dl_main (1 samples, 0.27%)</title><rect x="2.1680%" y="1013" width="0.2710%" height="15" fill="rgb(253,59,10)" fg:x="8" fg:w="1"/><text x="2.4180%" y="1023.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.27%)</title><rect x="2.1680%" y="997" width="0.2710%" height="15" fill="rgb(208,68,2)" fg:x="8" fg:w="1"/><text x="2.4180%" y="1007.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.27%)</title><rect x="2.1680%" y="981" width="0.2710%" height="15" fill="rgb(238,71,42)" fg:x="8" fg:w="1"/><text x="2.4180%" y="991.50"></text></g><g><title>openaux (1 samples, 0.27%)</title><rect x="2.1680%" y="965" width="0.2710%" height="15" fill="rgb(215,55,1)" fg:x="8" fg:w="1"/><text x="2.4180%" y="975.50"></text></g><g><title>_dl_map_object (1 samples, 0.27%)</title><rect x="2.1680%" y="949" width="0.2710%" height="15" fill="rgb(247,77,9)" fg:x="8" fg:w="1"/><text x="2.4180%" y="959.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.27%)</title><rect x="2.1680%" y="933" width="0.2710%" height="15" fill="rgb(253,121,32)" fg:x="8" fg:w="1"/><text x="2.4180%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.27%)</title><rect x="2.1680%" y="917" width="0.2710%" height="15" fill="rgb(227,28,50)" fg:x="8" fg:w="1"/><text x="2.4180%" y="927.50"></text></g><g><title>libsolver-df786 (10 samples, 2.71%)</title><rect x="0.0000%" y="1077" width="2.7100%" height="15" fill="rgb(252,149,5)" fg:x="0" fg:w="10"/><text x="0.2500%" y="1087.50">li..</text></g><g><title>clone3 (1 samples, 0.27%)</title><rect x="2.4390%" y="1061" width="0.2710%" height="15" fill="rgb(208,138,34)" fg:x="9" fg:w="1"/><text x="2.6890%" y="1071.50"></text></g><g><title>start_thread (1 samples, 0.27%)</title><rect x="2.4390%" y="1045" width="0.2710%" height="15" fill="rgb(209,148,13)" fg:x="9" fg:w="1"/><text x="2.6890%" y="1055.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.27%)</title><rect x="2.4390%" y="1029" width="0.2710%" height="15" fill="rgb(206,117,35)" fg:x="9" fg:w="1"/><text x="2.6890%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.27%)</title><rect x="2.4390%" y="1013" width="0.2710%" height="15" fill="rgb(228,202,16)" fg:x="9" fg:w="1"/><text x="2.6890%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.27%)</title><rect x="2.4390%" y="997" width="0.2710%" height="15" fill="rgb(228,202,16)" fg:x="9" fg:w="1"/><text x="2.6890%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.27%)</title><rect x="2.4390%" y="981" width="0.2710%" height="15" fill="rgb(218,104,40)" fg:x="9" fg:w="1"/><text x="2.6890%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (1 samples, 0.27%)</title><rect x="2.4390%" y="965" width="0.2710%" height="15" fill="rgb(252,97,39)" fg:x="9" fg:w="1"/><text x="2.6890%" y="975.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::set_name (1 samples, 0.27%)</title><rect x="2.4390%" y="949" width="0.2710%" height="15" fill="rgb(216,133,14)" fg:x="9" fg:w="1"/><text x="2.6890%" y="959.50"></text></g><g><title>pthread_setname_np@@GLIBC_2.34 (1 samples, 0.27%)</title><rect x="2.4390%" y="933" width="0.2710%" height="15" fill="rgb(212,126,19)" fg:x="9" fg:w="1"/><text x="2.6890%" y="943.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.27%)</title><rect x="6.7751%" y="437" width="0.2710%" height="15" fill="rgb(228,37,54)" fg:x="25" fg:w="1"/><text x="7.0251%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 2.71%)</title><rect x="5.6911%" y="453" width="2.7100%" height="15" fill="rgb(239,135,18)" fg:x="21" fg:w="10"/><text x="5.9411%" y="463.50">&lt;h..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 1.36%)</title><rect x="7.0461%" y="437" width="1.3550%" height="15" fill="rgb(247,216,18)" fg:x="26" fg:w="5"/><text x="7.2961%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 1.63%)</title><rect x="8.4011%" y="293" width="1.6260%" height="15" fill="rgb(248,169,8)" fg:x="31" fg:w="6"/><text x="8.6511%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 1.08%)</title><rect x="8.9431%" y="277" width="1.0840%" height="15" fill="rgb(223,143,42)" fg:x="33" fg:w="4"/><text x="9.1931%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.27%)</title><rect x="10.5691%" y="277" width="0.2710%" height="15" fill="rgb(223,143,42)" fg:x="39" fg:w="1"/><text x="10.8191%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 2.98%)</title><rect x="8.4011%" y="373" width="2.9810%" height="15" fill="rgb(241,1,29)" fg:x="31" fg:w="11"/><text x="8.6511%" y="383.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 2.98%)</title><rect x="8.4011%" y="357" width="2.9810%" height="15" fill="rgb(222,198,6)" fg:x="31" fg:w="11"/><text x="8.6511%" y="367.50">cor..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 2.98%)</title><rect x="8.4011%" y="341" width="2.9810%" height="15" fill="rgb(231,40,23)" fg:x="31" fg:w="11"/><text x="8.6511%" y="351.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 2.98%)</title><rect x="8.4011%" y="325" width="2.9810%" height="15" fill="rgb(230,187,21)" fg:x="31" fg:w="11"/><text x="8.6511%" y="335.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 2.98%)</title><rect x="8.4011%" y="309" width="2.9810%" height="15" fill="rgb(244,191,49)" fg:x="31" fg:w="11"/><text x="8.6511%" y="319.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 1.36%)</title><rect x="10.0271%" y="293" width="1.3550%" height="15" fill="rgb(215,158,9)" fg:x="37" fg:w="5"/><text x="10.2771%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.54%)</title><rect x="10.8401%" y="277" width="0.5420%" height="15" fill="rgb(233,55,45)" fg:x="40" fg:w="2"/><text x="11.0901%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.27%)</title><rect x="11.3821%" y="357" width="0.2710%" height="15" fill="rgb(224,220,10)" fg:x="42" fg:w="1"/><text x="11.6321%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 1.63%)</title><rect x="12.7371%" y="341" width="1.6260%" height="15" fill="rgb(238,118,47)" fg:x="47" fg:w="6"/><text x="12.9871%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.81%)</title><rect x="13.5501%" y="325" width="0.8130%" height="15" fill="rgb(214,132,50)" fg:x="50" fg:w="3"/><text x="13.8001%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (3 samples, 0.81%)</title><rect x="13.5501%" y="309" width="0.8130%" height="15" fill="rgb(232,20,30)" fg:x="50" fg:w="3"/><text x="13.8001%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (6 samples, 1.63%)</title><rect x="14.3631%" y="341" width="1.6260%" height="15" fill="rgb(235,131,19)" fg:x="53" fg:w="6"/><text x="14.6131%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (6 samples, 1.63%)</title><rect x="14.3631%" y="325" width="1.6260%" height="15" fill="rgb(212,88,23)" fg:x="53" fg:w="6"/><text x="14.6131%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.27%)</title><rect x="15.9892%" y="341" width="0.2710%" height="15" fill="rgb(244,143,40)" fg:x="59" fg:w="1"/><text x="16.2392%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.27%)</title><rect x="15.9892%" y="325" width="0.2710%" height="15" fill="rgb(229,193,19)" fg:x="59" fg:w="1"/><text x="16.2392%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.27%)</title><rect x="15.9892%" y="309" width="0.2710%" height="15" fill="rgb(249,88,53)" fg:x="59" fg:w="1"/><text x="16.2392%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.27%)</title><rect x="15.9892%" y="293" width="0.2710%" height="15" fill="rgb(242,44,7)" fg:x="59" fg:w="1"/><text x="16.2392%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 1.08%)</title><rect x="16.2602%" y="341" width="1.0840%" height="15" fill="rgb(235,172,34)" fg:x="60" fg:w="4"/><text x="16.5102%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4 samples, 1.08%)</title><rect x="16.2602%" y="325" width="1.0840%" height="15" fill="rgb(216,46,33)" fg:x="60" fg:w="4"/><text x="16.5102%" y="335.50"></text></g><g><title>hashbrown::raw::is_full (4 samples, 1.08%)</title><rect x="16.2602%" y="309" width="1.0840%" height="15" fill="rgb(239,41,17)" fg:x="60" fg:w="4"/><text x="16.5102%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.27%)</title><rect x="17.0732%" y="293" width="0.2710%" height="15" fill="rgb(227,28,50)" fg:x="63" fg:w="1"/><text x="17.3232%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.54%)</title><rect x="17.3442%" y="341" width="0.5420%" height="15" fill="rgb(254,20,38)" fg:x="64" fg:w="2"/><text x="17.5942%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (25 samples, 6.78%)</title><rect x="11.3821%" y="373" width="6.7751%" height="15" fill="rgb(236,164,17)" fg:x="42" fg:w="25"/><text x="11.6321%" y="383.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (24 samples, 6.50%)</title><rect x="11.6531%" y="357" width="6.5041%" height="15" fill="rgb(209,5,27)" fg:x="43" fg:w="24"/><text x="11.9031%" y="367.50">hashbrown..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.27%)</title><rect x="17.8862%" y="341" width="0.2710%" height="15" fill="rgb(209,34,41)" fg:x="66" fg:w="1"/><text x="18.1362%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.27%)</title><rect x="17.8862%" y="325" width="0.2710%" height="15" fill="rgb(241,196,44)" fg:x="66" fg:w="1"/><text x="18.1362%" y="335.50"></text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (37 samples, 10.03%)</title><rect x="8.4011%" y="453" width="10.0271%" height="15" fill="rgb(235,97,32)" fg:x="31" fg:w="37"/><text x="8.6511%" y="463.50">&lt;hashbrown::se..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (37 samples, 10.03%)</title><rect x="8.4011%" y="437" width="10.0271%" height="15" fill="rgb(214,87,41)" fg:x="31" fg:w="37"/><text x="8.6511%" y="447.50">core::iter::ad..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (37 samples, 10.03%)</title><rect x="8.4011%" y="421" width="10.0271%" height="15" fill="rgb(227,134,13)" fg:x="31" fg:w="37"/><text x="8.6511%" y="431.50">core::iter::tr..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (37 samples, 10.03%)</title><rect x="8.4011%" y="405" width="10.0271%" height="15" fill="rgb(230,164,22)" fg:x="31" fg:w="37"/><text x="8.6511%" y="415.50">&lt;hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (37 samples, 10.03%)</title><rect x="8.4011%" y="389" width="10.0271%" height="15" fill="rgb(228,156,5)" fg:x="31" fg:w="37"/><text x="8.6511%" y="399.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.27%)</title><rect x="18.1572%" y="373" width="0.2710%" height="15" fill="rgb(218,104,39)" fg:x="67" fg:w="1"/><text x="18.4072%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.27%)</title><rect x="18.1572%" y="357" width="0.2710%" height="15" fill="rgb(254,84,38)" fg:x="67" fg:w="1"/><text x="18.4072%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.27%)</title><rect x="18.1572%" y="341" width="0.2710%" height="15" fill="rgb(240,81,36)" fg:x="67" fg:w="1"/><text x="18.4072%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.27%)</title><rect x="18.1572%" y="325" width="0.2710%" height="15" fill="rgb(249,179,13)" fg:x="67" fg:w="1"/><text x="18.4072%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.27%)</title><rect x="18.1572%" y="309" width="0.2710%" height="15" fill="rgb(212,215,37)" fg:x="67" fg:w="1"/><text x="18.4072%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (59 samples, 15.99%)</title><rect x="3.5230%" y="549" width="15.9892%" height="15" fill="rgb(245,181,4)" fg:x="13" fg:w="59"/><text x="3.7730%" y="559.50">core::iter::traits::itera..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 15.99%)</title><rect x="3.5230%" y="533" width="15.9892%" height="15" fill="rgb(242,69,50)" fg:x="13" fg:w="59"/><text x="3.7730%" y="543.50">&lt;core::iter::adapters::ma..</text></g><g><title>&lt;std::collections::hash::set::IntoIter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 15.99%)</title><rect x="3.5230%" y="517" width="15.9892%" height="15" fill="rgb(234,95,28)" fg:x="13" fg:w="59"/><text x="3.7730%" y="527.50">&lt;std::collections::hash::..</text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 15.99%)</title><rect x="3.5230%" y="501" width="15.9892%" height="15" fill="rgb(245,131,35)" fg:x="13" fg:w="59"/><text x="3.7730%" y="511.50">&lt;hashbrown::set::IntoIter..</text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52 samples, 14.09%)</title><rect x="5.4201%" y="485" width="14.0921%" height="15" fill="rgb(230,72,50)" fg:x="20" fg:w="52"/><text x="5.6701%" y="495.50">&lt;hashbrown::map::Into..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (52 samples, 14.09%)</title><rect x="5.4201%" y="469" width="14.0921%" height="15" fill="rgb(214,12,39)" fg:x="20" fg:w="52"/><text x="5.6701%" y="479.50">core::iter::traits::i..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(libsolver::solver::SudokuValue,())&gt;&gt; (4 samples, 1.08%)</title><rect x="18.4282%" y="453" width="1.0840%" height="15" fill="rgb(213,8,11)" fg:x="68" fg:w="4"/><text x="18.6782%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.08%)</title><rect x="18.4282%" y="437" width="1.0840%" height="15" fill="rgb(220,88,13)" fg:x="68" fg:w="4"/><text x="18.6782%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 1.08%)</title><rect x="18.4282%" y="421" width="1.0840%" height="15" fill="rgb(238,77,31)" fg:x="68" fg:w="4"/><text x="18.6782%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 1.08%)</title><rect x="18.4282%" y="405" width="1.0840%" height="15" fill="rgb(227,15,28)" fg:x="68" fg:w="4"/><text x="18.6782%" y="415.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 1.08%)</title><rect x="18.4282%" y="389" width="1.0840%" height="15" fill="rgb(240,159,37)" fg:x="68" fg:w="4"/><text x="18.6782%" y="399.50"></text></g><g><title>_int_free (3 samples, 0.81%)</title><rect x="18.6992%" y="373" width="0.8130%" height="15" fill="rgb(221,113,48)" fg:x="69" fg:w="3"/><text x="18.9492%" y="383.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.27%)</title><rect x="20.5962%" y="485" width="0.2710%" height="15" fill="rgb(238,229,26)" fg:x="76" fg:w="1"/><text x="20.8462%" y="495.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.27%)</title><rect x="20.5962%" y="469" width="0.2710%" height="15" fill="rgb(253,111,26)" fg:x="76" fg:w="1"/><text x="20.8462%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="20.8672%" y="469" width="0.2710%" height="15" fill="rgb(241,66,9)" fg:x="77" fg:w="1"/><text x="21.1172%" y="479.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (1 samples, 0.27%)</title><rect x="20.8672%" y="453" width="0.2710%" height="15" fill="rgb(245,209,14)" fg:x="77" fg:w="1"/><text x="21.1172%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="20.8672%" y="437" width="0.2710%" height="15" fill="rgb(238,118,47)" fg:x="77" fg:w="1"/><text x="21.1172%" y="447.50"></text></g><g><title>core::mem::swap (1 samples, 0.27%)</title><rect x="21.1382%" y="469" width="0.2710%" height="15" fill="rgb(220,43,21)" fg:x="78" fg:w="1"/><text x="21.3882%" y="479.50"></text></g><g><title>core::ptr::swap_nonoverlapping (1 samples, 0.27%)</title><rect x="21.1382%" y="453" width="0.2710%" height="15" fill="rgb(220,147,16)" fg:x="78" fg:w="1"/><text x="21.3882%" y="463.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (1 samples, 0.27%)</title><rect x="21.1382%" y="437" width="0.2710%" height="15" fill="rgb(207,209,36)" fg:x="78" fg:w="1"/><text x="21.3882%" y="447.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.27%)</title><rect x="21.1382%" y="421" width="0.2710%" height="15" fill="rgb(253,199,39)" fg:x="78" fg:w="1"/><text x="21.3882%" y="431.50"></text></g><g><title>core::ptr::write (1 samples, 0.27%)</title><rect x="21.1382%" y="405" width="0.2710%" height="15" fill="rgb(209,143,44)" fg:x="78" fg:w="1"/><text x="21.3882%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 1.36%)</title><rect x="21.4092%" y="405" width="1.3550%" height="15" fill="rgb(231,40,23)" fg:x="79" fg:w="5"/><text x="21.6592%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 1.36%)</title><rect x="21.4092%" y="389" width="1.3550%" height="15" fill="rgb(230,187,21)" fg:x="79" fg:w="5"/><text x="21.6592%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 1.36%)</title><rect x="21.4092%" y="373" width="1.3550%" height="15" fill="rgb(244,191,49)" fg:x="79" fg:w="5"/><text x="21.6592%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.54%)</title><rect x="22.2222%" y="357" width="0.5420%" height="15" fill="rgb(248,169,8)" fg:x="82" fg:w="2"/><text x="22.4722%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.54%)</title><rect x="22.2222%" y="341" width="0.5420%" height="15" fill="rgb(223,143,42)" fg:x="82" fg:w="2"/><text x="22.4722%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (7 samples, 1.90%)</title><rect x="21.4092%" y="469" width="1.8970%" height="15" fill="rgb(221,129,29)" fg:x="79" fg:w="7"/><text x="21.6592%" y="479.50">h..</text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (7 samples, 1.90%)</title><rect x="21.4092%" y="453" width="1.8970%" height="15" fill="rgb(214,116,12)" fg:x="79" fg:w="7"/><text x="21.6592%" y="463.50">h..</text></g><g><title>hashbrown::map::make_hash (7 samples, 1.90%)</title><rect x="21.4092%" y="437" width="1.8970%" height="15" fill="rgb(241,1,29)" fg:x="79" fg:w="7"/><text x="21.6592%" y="447.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 1.90%)</title><rect x="21.4092%" y="421" width="1.8970%" height="15" fill="rgb(222,198,6)" fg:x="79" fg:w="7"/><text x="21.6592%" y="431.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.54%)</title><rect x="22.7642%" y="405" width="0.5420%" height="15" fill="rgb(212,33,36)" fg:x="84" fg:w="2"/><text x="23.0142%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (7 samples, 1.90%)</title><rect x="23.3062%" y="469" width="1.8970%" height="15" fill="rgb(253,62,17)" fg:x="86" fg:w="7"/><text x="23.5562%" y="479.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7 samples, 1.90%)</title><rect x="23.3062%" y="453" width="1.8970%" height="15" fill="rgb(224,197,7)" fg:x="86" fg:w="7"/><text x="23.5562%" y="463.50">c..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.27%)</title><rect x="26.5583%" y="421" width="0.2710%" height="15" fill="rgb(214,132,50)" fg:x="98" fg:w="1"/><text x="26.8083%" y="431.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (1 samples, 0.27%)</title><rect x="26.5583%" y="405" width="0.2710%" height="15" fill="rgb(232,20,30)" fg:x="98" fg:w="1"/><text x="26.8083%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4 samples, 1.08%)</title><rect x="26.0163%" y="437" width="1.0840%" height="15" fill="rgb(244,103,4)" fg:x="96" fg:w="4"/><text x="26.2663%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.27%)</title><rect x="26.8293%" y="421" width="0.2710%" height="15" fill="rgb(209,44,14)" fg:x="99" fg:w="1"/><text x="27.0793%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.27%)</title><rect x="26.8293%" y="405" width="0.2710%" height="15" fill="rgb(241,196,44)" fg:x="99" fg:w="1"/><text x="27.0793%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (16 samples, 4.34%)</title><rect x="25.2033%" y="453" width="4.3360%" height="15" fill="rgb(205,45,50)" fg:x="93" fg:w="16"/><text x="25.4533%" y="463.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (9 samples, 2.44%)</title><rect x="27.1003%" y="437" width="2.4390%" height="15" fill="rgb(235,172,34)" fg:x="100" fg:w="9"/><text x="27.3503%" y="447.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (17 samples, 4.61%)</title><rect x="25.2033%" y="469" width="4.6070%" height="15" fill="rgb(230,26,3)" fg:x="93" fg:w="17"/><text x="25.4533%" y="479.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.27%)</title><rect x="29.5393%" y="453" width="0.2710%" height="15" fill="rgb(240,81,36)" fg:x="109" fg:w="1"/><text x="29.7893%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.27%)</title><rect x="29.5393%" y="437" width="0.2710%" height="15" fill="rgb(249,179,13)" fg:x="109" fg:w="1"/><text x="29.7893%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (34 samples, 9.21%)</title><rect x="20.8672%" y="485" width="9.2141%" height="15" fill="rgb(248,181,35)" fg:x="77" fg:w="34"/><text x="21.1172%" y="495.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.27%)</title><rect x="29.8103%" y="469" width="0.2710%" height="15" fill="rgb(207,186,38)" fg:x="110" fg:w="1"/><text x="30.0603%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.27%)</title><rect x="29.8103%" y="453" width="0.2710%" height="15" fill="rgb(230,197,25)" fg:x="110" fg:w="1"/><text x="30.0603%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.27%)</title><rect x="29.8103%" y="437" width="0.2710%" height="15" fill="rgb(246,9,22)" fg:x="110" fg:w="1"/><text x="30.0603%" y="447.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.27%)</title><rect x="29.8103%" y="421" width="0.2710%" height="15" fill="rgb(220,171,1)" fg:x="110" fg:w="1"/><text x="30.0603%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.27%)</title><rect x="29.8103%" y="405" width="0.2710%" height="15" fill="rgb(249,177,43)" fg:x="110" fg:w="1"/><text x="30.0603%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.27%)</title><rect x="29.8103%" y="389" width="0.2710%" height="15" fill="rgb(237,40,33)" fg:x="110" fg:w="1"/><text x="30.0603%" y="399.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (101 samples, 27.37%)</title><rect x="3.2520%" y="565" width="27.3713%" height="15" fill="rgb(222,167,8)" fg:x="12" fg:w="101"/><text x="3.5020%" y="575.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::i..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (41 samples, 11.11%)</title><rect x="19.5122%" y="549" width="11.1111%" height="15" fill="rgb(242,98,5)" fg:x="72" fg:w="41"/><text x="19.7622%" y="559.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (41 samples, 11.11%)</title><rect x="19.5122%" y="533" width="11.1111%" height="15" fill="rgb(224,220,10)" fg:x="72" fg:w="41"/><text x="19.7622%" y="543.50">hashbrown::raw::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (38 samples, 10.30%)</title><rect x="20.3252%" y="517" width="10.2981%" height="15" fill="rgb(217,9,51)" fg:x="75" fg:w="38"/><text x="20.5752%" y="527.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (38 samples, 10.30%)</title><rect x="20.3252%" y="501" width="10.2981%" height="15" fill="rgb(227,128,28)" fg:x="75" fg:w="38"/><text x="20.5752%" y="511.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.54%)</title><rect x="30.0813%" y="485" width="0.5420%" height="15" fill="rgb(254,27,25)" fg:x="111" fg:w="2"/><text x="30.3313%" y="495.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (104 samples, 28.18%)</title><rect x="2.9810%" y="597" width="28.1843%" height="15" fill="rgb(246,5,33)" fg:x="11" fg:w="104"/><text x="3.2310%" y="607.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (104 samples, 28.18%)</title><rect x="2.9810%" y="581" width="28.1843%" height="15" fill="rgb(254,23,36)" fg:x="11" fg:w="104"/><text x="3.2310%" y="591.50">&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.54%)</title><rect x="30.6233%" y="565" width="0.5420%" height="15" fill="rgb(216,15,15)" fg:x="113" fg:w="2"/><text x="30.8733%" y="575.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.54%)</title><rect x="30.6233%" y="549" width="0.5420%" height="15" fill="rgb(250,100,14)" fg:x="113" fg:w="2"/><text x="30.8733%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.54%)</title><rect x="30.6233%" y="533" width="0.5420%" height="15" fill="rgb(220,154,30)" fg:x="113" fg:w="2"/><text x="30.8733%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.54%)</title><rect x="30.6233%" y="517" width="0.5420%" height="15" fill="rgb(239,82,45)" fg:x="113" fg:w="2"/><text x="30.8733%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_iter_from (2 samples, 0.54%)</title><rect x="30.6233%" y="501" width="0.5420%" height="15" fill="rgb(222,130,13)" fg:x="113" fg:w="2"/><text x="30.8733%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_allocation (2 samples, 0.54%)</title><rect x="30.6233%" y="485" width="0.5420%" height="15" fill="rgb(231,153,20)" fg:x="113" fg:w="2"/><text x="30.8733%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.27%)</title><rect x="30.8943%" y="469" width="0.2710%" height="15" fill="rgb(224,197,7)" fg:x="114" fg:w="1"/><text x="31.1443%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.27%)</title><rect x="30.8943%" y="453" width="0.2710%" height="15" fill="rgb(239,196,40)" fg:x="114" fg:w="1"/><text x="31.1443%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 1.36%)</title><rect x="34.4173%" y="293" width="1.3550%" height="15" fill="rgb(248,169,8)" fg:x="127" fg:w="5"/><text x="34.6673%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.81%)</title><rect x="34.9593%" y="277" width="0.8130%" height="15" fill="rgb(223,143,42)" fg:x="129" fg:w="3"/><text x="35.2093%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.54%)</title><rect x="37.1274%" y="277" width="0.5420%" height="15" fill="rgb(223,143,42)" fg:x="137" fg:w="2"/><text x="37.3774%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (17 samples, 4.61%)</title><rect x="33.6043%" y="341" width="4.6070%" height="15" fill="rgb(231,40,23)" fg:x="124" fg:w="17"/><text x="33.8543%" y="351.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17 samples, 4.61%)</title><rect x="33.6043%" y="325" width="4.6070%" height="15" fill="rgb(230,187,21)" fg:x="124" fg:w="17"/><text x="33.8543%" y="335.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17 samples, 4.61%)</title><rect x="33.6043%" y="309" width="4.6070%" height="15" fill="rgb(244,191,49)" fg:x="124" fg:w="17"/><text x="33.8543%" y="319.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 2.44%)</title><rect x="35.7724%" y="293" width="2.4390%" height="15" fill="rgb(215,158,9)" fg:x="132" fg:w="9"/><text x="36.0224%" y="303.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.54%)</title><rect x="37.6694%" y="277" width="0.5420%" height="15" fill="rgb(233,55,45)" fg:x="139" fg:w="2"/><text x="37.9194%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 5.69%)</title><rect x="33.3333%" y="373" width="5.6911%" height="15" fill="rgb(241,1,29)" fg:x="123" fg:w="21"/><text x="33.5833%" y="383.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 5.69%)</title><rect x="33.3333%" y="357" width="5.6911%" height="15" fill="rgb(222,198,6)" fg:x="123" fg:w="21"/><text x="33.5833%" y="367.50">core::h..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.81%)</title><rect x="38.2114%" y="341" width="0.8130%" height="15" fill="rgb(219,136,9)" fg:x="141" fg:w="3"/><text x="38.4614%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.81%)</title><rect x="38.2114%" y="325" width="0.8130%" height="15" fill="rgb(236,55,46)" fg:x="141" fg:w="3"/><text x="38.4614%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.81%)</title><rect x="38.2114%" y="309" width="0.8130%" height="15" fill="rgb(245,60,19)" fg:x="141" fg:w="3"/><text x="38.4614%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.81%)</title><rect x="38.2114%" y="293" width="0.8130%" height="15" fill="rgb(243,151,10)" fg:x="141" fg:w="3"/><text x="38.4614%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.54%)</title><rect x="40.1084%" y="293" width="0.5420%" height="15" fill="rgb(241,66,9)" fg:x="148" fg:w="2"/><text x="40.3584%" y="303.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (2 samples, 0.54%)</title><rect x="40.1084%" y="277" width="0.5420%" height="15" fill="rgb(245,209,14)" fg:x="148" fg:w="2"/><text x="40.3584%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.54%)</title><rect x="40.1084%" y="261" width="0.5420%" height="15" fill="rgb(238,118,47)" fg:x="148" fg:w="2"/><text x="40.3584%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.27%)</title><rect x="40.6504%" y="293" width="0.2710%" height="15" fill="rgb(214,20,35)" fg:x="150" fg:w="1"/><text x="40.9004%" y="303.50"></text></g><g><title>core::mem::swap (1 samples, 0.27%)</title><rect x="40.9214%" y="293" width="0.2710%" height="15" fill="rgb(220,43,21)" fg:x="151" fg:w="1"/><text x="41.1714%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping (1 samples, 0.27%)</title><rect x="40.9214%" y="277" width="0.2710%" height="15" fill="rgb(220,147,16)" fg:x="151" fg:w="1"/><text x="41.1714%" y="287.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (1 samples, 0.27%)</title><rect x="40.9214%" y="261" width="0.2710%" height="15" fill="rgb(207,209,36)" fg:x="151" fg:w="1"/><text x="41.1714%" y="271.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.27%)</title><rect x="40.9214%" y="245" width="0.2710%" height="15" fill="rgb(253,199,39)" fg:x="151" fg:w="1"/><text x="41.1714%" y="255.50"></text></g><g><title>core::ptr::write (1 samples, 0.27%)</title><rect x="40.9214%" y="229" width="0.2710%" height="15" fill="rgb(209,143,44)" fg:x="151" fg:w="1"/><text x="41.1714%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (3 samples, 0.81%)</title><rect x="41.1924%" y="293" width="0.8130%" height="15" fill="rgb(206,120,51)" fg:x="152" fg:w="3"/><text x="41.4424%" y="303.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.81%)</title><rect x="41.1924%" y="277" width="0.8130%" height="15" fill="rgb(248,92,43)" fg:x="152" fg:w="3"/><text x="41.4424%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (3 samples, 0.81%)</title><rect x="41.1924%" y="261" width="0.8130%" height="15" fill="rgb(205,12,22)" fg:x="152" fg:w="3"/><text x="41.4424%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.81%)</title><rect x="41.1924%" y="245" width="0.8130%" height="15" fill="rgb(205,217,2)" fg:x="152" fg:w="3"/><text x="41.4424%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.81%)</title><rect x="41.1924%" y="229" width="0.8130%" height="15" fill="rgb(238,77,31)" fg:x="152" fg:w="3"/><text x="41.4424%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.27%)</title><rect x="41.7344%" y="213" width="0.2710%" height="15" fill="rgb(227,15,28)" fg:x="154" fg:w="1"/><text x="41.9844%" y="223.50"></text></g><g><title>__rust_dealloc (1 samples, 0.27%)</title><rect x="41.7344%" y="197" width="0.2710%" height="15" fill="rgb(241,15,46)" fg:x="154" fg:w="1"/><text x="41.9844%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (20 samples, 5.42%)</title><rect x="42.0054%" y="229" width="5.4201%" height="15" fill="rgb(231,40,23)" fg:x="155" fg:w="20"/><text x="42.2554%" y="239.50">&lt;std::h..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (20 samples, 5.42%)</title><rect x="42.0054%" y="213" width="5.4201%" height="15" fill="rgb(230,187,21)" fg:x="155" fg:w="20"/><text x="42.2554%" y="223.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (20 samples, 5.42%)</title><rect x="42.0054%" y="197" width="5.4201%" height="15" fill="rgb(244,191,49)" fg:x="155" fg:w="20"/><text x="42.2554%" y="207.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 1.08%)</title><rect x="46.3415%" y="181" width="1.0840%" height="15" fill="rgb(248,169,8)" fg:x="171" fg:w="4"/><text x="46.5915%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (21 samples, 5.69%)</title><rect x="42.0054%" y="293" width="5.6911%" height="15" fill="rgb(221,129,29)" fg:x="155" fg:w="21"/><text x="42.2554%" y="303.50">hashbro..</text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (21 samples, 5.69%)</title><rect x="42.0054%" y="277" width="5.6911%" height="15" fill="rgb(214,116,12)" fg:x="155" fg:w="21"/><text x="42.2554%" y="287.50">hashbro..</text></g><g><title>hashbrown::map::make_hash (21 samples, 5.69%)</title><rect x="42.0054%" y="261" width="5.6911%" height="15" fill="rgb(241,1,29)" fg:x="155" fg:w="21"/><text x="42.2554%" y="271.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 5.69%)</title><rect x="42.0054%" y="245" width="5.6911%" height="15" fill="rgb(222,198,6)" fg:x="155" fg:w="21"/><text x="42.2554%" y="255.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.27%)</title><rect x="47.4255%" y="229" width="0.2710%" height="15" fill="rgb(212,33,36)" fg:x="175" fg:w="1"/><text x="47.6755%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (9 samples, 2.44%)</title><rect x="47.6965%" y="293" width="2.4390%" height="15" fill="rgb(253,62,17)" fg:x="176" fg:w="9"/><text x="47.9465%" y="303.50">ha..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9 samples, 2.44%)</title><rect x="47.6965%" y="277" width="2.4390%" height="15" fill="rgb(224,197,7)" fg:x="176" fg:w="9"/><text x="47.9465%" y="287.50">co..</text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (4 samples, 1.08%)</title><rect x="50.1355%" y="293" width="1.0840%" height="15" fill="rgb(252,116,37)" fg:x="185" fg:w="4"/><text x="50.3855%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (4 samples, 1.08%)</title><rect x="50.1355%" y="277" width="1.0840%" height="15" fill="rgb(226,59,40)" fg:x="185" fg:w="4"/><text x="50.3855%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (4 samples, 1.08%)</title><rect x="50.1355%" y="261" width="1.0840%" height="15" fill="rgb(226,184,47)" fg:x="185" fg:w="4"/><text x="50.3855%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.54%)</title><rect x="53.3875%" y="245" width="0.5420%" height="15" fill="rgb(214,132,50)" fg:x="197" fg:w="2"/><text x="53.6375%" y="255.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (2 samples, 0.54%)</title><rect x="53.3875%" y="229" width="0.5420%" height="15" fill="rgb(232,20,30)" fg:x="197" fg:w="2"/><text x="53.6375%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (9 samples, 2.44%)</title><rect x="53.1165%" y="261" width="2.4390%" height="15" fill="rgb(244,103,4)" fg:x="196" fg:w="9"/><text x="53.3665%" y="271.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (6 samples, 1.63%)</title><rect x="53.9295%" y="245" width="1.6260%" height="15" fill="rgb(209,44,14)" fg:x="199" fg:w="6"/><text x="54.1795%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 1.63%)</title><rect x="53.9295%" y="229" width="1.6260%" height="15" fill="rgb(241,196,44)" fg:x="199" fg:w="6"/><text x="54.1795%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (39 samples, 10.57%)</title><rect x="51.2195%" y="293" width="10.5691%" height="15" fill="rgb(230,26,3)" fg:x="189" fg:w="39"/><text x="51.4695%" y="303.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (39 samples, 10.57%)</title><rect x="51.2195%" y="277" width="10.5691%" height="15" fill="rgb(205,45,50)" fg:x="189" fg:w="39"/><text x="51.4695%" y="287.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (23 samples, 6.23%)</title><rect x="55.5556%" y="261" width="6.2331%" height="15" fill="rgb(235,172,34)" fg:x="205" fg:w="23"/><text x="55.8056%" y="271.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.27%)</title><rect x="61.5176%" y="245" width="0.2710%" height="15" fill="rgb(216,46,33)" fg:x="227" fg:w="1"/><text x="61.7676%" y="255.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.27%)</title><rect x="61.5176%" y="229" width="0.2710%" height="15" fill="rgb(239,41,17)" fg:x="227" fg:w="1"/><text x="61.7676%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (6 samples, 1.63%)</title><rect x="61.7886%" y="261" width="1.6260%" height="15" fill="rgb(210,165,38)" fg:x="228" fg:w="6"/><text x="62.0386%" y="271.50"></text></g><g><title>core::intrinsics::write_bytes (6 samples, 1.63%)</title><rect x="61.7886%" y="245" width="1.6260%" height="15" fill="rgb(238,98,16)" fg:x="228" fg:w="6"/><text x="62.0386%" y="255.50"></text></g><g><title>__memset_avx512_unaligned_erms (3 samples, 0.81%)</title><rect x="62.6016%" y="229" width="0.8130%" height="15" fill="rgb(240,145,53)" fg:x="231" fg:w="3"/><text x="62.8516%" y="239.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.27%)</title><rect x="63.4146%" y="245" width="0.2710%" height="15" fill="rgb(220,171,1)" fg:x="234" fg:w="1"/><text x="63.6646%" y="255.50"></text></g><g><title>__rust_alloc (2 samples, 0.54%)</title><rect x="63.6856%" y="181" width="0.5420%" height="15" fill="rgb(243,191,43)" fg:x="235" fg:w="2"/><text x="63.9356%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (98 samples, 26.56%)</title><rect x="39.0244%" y="357" width="26.5583%" height="15" fill="rgb(224,220,10)" fg:x="144" fg:w="98"/><text x="39.2744%" y="367.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserve</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (97 samples, 26.29%)</title><rect x="39.2954%" y="341" width="26.2873%" height="15" fill="rgb(217,9,51)" fg:x="145" fg:w="97"/><text x="39.5454%" y="351.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserve_reh..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (97 samples, 26.29%)</title><rect x="39.2954%" y="325" width="26.2873%" height="15" fill="rgb(227,128,28)" fg:x="145" fg:w="97"/><text x="39.5454%" y="335.50">hashbrown::raw::RawTableInner::reserve_reh..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (94 samples, 25.47%)</title><rect x="40.1084%" y="309" width="25.4743%" height="15" fill="rgb(248,181,35)" fg:x="148" fg:w="94"/><text x="40.3584%" y="319.50">hashbrown::raw::RawTableInner::resize_inn..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (14 samples, 3.79%)</title><rect x="61.7886%" y="293" width="3.7940%" height="15" fill="rgb(207,186,38)" fg:x="228" fg:w="14"/><text x="62.0386%" y="303.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (14 samples, 3.79%)</title><rect x="61.7886%" y="277" width="3.7940%" height="15" fill="rgb(230,197,25)" fg:x="228" fg:w="14"/><text x="62.0386%" y="287.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (8 samples, 2.17%)</title><rect x="63.4146%" y="261" width="2.1680%" height="15" fill="rgb(246,9,22)" fg:x="234" fg:w="8"/><text x="63.6646%" y="271.50">h..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (7 samples, 1.90%)</title><rect x="63.6856%" y="245" width="1.8970%" height="15" fill="rgb(206,172,50)" fg:x="235" fg:w="7"/><text x="63.9356%" y="255.50">h..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 1.90%)</title><rect x="63.6856%" y="229" width="1.8970%" height="15" fill="rgb(231,114,21)" fg:x="235" fg:w="7"/><text x="63.9356%" y="239.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 1.90%)</title><rect x="63.6856%" y="213" width="1.8970%" height="15" fill="rgb(238,209,2)" fg:x="235" fg:w="7"/><text x="63.9356%" y="223.50">a..</text></g><g><title>alloc::alloc::alloc (7 samples, 1.90%)</title><rect x="63.6856%" y="197" width="1.8970%" height="15" fill="rgb(253,135,41)" fg:x="235" fg:w="7"/><text x="63.9356%" y="207.50">a..</text></g><g><title>malloc (5 samples, 1.36%)</title><rect x="64.2276%" y="181" width="1.3550%" height="15" fill="rgb(250,195,53)" fg:x="237" fg:w="5"/><text x="64.4776%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 4.34%)</title><rect x="66.6667%" y="341" width="4.3360%" height="15" fill="rgb(238,118,47)" fg:x="246" fg:w="16"/><text x="66.9167%" y="351.50">&lt;hash..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (15 samples, 4.07%)</title><rect x="66.9377%" y="325" width="4.0650%" height="15" fill="rgb(214,132,50)" fg:x="247" fg:w="15"/><text x="67.1877%" y="335.50">hash..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (15 samples, 4.07%)</title><rect x="66.9377%" y="309" width="4.0650%" height="15" fill="rgb(232,20,30)" fg:x="247" fg:w="15"/><text x="67.1877%" y="319.50">core..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (8 samples, 2.17%)</title><rect x="71.0027%" y="341" width="2.1680%" height="15" fill="rgb(244,103,4)" fg:x="262" fg:w="8"/><text x="71.2527%" y="351.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (42 samples, 11.38%)</title><rect x="73.1707%" y="341" width="11.3821%" height="15" fill="rgb(235,172,34)" fg:x="270" fg:w="42"/><text x="73.4207%" y="351.50">hashbrown::raw::R..</text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (33 samples, 8.94%)</title><rect x="75.6098%" y="325" width="8.9431%" height="15" fill="rgb(216,46,33)" fg:x="279" fg:w="33"/><text x="75.8598%" y="335.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::is_full (33 samples, 8.94%)</title><rect x="75.6098%" y="309" width="8.9431%" height="15" fill="rgb(239,41,17)" fg:x="279" fg:w="33"/><text x="75.8598%" y="319.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::h2 (1 samples, 0.27%)</title><rect x="84.5528%" y="341" width="0.2710%" height="15" fill="rgb(254,20,38)" fg:x="312" fg:w="1"/><text x="84.8028%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (23 samples, 6.23%)</title><rect x="84.8238%" y="341" width="6.2331%" height="15" fill="rgb(209,34,41)" fg:x="313" fg:w="23"/><text x="85.0738%" y="351.50">hashbrow..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23 samples, 6.23%)</title><rect x="84.8238%" y="325" width="6.2331%" height="15" fill="rgb(241,196,44)" fg:x="313" fg:w="23"/><text x="85.0738%" y="335.50">core::co..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (200 samples, 54.20%)</title><rect x="39.0244%" y="373" width="54.2005%" height="15" fill="rgb(236,164,17)" fg:x="144" fg:w="200"/><text x="39.2744%" y="383.50">hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (102 samples, 27.64%)</title><rect x="65.5827%" y="357" width="27.6423%" height="15" fill="rgb(209,5,27)" fg:x="242" fg:w="102"/><text x="65.8327%" y="367.50">hashbrown::raw::RawTableInner::find_or_find_..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (8 samples, 2.17%)</title><rect x="91.0569%" y="341" width="2.1680%" height="15" fill="rgb(251,162,0)" fg:x="336" fg:w="8"/><text x="91.3069%" y="351.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 2.17%)</title><rect x="91.0569%" y="325" width="2.1680%" height="15" fill="rgb(209,34,41)" fg:x="336" fg:w="8"/><text x="91.3069%" y="335.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 2.17%)</title><rect x="91.0569%" y="309" width="2.1680%" height="15" fill="rgb(241,196,44)" fg:x="336" fg:w="8"/><text x="91.3069%" y="319.50">c..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::all_affecting (343 samples, 92.95%)</title><rect x="2.7100%" y="613" width="92.9539%" height="15" fill="rgb(247,29,28)" fg:x="10" fg:w="343"/><text x="2.9600%" y="623.50">&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::all_affecting</text></g><g><title>core::iter::traits::iterator::Iterator::collect (238 samples, 64.50%)</title><rect x="31.1653%" y="597" width="64.4986%" height="15" fill="rgb(222,213,17)" fg:x="115" fg:w="238"/><text x="31.4153%" y="607.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (238 samples, 64.50%)</title><rect x="31.1653%" y="581" width="64.4986%" height="15" fill="rgb(224,25,43)" fg:x="115" fg:w="238"/><text x="31.4153%" y="591.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (237 samples, 64.23%)</title><rect x="31.4363%" y="565" width="64.2276%" height="15" fill="rgb(246,5,33)" fg:x="116" fg:w="237"/><text x="31.6863%" y="575.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (237 samples, 64.23%)</title><rect x="31.4363%" y="549" width="64.2276%" height="15" fill="rgb(254,23,36)" fg:x="116" fg:w="237"/><text x="31.6863%" y="559.50">&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (237 samples, 64.23%)</title><rect x="31.4363%" y="533" width="64.2276%" height="15" fill="rgb(222,167,8)" fg:x="116" fg:w="237"/><text x="31.6863%" y="543.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (237 samples, 64.23%)</title><rect x="31.4363%" y="517" width="64.2276%" height="15" fill="rgb(245,181,4)" fg:x="116" fg:w="237"/><text x="31.6863%" y="527.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (237 samples, 64.23%)</title><rect x="31.4363%" y="501" width="64.2276%" height="15" fill="rgb(242,69,50)" fg:x="116" fg:w="237"/><text x="31.6863%" y="511.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (237 samples, 64.23%)</title><rect x="31.4363%" y="485" width="64.2276%" height="15" fill="rgb(245,24,28)" fg:x="116" fg:w="237"/><text x="31.6863%" y="495.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (237 samples, 64.23%)</title><rect x="31.4363%" y="469" width="64.2276%" height="15" fill="rgb(214,12,39)" fg:x="116" fg:w="237"/><text x="31.6863%" y="479.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (236 samples, 63.96%)</title><rect x="31.7073%" y="453" width="63.9566%" height="15" fill="rgb(206,165,24)" fg:x="117" fg:w="236"/><text x="31.9573%" y="463.50">core::iter::adapters::filter_map::filter_map_fold::_{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (235 samples, 63.69%)</title><rect x="31.9783%" y="437" width="63.6856%" height="15" fill="rgb(214,87,41)" fg:x="118" fg:w="235"/><text x="32.2283%" y="447.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (235 samples, 63.69%)</title><rect x="31.9783%" y="421" width="63.6856%" height="15" fill="rgb(227,134,13)" fg:x="118" fg:w="235"/><text x="32.2283%" y="431.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (235 samples, 63.69%)</title><rect x="31.9783%" y="405" width="63.6856%" height="15" fill="rgb(230,164,22)" fg:x="118" fg:w="235"/><text x="32.2283%" y="415.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}}</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (233 samples, 63.14%)</title><rect x="32.5203%" y="389" width="63.1436%" height="15" fill="rgb(228,156,5)" fg:x="120" fg:w="233"/><text x="32.7703%" y="399.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (9 samples, 2.44%)</title><rect x="93.2249%" y="373" width="2.4390%" height="15" fill="rgb(218,104,39)" fg:x="344" fg:w="9"/><text x="93.4749%" y="383.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (9 samples, 2.44%)</title><rect x="93.2249%" y="357" width="2.4390%" height="15" fill="rgb(254,84,38)" fg:x="344" fg:w="9"/><text x="93.4749%" y="367.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (4 samples, 1.08%)</title><rect x="94.5799%" y="341" width="1.0840%" height="15" fill="rgb(240,81,36)" fg:x="349" fg:w="4"/><text x="94.8299%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (4 samples, 1.08%)</title><rect x="94.5799%" y="325" width="1.0840%" height="15" fill="rgb(249,179,13)" fg:x="349" fg:w="4"/><text x="94.8299%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (4 samples, 1.08%)</title><rect x="94.5799%" y="309" width="1.0840%" height="15" fill="rgb(212,215,37)" fg:x="349" fg:w="4"/><text x="94.8299%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.27%)</title><rect x="96.7480%" y="389" width="0.2710%" height="15" fill="rgb(223,143,42)" fg:x="357" fg:w="1"/><text x="96.9980%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 2.17%)</title><rect x="95.6640%" y="485" width="2.1680%" height="15" fill="rgb(241,1,29)" fg:x="353" fg:w="8"/><text x="95.9140%" y="495.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 2.17%)</title><rect x="95.6640%" y="469" width="2.1680%" height="15" fill="rgb(222,198,6)" fg:x="353" fg:w="8"/><text x="95.9140%" y="479.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 1.63%)</title><rect x="96.2060%" y="453" width="1.6260%" height="15" fill="rgb(231,40,23)" fg:x="355" fg:w="6"/><text x="96.4560%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 1.63%)</title><rect x="96.2060%" y="437" width="1.6260%" height="15" fill="rgb(230,187,21)" fg:x="355" fg:w="6"/><text x="96.4560%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 1.63%)</title><rect x="96.2060%" y="421" width="1.6260%" height="15" fill="rgb(244,191,49)" fg:x="355" fg:w="6"/><text x="96.4560%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 1.63%)</title><rect x="96.2060%" y="405" width="1.6260%" height="15" fill="rgb(215,158,9)" fg:x="355" fg:w="6"/><text x="96.4560%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.81%)</title><rect x="97.0190%" y="389" width="0.8130%" height="15" fill="rgb(233,55,45)" fg:x="358" fg:w="3"/><text x="97.2690%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.27%)</title><rect x="98.1030%" y="437" width="0.2710%" height="15" fill="rgb(238,118,47)" fg:x="362" fg:w="1"/><text x="98.3530%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.27%)</title><rect x="98.1030%" y="421" width="0.2710%" height="15" fill="rgb(214,132,50)" fg:x="362" fg:w="1"/><text x="98.3530%" y="431.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (1 samples, 0.27%)</title><rect x="98.1030%" y="405" width="0.2710%" height="15" fill="rgb(232,20,30)" fg:x="362" fg:w="1"/><text x="98.3530%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (11 samples, 2.98%)</title><rect x="95.6640%" y="613" width="2.9810%" height="15" fill="rgb(221,194,39)" fg:x="353" fg:w="11"/><text x="95.9140%" y="623.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (11 samples, 2.98%)</title><rect x="95.6640%" y="597" width="2.9810%" height="15" fill="rgb(223,137,46)" fg:x="353" fg:w="11"/><text x="95.9140%" y="607.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (11 samples, 2.98%)</title><rect x="95.6640%" y="581" width="2.9810%" height="15" fill="rgb(232,38,0)" fg:x="353" fg:w="11"/><text x="95.9140%" y="591.50">cor..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (11 samples, 2.98%)</title><rect x="95.6640%" y="565" width="2.9810%" height="15" fill="rgb(250,199,43)" fg:x="353" fg:w="11"/><text x="95.9140%" y="575.50">&lt;li..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (11 samples, 2.98%)</title><rect x="95.6640%" y="549" width="2.9810%" height="15" fill="rgb(230,125,23)" fg:x="353" fg:w="11"/><text x="95.9140%" y="559.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (11 samples, 2.98%)</title><rect x="95.6640%" y="533" width="2.9810%" height="15" fill="rgb(243,160,36)" fg:x="353" fg:w="11"/><text x="95.9140%" y="543.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (11 samples, 2.98%)</title><rect x="95.6640%" y="517" width="2.9810%" height="15" fill="rgb(216,162,16)" fg:x="353" fg:w="11"/><text x="95.9140%" y="527.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (11 samples, 2.98%)</title><rect x="95.6640%" y="501" width="2.9810%" height="15" fill="rgb(207,224,35)" fg:x="353" fg:w="11"/><text x="95.9140%" y="511.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.81%)</title><rect x="97.8320%" y="485" width="0.8130%" height="15" fill="rgb(230,119,31)" fg:x="361" fg:w="3"/><text x="98.0820%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.81%)</title><rect x="97.8320%" y="469" width="0.8130%" height="15" fill="rgb(252,63,32)" fg:x="361" fg:w="3"/><text x="98.0820%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.81%)</title><rect x="97.8320%" y="453" width="0.8130%" height="15" fill="rgb(243,218,21)" fg:x="361" fg:w="3"/><text x="98.0820%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.27%)</title><rect x="98.3740%" y="437" width="0.2710%" height="15" fill="rgb(209,34,41)" fg:x="363" fg:w="1"/><text x="98.6240%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.27%)</title><rect x="98.3740%" y="421" width="0.2710%" height="15" fill="rgb(241,196,44)" fg:x="363" fg:w="1"/><text x="98.6240%" y="431.50"></text></g><g><title>all (369 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="369"/><text x="0.2500%" y="1103.50"></text></g><g><title>solver::test::s (359 samples, 97.29%)</title><rect x="2.7100%" y="1077" width="97.2900%" height="15" fill="rgb(216,76,14)" fg:x="10" fg:w="359"/><text x="2.9600%" y="1087.50">solver::test::s</text></g><g><title>clone3 (359 samples, 97.29%)</title><rect x="2.7100%" y="1061" width="97.2900%" height="15" fill="rgb(208,138,34)" fg:x="10" fg:w="359"/><text x="2.9600%" y="1071.50">clone3</text></g><g><title>start_thread (359 samples, 97.29%)</title><rect x="2.7100%" y="1045" width="97.2900%" height="15" fill="rgb(209,148,13)" fg:x="10" fg:w="359"/><text x="2.9600%" y="1055.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (359 samples, 97.29%)</title><rect x="2.7100%" y="1029" width="97.2900%" height="15" fill="rgb(206,117,35)" fg:x="10" fg:w="359"/><text x="2.9600%" y="1039.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (359 samples, 97.29%)</title><rect x="2.7100%" y="1013" width="97.2900%" height="15" fill="rgb(228,202,16)" fg:x="10" fg:w="359"/><text x="2.9600%" y="1023.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (359 samples, 97.29%)</title><rect x="2.7100%" y="997" width="97.2900%" height="15" fill="rgb(228,202,16)" fg:x="10" fg:w="359"/><text x="2.9600%" y="1007.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (359 samples, 97.29%)</title><rect x="2.7100%" y="981" width="97.2900%" height="15" fill="rgb(218,104,40)" fg:x="10" fg:w="359"/><text x="2.9600%" y="991.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (359 samples, 97.29%)</title><rect x="2.7100%" y="965" width="97.2900%" height="15" fill="rgb(252,97,39)" fg:x="10" fg:w="359"/><text x="2.9600%" y="975.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (359 samples, 97.29%)</title><rect x="2.7100%" y="949" width="97.2900%" height="15" fill="rgb(216,75,8)" fg:x="10" fg:w="359"/><text x="2.9600%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (359 samples, 97.29%)</title><rect x="2.7100%" y="933" width="97.2900%" height="15" fill="rgb(212,61,29)" fg:x="10" fg:w="359"/><text x="2.9600%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (359 samples, 97.29%)</title><rect x="2.7100%" y="917" width="97.2900%" height="15" fill="rgb(232,162,46)" fg:x="10" fg:w="359"/><text x="2.9600%" y="927.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (359 samples, 97.29%)</title><rect x="2.7100%" y="901" width="97.2900%" height="15" fill="rgb(230,83,13)" fg:x="10" fg:w="359"/><text x="2.9600%" y="911.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (359 samples, 97.29%)</title><rect x="2.7100%" y="885" width="97.2900%" height="15" fill="rgb(229,2,34)" fg:x="10" fg:w="359"/><text x="2.9600%" y="895.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (359 samples, 97.29%)</title><rect x="2.7100%" y="869" width="97.2900%" height="15" fill="rgb(210,88,34)" fg:x="10" fg:w="359"/><text x="2.9600%" y="879.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (359 samples, 97.29%)</title><rect x="2.7100%" y="853" width="97.2900%" height="15" fill="rgb(217,197,47)" fg:x="10" fg:w="359"/><text x="2.9600%" y="863.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (359 samples, 97.29%)</title><rect x="2.7100%" y="837" width="97.2900%" height="15" fill="rgb(217,197,47)" fg:x="10" fg:w="359"/><text x="2.9600%" y="847.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (359 samples, 97.29%)</title><rect x="2.7100%" y="821" width="97.2900%" height="15" fill="rgb(228,141,24)" fg:x="10" fg:w="359"/><text x="2.9600%" y="831.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (359 samples, 97.29%)</title><rect x="2.7100%" y="805" width="97.2900%" height="15" fill="rgb(216,75,8)" fg:x="10" fg:w="359"/><text x="2.9600%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (359 samples, 97.29%)</title><rect x="2.7100%" y="789" width="97.2900%" height="15" fill="rgb(212,61,29)" fg:x="10" fg:w="359"/><text x="2.9600%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (359 samples, 97.29%)</title><rect x="2.7100%" y="773" width="97.2900%" height="15" fill="rgb(232,162,46)" fg:x="10" fg:w="359"/><text x="2.9600%" y="783.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (359 samples, 97.29%)</title><rect x="2.7100%" y="757" width="97.2900%" height="15" fill="rgb(230,83,13)" fg:x="10" fg:w="359"/><text x="2.9600%" y="767.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>test::run_test_in_process::_{{closure}} (359 samples, 97.29%)</title><rect x="2.7100%" y="741" width="97.2900%" height="15" fill="rgb(233,206,30)" fg:x="10" fg:w="359"/><text x="2.9600%" y="751.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (359 samples, 97.29%)</title><rect x="2.7100%" y="725" width="97.2900%" height="15" fill="rgb(227,183,31)" fg:x="10" fg:w="359"/><text x="2.9600%" y="735.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (359 samples, 97.29%)</title><rect x="2.7100%" y="709" width="97.2900%" height="15" fill="rgb(210,80,10)" fg:x="10" fg:w="359"/><text x="2.9600%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (359 samples, 97.29%)</title><rect x="2.7100%" y="693" width="97.2900%" height="15" fill="rgb(210,80,10)" fg:x="10" fg:w="359"/><text x="2.9600%" y="703.50">core::ops::function::FnOnce::call_once</text></g><g><title>libsolver::solver::test::solve_sudoku_iterative_dfs::_{{closure}} (359 samples, 97.29%)</title><rect x="2.7100%" y="677" width="97.2900%" height="15" fill="rgb(224,3,30)" fg:x="10" fg:w="359"/><text x="2.9600%" y="687.50">libsolver::solver::test::solve_sudoku_iterative_dfs::_{{closure}}</text></g><g><title>libsolver::solver::test::solve_sudoku_iterative_dfs (359 samples, 97.29%)</title><rect x="2.7100%" y="661" width="97.2900%" height="15" fill="rgb(238,48,25)" fg:x="10" fg:w="359"/><text x="2.9600%" y="671.50">libsolver::solver::test::solve_sudoku_iterative_dfs</text></g><g><title>libsolver::solver::Solver::solve (359 samples, 97.29%)</title><rect x="2.7100%" y="645" width="97.2900%" height="15" fill="rgb(233,29,38)" fg:x="10" fg:w="359"/><text x="2.9600%" y="655.50">libsolver::solver::Solver::solve</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve (359 samples, 97.29%)</title><rect x="2.7100%" y="629" width="97.2900%" height="15" fill="rgb(213,141,8)" fg:x="10" fg:w="359"/><text x="2.9600%" y="639.50">&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;libsolver::solver::SudokuValue&gt;&gt; (5 samples, 1.36%)</title><rect x="98.6450%" y="613" width="1.3550%" height="15" fill="rgb(205,50,1)" fg:x="364" fg:w="5"/><text x="98.8950%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;libsolver::solver::SudokuValue,std::hash::random::RandomState&gt;&gt; (5 samples, 1.36%)</title><rect x="98.6450%" y="597" width="1.3550%" height="15" fill="rgb(219,112,45)" fg:x="364" fg:w="5"/><text x="98.8950%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;libsolver::solver::SudokuValue,(),std::hash::random::RandomState&gt;&gt; (5 samples, 1.36%)</title><rect x="98.6450%" y="581" width="1.3550%" height="15" fill="rgb(227,182,54)" fg:x="364" fg:w="5"/><text x="98.8950%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(libsolver::solver::SudokuValue,())&gt;&gt; (5 samples, 1.36%)</title><rect x="98.6450%" y="565" width="1.3550%" height="15" fill="rgb(230,34,8)" fg:x="364" fg:w="5"/><text x="98.8950%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 1.36%)</title><rect x="98.6450%" y="549" width="1.3550%" height="15" fill="rgb(253,155,41)" fg:x="364" fg:w="5"/><text x="98.8950%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (5 samples, 1.36%)</title><rect x="98.6450%" y="533" width="1.3550%" height="15" fill="rgb(241,210,10)" fg:x="364" fg:w="5"/><text x="98.8950%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (5 samples, 1.36%)</title><rect x="98.6450%" y="517" width="1.3550%" height="15" fill="rgb(205,217,2)" fg:x="364" fg:w="5"/><text x="98.8950%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 1.36%)</title><rect x="98.6450%" y="501" width="1.3550%" height="15" fill="rgb(238,77,31)" fg:x="364" fg:w="5"/><text x="98.8950%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 1.36%)</title><rect x="98.6450%" y="485" width="1.3550%" height="15" fill="rgb(227,15,28)" fg:x="364" fg:w="5"/><text x="98.8950%" y="495.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 1.36%)</title><rect x="98.6450%" y="469" width="1.3550%" height="15" fill="rgb(240,159,37)" fg:x="364" fg:w="5"/><text x="98.8950%" y="479.50"></text></g><g><title>_int_free (2 samples, 0.54%)</title><rect x="99.4580%" y="453" width="0.5420%" height="15" fill="rgb(221,113,48)" fg:x="367" fg:w="2"/><text x="99.7080%" y="463.50"></text></g></svg></svg>