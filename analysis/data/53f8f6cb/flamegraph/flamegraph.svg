<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="132"><g><title>[unknown] (1 samples, 0.76%)</title><rect x="0.0000%" y="805" width="0.7576%" height="15" fill="rgb(227,28,50)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="789" width="0.7576%" height="15" fill="rgb(227,28,50)" fg:x="2" fg:w="1"/><text x="1.7652%" y="799.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (1 samples, 0.76%)</title><rect x="2.2727%" y="789" width="0.7576%" height="15" fill="rgb(217,176,50)" fg:x="3" fg:w="1"/><text x="2.5227%" y="799.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.76%)</title><rect x="2.2727%" y="773" width="0.7576%" height="15" fill="rgb(249,173,1)" fg:x="3" fg:w="1"/><text x="2.5227%" y="783.50"></text></g><g><title>main (1 samples, 0.76%)</title><rect x="2.2727%" y="757" width="0.7576%" height="15" fill="rgb(238,28,47)" fg:x="3" fg:w="1"/><text x="2.5227%" y="767.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.76%)</title><rect x="2.2727%" y="741" width="0.7576%" height="15" fill="rgb(240,177,54)" fg:x="3" fg:w="1"/><text x="2.5227%" y="751.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.76%)</title><rect x="2.2727%" y="725" width="0.7576%" height="15" fill="rgb(216,75,8)" fg:x="3" fg:w="1"/><text x="2.5227%" y="735.50"></text></g><g><title>std::panicking::try (1 samples, 0.76%)</title><rect x="2.2727%" y="709" width="0.7576%" height="15" fill="rgb(212,61,29)" fg:x="3" fg:w="1"/><text x="2.5227%" y="719.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.76%)</title><rect x="2.2727%" y="693" width="0.7576%" height="15" fill="rgb(232,162,46)" fg:x="3" fg:w="1"/><text x="2.5227%" y="703.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1 samples, 0.76%)</title><rect x="2.2727%" y="677" width="0.7576%" height="15" fill="rgb(225,224,8)" fg:x="3" fg:w="1"/><text x="2.5227%" y="687.50"></text></g><g><title>std::rt::init (1 samples, 0.76%)</title><rect x="2.2727%" y="661" width="0.7576%" height="15" fill="rgb(248,16,48)" fg:x="3" fg:w="1"/><text x="2.5227%" y="671.50"></text></g><g><title>std::sys::pal::unix::thread::guard::init (1 samples, 0.76%)</title><rect x="2.2727%" y="645" width="0.7576%" height="15" fill="rgb(249,104,36)" fg:x="3" fg:w="1"/><text x="2.5227%" y="655.50"></text></g><g><title>std::sys::pal::unix::thread::guard::get_stack_start_aligned (1 samples, 0.76%)</title><rect x="2.2727%" y="629" width="0.7576%" height="15" fill="rgb(226,162,45)" fg:x="3" fg:w="1"/><text x="2.5227%" y="639.50"></text></g><g><title>std::sys::pal::unix::thread::guard::get_stack_start (1 samples, 0.76%)</title><rect x="2.2727%" y="613" width="0.7576%" height="15" fill="rgb(211,181,39)" fg:x="3" fg:w="1"/><text x="2.5227%" y="623.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (1 samples, 0.76%)</title><rect x="2.2727%" y="597" width="0.7576%" height="15" fill="rgb(219,192,28)" fg:x="3" fg:w="1"/><text x="2.5227%" y="607.50"></text></g><g><title>__isoc23_sscanf (1 samples, 0.76%)</title><rect x="2.2727%" y="581" width="0.7576%" height="15" fill="rgb(247,109,26)" fg:x="3" fg:w="1"/><text x="2.5227%" y="591.50"></text></g><g><title>__vfscanf_internal (1 samples, 0.76%)</title><rect x="2.2727%" y="565" width="0.7576%" height="15" fill="rgb(242,100,28)" fg:x="3" fg:w="1"/><text x="2.5227%" y="575.50"></text></g><g><title>_start (8 samples, 6.06%)</title><rect x="0.7576%" y="805" width="6.0606%" height="15" fill="rgb(210,219,27)" fg:x="1" fg:w="8"/><text x="1.0076%" y="815.50">_start</text></g><g><title>_dl_start (5 samples, 3.79%)</title><rect x="3.0303%" y="789" width="3.7879%" height="15" fill="rgb(214,13,30)" fg:x="4" fg:w="5"/><text x="3.2803%" y="799.50">_dl_..</text></g><g><title>_dl_sysdep_start (2 samples, 1.52%)</title><rect x="5.3030%" y="773" width="1.5152%" height="15" fill="rgb(238,104,49)" fg:x="7" fg:w="2"/><text x="5.5530%" y="783.50"></text></g><g><title>dl_main (1 samples, 0.76%)</title><rect x="6.0606%" y="757" width="0.7576%" height="15" fill="rgb(253,59,10)" fg:x="8" fg:w="1"/><text x="6.3106%" y="767.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.76%)</title><rect x="6.0606%" y="741" width="0.7576%" height="15" fill="rgb(208,68,2)" fg:x="8" fg:w="1"/><text x="6.3106%" y="751.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.76%)</title><rect x="6.0606%" y="725" width="0.7576%" height="15" fill="rgb(238,71,42)" fg:x="8" fg:w="1"/><text x="6.3106%" y="735.50"></text></g><g><title>openaux (1 samples, 0.76%)</title><rect x="6.0606%" y="709" width="0.7576%" height="15" fill="rgb(215,55,1)" fg:x="8" fg:w="1"/><text x="6.3106%" y="719.50"></text></g><g><title>_dl_map_object (1 samples, 0.76%)</title><rect x="6.0606%" y="693" width="0.7576%" height="15" fill="rgb(247,77,9)" fg:x="8" fg:w="1"/><text x="6.3106%" y="703.50"></text></g><g><title>open_path (1 samples, 0.76%)</title><rect x="6.0606%" y="677" width="0.7576%" height="15" fill="rgb(245,82,9)" fg:x="8" fg:w="1"/><text x="6.3106%" y="687.50"></text></g><g><title>open_verify.constprop.0 (1 samples, 0.76%)</title><rect x="6.0606%" y="661" width="0.7576%" height="15" fill="rgb(207,185,8)" fg:x="8" fg:w="1"/><text x="6.3106%" y="671.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 0.76%)</title><rect x="6.0606%" y="645" width="0.7576%" height="15" fill="rgb(216,127,2)" fg:x="8" fg:w="1"/><text x="6.3106%" y="655.50"></text></g><g><title>libsolver-df786 (12 samples, 9.09%)</title><rect x="0.0000%" y="821" width="9.0909%" height="15" fill="rgb(252,149,5)" fg:x="0" fg:w="12"/><text x="0.2500%" y="831.50">libsolver-df7..</text></g><g><title>clone3 (3 samples, 2.27%)</title><rect x="6.8182%" y="805" width="2.2727%" height="15" fill="rgb(208,138,34)" fg:x="9" fg:w="3"/><text x="7.0682%" y="815.50">c..</text></g><g><title>start_thread (3 samples, 2.27%)</title><rect x="6.8182%" y="789" width="2.2727%" height="15" fill="rgb(209,148,13)" fg:x="9" fg:w="3"/><text x="7.0682%" y="799.50">s..</text></g><g><title>name_stack_maps (2 samples, 1.52%)</title><rect x="7.5758%" y="773" width="1.5152%" height="15" fill="rgb(219,110,6)" fg:x="10" fg:w="2"/><text x="7.8258%" y="783.50"></text></g><g><title>__GI___snprintf (2 samples, 1.52%)</title><rect x="7.5758%" y="757" width="1.5152%" height="15" fill="rgb(209,45,0)" fg:x="10" fg:w="2"/><text x="7.8258%" y="767.50"></text></g><g><title>__vsnprintf_internal (2 samples, 1.52%)</title><rect x="7.5758%" y="741" width="1.5152%" height="15" fill="rgb(211,112,12)" fg:x="10" fg:w="2"/><text x="7.8258%" y="751.50"></text></g><g><title>__printf_buffer (1 samples, 0.76%)</title><rect x="8.3333%" y="725" width="0.7576%" height="15" fill="rgb(246,229,16)" fg:x="11" fg:w="1"/><text x="8.5833%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 3.79%)</title><rect x="12.1212%" y="69" width="3.7879%" height="15" fill="rgb(248,169,8)" fg:x="16" fg:w="5"/><text x="12.3712%" y="79.50">&lt;cor..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 2.27%)</title><rect x="13.6364%" y="53" width="2.2727%" height="15" fill="rgb(223,143,42)" fg:x="18" fg:w="3"/><text x="13.8864%" y="63.50">c..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 1.52%)</title><rect x="17.4242%" y="53" width="1.5152%" height="15" fill="rgb(223,143,42)" fg:x="23" fg:w="2"/><text x="17.6742%" y="63.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 8.33%)</title><rect x="11.3636%" y="117" width="8.3333%" height="15" fill="rgb(231,40,23)" fg:x="15" fg:w="11"/><text x="11.6136%" y="127.50">&lt;std::hash::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 8.33%)</title><rect x="11.3636%" y="101" width="8.3333%" height="15" fill="rgb(230,187,21)" fg:x="15" fg:w="11"/><text x="11.6136%" y="111.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 8.33%)</title><rect x="11.3636%" y="85" width="8.3333%" height="15" fill="rgb(244,191,49)" fg:x="15" fg:w="11"/><text x="11.6136%" y="95.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 3.79%)</title><rect x="15.9091%" y="69" width="3.7879%" height="15" fill="rgb(215,158,9)" fg:x="21" fg:w="5"/><text x="16.1591%" y="79.50">&lt;cor..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.76%)</title><rect x="18.9394%" y="53" width="0.7576%" height="15" fill="rgb(233,55,45)" fg:x="25" fg:w="1"/><text x="19.1894%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (12 samples, 9.09%)</title><rect x="11.3636%" y="149" width="9.0909%" height="15" fill="rgb(241,1,29)" fg:x="15" fg:w="12"/><text x="11.6136%" y="159.50">hashbrown::ma..</text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 9.09%)</title><rect x="11.3636%" y="133" width="9.0909%" height="15" fill="rgb(222,198,6)" fg:x="15" fg:w="12"/><text x="11.6136%" y="143.50">core::hash::B..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.76%)</title><rect x="19.6970%" y="117" width="0.7576%" height="15" fill="rgb(219,136,9)" fg:x="26" fg:w="1"/><text x="19.9470%" y="127.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.76%)</title><rect x="19.6970%" y="101" width="0.7576%" height="15" fill="rgb(236,55,46)" fg:x="26" fg:w="1"/><text x="19.9470%" y="111.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.76%)</title><rect x="19.6970%" y="85" width="0.7576%" height="15" fill="rgb(245,60,19)" fg:x="26" fg:w="1"/><text x="19.9470%" y="95.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.76%)</title><rect x="19.6970%" y="69" width="0.7576%" height="15" fill="rgb(243,151,10)" fg:x="26" fg:w="1"/><text x="19.9470%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 2.27%)</title><rect x="34.0909%" y="117" width="2.2727%" height="15" fill="rgb(238,118,47)" fg:x="45" fg:w="3"/><text x="34.3409%" y="127.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 2.27%)</title><rect x="34.0909%" y="101" width="2.2727%" height="15" fill="rgb(214,132,50)" fg:x="45" fg:w="3"/><text x="34.3409%" y="111.50">h..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (3 samples, 2.27%)</title><rect x="34.0909%" y="85" width="2.2727%" height="15" fill="rgb(232,20,30)" fg:x="45" fg:w="3"/><text x="34.3409%" y="95.50">c..</text></g><g><title>core::option::Option&lt;T&gt;::is_none (4 samples, 3.03%)</title><rect x="36.3636%" y="117" width="3.0303%" height="15" fill="rgb(235,131,19)" fg:x="48" fg:w="4"/><text x="36.6136%" y="127.50">cor..</text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 3.03%)</title><rect x="36.3636%" y="101" width="3.0303%" height="15" fill="rgb(212,88,23)" fg:x="48" fg:w="4"/><text x="36.6136%" y="111.50">cor..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (3 samples, 2.27%)</title><rect x="39.3939%" y="117" width="2.2727%" height="15" fill="rgb(244,143,40)" fg:x="52" fg:w="3"/><text x="39.6439%" y="127.50">h..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (3 samples, 2.27%)</title><rect x="39.3939%" y="101" width="2.2727%" height="15" fill="rgb(229,193,19)" fg:x="52" fg:w="3"/><text x="39.6439%" y="111.50">h..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 2.27%)</title><rect x="39.3939%" y="85" width="2.2727%" height="15" fill="rgb(249,88,53)" fg:x="52" fg:w="3"/><text x="39.6439%" y="95.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 2.27%)</title><rect x="39.3939%" y="69" width="2.2727%" height="15" fill="rgb(242,44,7)" fg:x="52" fg:w="3"/><text x="39.6439%" y="79.50">c..</text></g><g><title>&lt;libsolver::solver::SudokuValue as core::cmp::PartialEq&gt;::eq (1 samples, 0.76%)</title><rect x="40.9091%" y="53" width="0.7576%" height="15" fill="rgb(249,166,38)" fg:x="54" fg:w="1"/><text x="41.1591%" y="63.50"></text></g><g><title>&lt;core::num::nonzero::NonZero&lt;u8&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.76%)</title><rect x="40.9091%" y="37" width="0.7576%" height="15" fill="rgb(233,114,9)" fg:x="54" fg:w="1"/><text x="41.1591%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 2.27%)</title><rect x="41.6667%" y="117" width="2.2727%" height="15" fill="rgb(244,103,4)" fg:x="55" fg:w="3"/><text x="41.9167%" y="127.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (18 samples, 13.64%)</title><rect x="43.9394%" y="117" width="13.6364%" height="15" fill="rgb(235,172,34)" fg:x="58" fg:w="18"/><text x="44.1894%" y="127.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (16 samples, 12.12%)</title><rect x="45.4545%" y="101" width="12.1212%" height="15" fill="rgb(216,46,33)" fg:x="60" fg:w="16"/><text x="45.7045%" y="111.50">hashbrown::raw::Ra..</text></g><g><title>hashbrown::raw::is_full (16 samples, 12.12%)</title><rect x="45.4545%" y="85" width="12.1212%" height="15" fill="rgb(239,41,17)" fg:x="60" fg:w="16"/><text x="45.7045%" y="95.50">hashbrown::raw::is..</text></g><g><title>hashbrown::raw::h2 (3 samples, 2.27%)</title><rect x="57.5758%" y="117" width="2.2727%" height="15" fill="rgb(254,20,38)" fg:x="76" fg:w="3"/><text x="57.8258%" y="127.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (22 samples, 16.67%)</title><rect x="59.8485%" y="117" width="16.6667%" height="15" fill="rgb(209,34,41)" fg:x="79" fg:w="22"/><text x="60.0985%" y="127.50">hashbrown::raw::sse2::Grou..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 16.67%)</title><rect x="59.8485%" y="101" width="16.6667%" height="15" fill="rgb(241,196,44)" fg:x="79" fg:w="22"/><text x="60.0985%" y="111.50">core::core_arch::x86::sse2..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (81 samples, 61.36%)</title><rect x="20.4545%" y="149" width="61.3636%" height="15" fill="rgb(236,164,17)" fg:x="27" fg:w="81"/><text x="20.7045%" y="159.50">hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (81 samples, 61.36%)</title><rect x="20.4545%" y="133" width="61.3636%" height="15" fill="rgb(209,5,27)" fg:x="27" fg:w="81"/><text x="20.7045%" y="143.50">hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (7 samples, 5.30%)</title><rect x="76.5152%" y="117" width="5.3030%" height="15" fill="rgb(251,162,0)" fg:x="101" fg:w="7"/><text x="76.7652%" y="127.50">hashbr..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 5.30%)</title><rect x="76.5152%" y="101" width="5.3030%" height="15" fill="rgb(209,34,41)" fg:x="101" fg:w="7"/><text x="76.7652%" y="111.50">hashbr..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 5.30%)</title><rect x="76.5152%" y="85" width="5.3030%" height="15" fill="rgb(241,196,44)" fg:x="101" fg:w="7"/><text x="76.7652%" y="95.50">core::..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (99 samples, 75.00%)</title><rect x="9.0909%" y="341" width="75.0000%" height="15" fill="rgb(246,5,33)" fg:x="12" fg:w="99"/><text x="9.3409%" y="351.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (99 samples, 75.00%)</title><rect x="9.0909%" y="325" width="75.0000%" height="15" fill="rgb(254,23,36)" fg:x="12" fg:w="99"/><text x="9.3409%" y="335.50">&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (99 samples, 75.00%)</title><rect x="9.0909%" y="309" width="75.0000%" height="15" fill="rgb(222,167,8)" fg:x="12" fg:w="99"/><text x="9.3409%" y="319.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (99 samples, 75.00%)</title><rect x="9.0909%" y="293" width="75.0000%" height="15" fill="rgb(245,181,4)" fg:x="12" fg:w="99"/><text x="9.3409%" y="303.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (99 samples, 75.00%)</title><rect x="9.0909%" y="277" width="75.0000%" height="15" fill="rgb(242,69,50)" fg:x="12" fg:w="99"/><text x="9.3409%" y="287.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (99 samples, 75.00%)</title><rect x="9.0909%" y="261" width="75.0000%" height="15" fill="rgb(245,24,28)" fg:x="12" fg:w="99"/><text x="9.3409%" y="271.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (99 samples, 75.00%)</title><rect x="9.0909%" y="245" width="75.0000%" height="15" fill="rgb(214,12,39)" fg:x="12" fg:w="99"/><text x="9.3409%" y="255.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::_{{closure}} (99 samples, 75.00%)</title><rect x="9.0909%" y="229" width="75.0000%" height="15" fill="rgb(206,165,24)" fg:x="12" fg:w="99"/><text x="9.3409%" y="239.50">core::iter::adapters::filter_map::filter_map_fold::_{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (97 samples, 73.48%)</title><rect x="10.6061%" y="213" width="73.4848%" height="15" fill="rgb(214,87,41)" fg:x="14" fg:w="97"/><text x="10.8561%" y="223.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (97 samples, 73.48%)</title><rect x="10.6061%" y="197" width="73.4848%" height="15" fill="rgb(227,134,13)" fg:x="14" fg:w="97"/><text x="10.8561%" y="207.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (97 samples, 73.48%)</title><rect x="10.6061%" y="181" width="73.4848%" height="15" fill="rgb(230,164,22)" fg:x="14" fg:w="97"/><text x="10.8561%" y="191.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}}</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (97 samples, 73.48%)</title><rect x="10.6061%" y="165" width="73.4848%" height="15" fill="rgb(228,156,5)" fg:x="14" fg:w="97"/><text x="10.8561%" y="175.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (3 samples, 2.27%)</title><rect x="81.8182%" y="149" width="2.2727%" height="15" fill="rgb(218,104,39)" fg:x="108" fg:w="3"/><text x="82.0682%" y="159.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3 samples, 2.27%)</title><rect x="81.8182%" y="133" width="2.2727%" height="15" fill="rgb(254,84,38)" fg:x="108" fg:w="3"/><text x="82.0682%" y="143.50">h..</text></g><g><title>libsolver::solver::Sudoku::cell_from_ix (1 samples, 0.76%)</title><rect x="84.0909%" y="341" width="0.7576%" height="15" fill="rgb(232,7,24)" fg:x="111" fg:w="1"/><text x="84.3409%" y="351.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::all_affecting (102 samples, 77.27%)</title><rect x="9.0909%" y="357" width="77.2727%" height="15" fill="rgb(247,29,28)" fg:x="12" fg:w="102"/><text x="9.3409%" y="367.50">&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::all_affecting</text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::with_capacity (2 samples, 1.52%)</title><rect x="84.8485%" y="341" width="1.5152%" height="15" fill="rgb(221,117,0)" fg:x="112" fg:w="2"/><text x="85.0985%" y="351.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::with_capacity_and_hasher (2 samples, 1.52%)</title><rect x="84.8485%" y="325" width="1.5152%" height="15" fill="rgb(225,48,10)" fg:x="112" fg:w="2"/><text x="85.0985%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::with_capacity_and_hasher (2 samples, 1.52%)</title><rect x="84.8485%" y="309" width="1.5152%" height="15" fill="rgb(252,34,19)" fg:x="112" fg:w="2"/><text x="85.0985%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2 samples, 1.52%)</title><rect x="84.8485%" y="293" width="1.5152%" height="15" fill="rgb(214,20,49)" fg:x="112" fg:w="2"/><text x="85.0985%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (2 samples, 1.52%)</title><rect x="84.8485%" y="277" width="1.5152%" height="15" fill="rgb(230,205,22)" fg:x="112" fg:w="2"/><text x="85.0985%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (2 samples, 1.52%)</title><rect x="84.8485%" y="261" width="1.5152%" height="15" fill="rgb(208,157,0)" fg:x="112" fg:w="2"/><text x="85.0985%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (2 samples, 1.52%)</title><rect x="84.8485%" y="245" width="1.5152%" height="15" fill="rgb(220,35,19)" fg:x="112" fg:w="2"/><text x="85.0985%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (2 samples, 1.52%)</title><rect x="84.8485%" y="229" width="1.5152%" height="15" fill="rgb(230,197,25)" fg:x="112" fg:w="2"/><text x="85.0985%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 1.52%)</title><rect x="84.8485%" y="213" width="1.5152%" height="15" fill="rgb(246,9,22)" fg:x="112" fg:w="2"/><text x="85.0985%" y="223.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 1.52%)</title><rect x="84.8485%" y="197" width="1.5152%" height="15" fill="rgb(206,172,50)" fg:x="112" fg:w="2"/><text x="85.0985%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 1.52%)</title><rect x="84.8485%" y="181" width="1.5152%" height="15" fill="rgb(231,114,21)" fg:x="112" fg:w="2"/><text x="85.0985%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 1.52%)</title><rect x="84.8485%" y="165" width="1.5152%" height="15" fill="rgb(238,209,2)" fg:x="112" fg:w="2"/><text x="85.0985%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 1.52%)</title><rect x="84.8485%" y="149" width="1.5152%" height="15" fill="rgb(253,135,41)" fg:x="112" fg:w="2"/><text x="85.0985%" y="159.50"></text></g><g><title>malloc (2 samples, 1.52%)</title><rect x="84.8485%" y="133" width="1.5152%" height="15" fill="rgb(250,195,53)" fg:x="112" fg:w="2"/><text x="85.0985%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 2.27%)</title><rect x="86.3636%" y="197" width="2.2727%" height="15" fill="rgb(231,40,23)" fg:x="114" fg:w="3"/><text x="86.6136%" y="207.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 2.27%)</title><rect x="86.3636%" y="181" width="2.2727%" height="15" fill="rgb(230,187,21)" fg:x="114" fg:w="3"/><text x="86.6136%" y="191.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 2.27%)</title><rect x="86.3636%" y="165" width="2.2727%" height="15" fill="rgb(244,191,49)" fg:x="114" fg:w="3"/><text x="86.6136%" y="175.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 2.27%)</title><rect x="86.3636%" y="149" width="2.2727%" height="15" fill="rgb(215,158,9)" fg:x="114" fg:w="3"/><text x="86.6136%" y="159.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 2.27%)</title><rect x="86.3636%" y="133" width="2.2727%" height="15" fill="rgb(223,143,42)" fg:x="114" fg:w="3"/><text x="86.6136%" y="143.50">c..</text></g><g><title>hashbrown::map::make_hash (4 samples, 3.03%)</title><rect x="86.3636%" y="229" width="3.0303%" height="15" fill="rgb(241,1,29)" fg:x="114" fg:w="4"/><text x="86.6136%" y="239.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 3.03%)</title><rect x="86.3636%" y="213" width="3.0303%" height="15" fill="rgb(222,198,6)" fg:x="114" fg:w="4"/><text x="86.6136%" y="223.50">cor..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.76%)</title><rect x="88.6364%" y="197" width="0.7576%" height="15" fill="rgb(219,136,9)" fg:x="117" fg:w="1"/><text x="88.8864%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.76%)</title><rect x="88.6364%" y="181" width="0.7576%" height="15" fill="rgb(236,55,46)" fg:x="117" fg:w="1"/><text x="88.8864%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.76%)</title><rect x="88.6364%" y="165" width="0.7576%" height="15" fill="rgb(245,60,19)" fg:x="117" fg:w="1"/><text x="88.8864%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.76%)</title><rect x="88.6364%" y="149" width="0.7576%" height="15" fill="rgb(243,151,10)" fg:x="117" fg:w="1"/><text x="88.8864%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 1.52%)</title><rect x="93.1818%" y="181" width="1.5152%" height="15" fill="rgb(206,119,39)" fg:x="123" fg:w="2"/><text x="93.4318%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2 samples, 1.52%)</title><rect x="93.1818%" y="165" width="1.5152%" height="15" fill="rgb(229,193,19)" fg:x="123" fg:w="2"/><text x="93.4318%" y="175.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 1.52%)</title><rect x="93.1818%" y="149" width="1.5152%" height="15" fill="rgb(249,88,53)" fg:x="123" fg:w="2"/><text x="93.4318%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 1.52%)</title><rect x="93.1818%" y="133" width="1.5152%" height="15" fill="rgb(242,44,7)" fg:x="123" fg:w="2"/><text x="93.4318%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (13 samples, 9.85%)</title><rect x="86.3636%" y="357" width="9.8485%" height="15" fill="rgb(221,194,39)" fg:x="114" fg:w="13"/><text x="86.6136%" y="367.50">core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (13 samples, 9.85%)</title><rect x="86.3636%" y="341" width="9.8485%" height="15" fill="rgb(223,137,46)" fg:x="114" fg:w="13"/><text x="86.6136%" y="351.50">core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (13 samples, 9.85%)</title><rect x="86.3636%" y="325" width="9.8485%" height="15" fill="rgb(232,38,0)" fg:x="114" fg:w="13"/><text x="86.6136%" y="335.50">core::iter::tr..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (13 samples, 9.85%)</title><rect x="86.3636%" y="309" width="9.8485%" height="15" fill="rgb(250,199,43)" fg:x="114" fg:w="13"/><text x="86.6136%" y="319.50">&lt;libsolver::so..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (13 samples, 9.85%)</title><rect x="86.3636%" y="293" width="9.8485%" height="15" fill="rgb(230,125,23)" fg:x="114" fg:w="13"/><text x="86.6136%" y="303.50">std::collectio..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (13 samples, 9.85%)</title><rect x="86.3636%" y="277" width="9.8485%" height="15" fill="rgb(243,160,36)" fg:x="114" fg:w="13"/><text x="86.6136%" y="287.50">hashbrown::set..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (13 samples, 9.85%)</title><rect x="86.3636%" y="261" width="9.8485%" height="15" fill="rgb(216,162,16)" fg:x="114" fg:w="13"/><text x="86.6136%" y="271.50">hashbrown::map..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13 samples, 9.85%)</title><rect x="86.3636%" y="245" width="9.8485%" height="15" fill="rgb(207,224,35)" fg:x="114" fg:w="13"/><text x="86.6136%" y="255.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 6.82%)</title><rect x="89.3939%" y="229" width="6.8182%" height="15" fill="rgb(230,119,31)" fg:x="118" fg:w="9"/><text x="89.6439%" y="239.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 6.82%)</title><rect x="89.3939%" y="213" width="6.8182%" height="15" fill="rgb(252,63,32)" fg:x="118" fg:w="9"/><text x="89.6439%" y="223.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9 samples, 6.82%)</title><rect x="89.3939%" y="197" width="6.8182%" height="15" fill="rgb(243,218,21)" fg:x="118" fg:w="9"/><text x="89.6439%" y="207.50">hashbrown..</text></g><g><title>hashbrown::raw::h2 (2 samples, 1.52%)</title><rect x="94.6970%" y="181" width="1.5152%" height="15" fill="rgb(254,20,38)" fg:x="125" fg:w="2"/><text x="94.9470%" y="191.50"></text></g><g><title>all (132 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="132"/><text x="0.2500%" y="847.50"></text></g><g><title>solver::test::s (120 samples, 90.91%)</title><rect x="9.0909%" y="821" width="90.9091%" height="15" fill="rgb(216,76,14)" fg:x="12" fg:w="120"/><text x="9.3409%" y="831.50">solver::test::s</text></g><g><title>clone3 (120 samples, 90.91%)</title><rect x="9.0909%" y="805" width="90.9091%" height="15" fill="rgb(208,138,34)" fg:x="12" fg:w="120"/><text x="9.3409%" y="815.50">clone3</text></g><g><title>start_thread (120 samples, 90.91%)</title><rect x="9.0909%" y="789" width="90.9091%" height="15" fill="rgb(209,148,13)" fg:x="12" fg:w="120"/><text x="9.3409%" y="799.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (120 samples, 90.91%)</title><rect x="9.0909%" y="773" width="90.9091%" height="15" fill="rgb(206,117,35)" fg:x="12" fg:w="120"/><text x="9.3409%" y="783.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (120 samples, 90.91%)</title><rect x="9.0909%" y="757" width="90.9091%" height="15" fill="rgb(228,202,16)" fg:x="12" fg:w="120"/><text x="9.3409%" y="767.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (120 samples, 90.91%)</title><rect x="9.0909%" y="741" width="90.9091%" height="15" fill="rgb(228,202,16)" fg:x="12" fg:w="120"/><text x="9.3409%" y="751.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (120 samples, 90.91%)</title><rect x="9.0909%" y="725" width="90.9091%" height="15" fill="rgb(218,104,40)" fg:x="12" fg:w="120"/><text x="9.3409%" y="735.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (120 samples, 90.91%)</title><rect x="9.0909%" y="709" width="90.9091%" height="15" fill="rgb(252,97,39)" fg:x="12" fg:w="120"/><text x="9.3409%" y="719.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (120 samples, 90.91%)</title><rect x="9.0909%" y="693" width="90.9091%" height="15" fill="rgb(216,75,8)" fg:x="12" fg:w="120"/><text x="9.3409%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (120 samples, 90.91%)</title><rect x="9.0909%" y="677" width="90.9091%" height="15" fill="rgb(212,61,29)" fg:x="12" fg:w="120"/><text x="9.3409%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (120 samples, 90.91%)</title><rect x="9.0909%" y="661" width="90.9091%" height="15" fill="rgb(232,162,46)" fg:x="12" fg:w="120"/><text x="9.3409%" y="671.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (120 samples, 90.91%)</title><rect x="9.0909%" y="645" width="90.9091%" height="15" fill="rgb(230,83,13)" fg:x="12" fg:w="120"/><text x="9.3409%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (120 samples, 90.91%)</title><rect x="9.0909%" y="629" width="90.9091%" height="15" fill="rgb(229,2,34)" fg:x="12" fg:w="120"/><text x="9.3409%" y="639.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (120 samples, 90.91%)</title><rect x="9.0909%" y="613" width="90.9091%" height="15" fill="rgb(210,88,34)" fg:x="12" fg:w="120"/><text x="9.3409%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (120 samples, 90.91%)</title><rect x="9.0909%" y="597" width="90.9091%" height="15" fill="rgb(217,197,47)" fg:x="12" fg:w="120"/><text x="9.3409%" y="607.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (120 samples, 90.91%)</title><rect x="9.0909%" y="581" width="90.9091%" height="15" fill="rgb(217,197,47)" fg:x="12" fg:w="120"/><text x="9.3409%" y="591.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (120 samples, 90.91%)</title><rect x="9.0909%" y="565" width="90.9091%" height="15" fill="rgb(228,141,24)" fg:x="12" fg:w="120"/><text x="9.3409%" y="575.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (120 samples, 90.91%)</title><rect x="9.0909%" y="549" width="90.9091%" height="15" fill="rgb(216,75,8)" fg:x="12" fg:w="120"/><text x="9.3409%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (120 samples, 90.91%)</title><rect x="9.0909%" y="533" width="90.9091%" height="15" fill="rgb(212,61,29)" fg:x="12" fg:w="120"/><text x="9.3409%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (120 samples, 90.91%)</title><rect x="9.0909%" y="517" width="90.9091%" height="15" fill="rgb(232,162,46)" fg:x="12" fg:w="120"/><text x="9.3409%" y="527.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (120 samples, 90.91%)</title><rect x="9.0909%" y="501" width="90.9091%" height="15" fill="rgb(230,83,13)" fg:x="12" fg:w="120"/><text x="9.3409%" y="511.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>test::run_test_in_process::_{{closure}} (120 samples, 90.91%)</title><rect x="9.0909%" y="485" width="90.9091%" height="15" fill="rgb(233,206,30)" fg:x="12" fg:w="120"/><text x="9.3409%" y="495.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (120 samples, 90.91%)</title><rect x="9.0909%" y="469" width="90.9091%" height="15" fill="rgb(227,183,31)" fg:x="12" fg:w="120"/><text x="9.3409%" y="479.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (120 samples, 90.91%)</title><rect x="9.0909%" y="453" width="90.9091%" height="15" fill="rgb(210,80,10)" fg:x="12" fg:w="120"/><text x="9.3409%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (120 samples, 90.91%)</title><rect x="9.0909%" y="437" width="90.9091%" height="15" fill="rgb(210,80,10)" fg:x="12" fg:w="120"/><text x="9.3409%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>libsolver::solver::test::solve_sudoku_iterative_dfs::_{{closure}} (120 samples, 90.91%)</title><rect x="9.0909%" y="421" width="90.9091%" height="15" fill="rgb(224,3,30)" fg:x="12" fg:w="120"/><text x="9.3409%" y="431.50">libsolver::solver::test::solve_sudoku_iterative_dfs::_{{closure}}</text></g><g><title>libsolver::solver::test::solve_sudoku_iterative_dfs (120 samples, 90.91%)</title><rect x="9.0909%" y="405" width="90.9091%" height="15" fill="rgb(238,48,25)" fg:x="12" fg:w="120"/><text x="9.3409%" y="415.50">libsolver::solver::test::solve_sudoku_iterative_dfs</text></g><g><title>libsolver::solver::Solver::solve (120 samples, 90.91%)</title><rect x="9.0909%" y="389" width="90.9091%" height="15" fill="rgb(233,29,38)" fg:x="12" fg:w="120"/><text x="9.3409%" y="399.50">libsolver::solver::Solver::solve</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve (120 samples, 90.91%)</title><rect x="9.0909%" y="373" width="90.9091%" height="15" fill="rgb(213,141,8)" fg:x="12" fg:w="120"/><text x="9.3409%" y="383.50">&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;libsolver::solver::SudokuValue&gt;&gt; (5 samples, 3.79%)</title><rect x="96.2121%" y="357" width="3.7879%" height="15" fill="rgb(205,50,1)" fg:x="127" fg:w="5"/><text x="96.4621%" y="367.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;libsolver::solver::SudokuValue,std::hash::random::RandomState&gt;&gt; (5 samples, 3.79%)</title><rect x="96.2121%" y="341" width="3.7879%" height="15" fill="rgb(219,112,45)" fg:x="127" fg:w="5"/><text x="96.4621%" y="351.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;libsolver::solver::SudokuValue,(),std::hash::random::RandomState&gt;&gt; (5 samples, 3.79%)</title><rect x="96.2121%" y="325" width="3.7879%" height="15" fill="rgb(227,182,54)" fg:x="127" fg:w="5"/><text x="96.4621%" y="335.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(libsolver::solver::SudokuValue,())&gt;&gt; (5 samples, 3.79%)</title><rect x="96.2121%" y="309" width="3.7879%" height="15" fill="rgb(230,34,8)" fg:x="127" fg:w="5"/><text x="96.4621%" y="319.50">core..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 3.79%)</title><rect x="96.2121%" y="293" width="3.7879%" height="15" fill="rgb(253,155,41)" fg:x="127" fg:w="5"/><text x="96.4621%" y="303.50">&lt;has..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (5 samples, 3.79%)</title><rect x="96.2121%" y="277" width="3.7879%" height="15" fill="rgb(241,210,10)" fg:x="127" fg:w="5"/><text x="96.4621%" y="287.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (5 samples, 3.79%)</title><rect x="96.2121%" y="261" width="3.7879%" height="15" fill="rgb(205,217,2)" fg:x="127" fg:w="5"/><text x="96.4621%" y="271.50">hash..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 3.79%)</title><rect x="96.2121%" y="245" width="3.7879%" height="15" fill="rgb(238,77,31)" fg:x="127" fg:w="5"/><text x="96.4621%" y="255.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (5 samples, 3.79%)</title><rect x="96.2121%" y="229" width="3.7879%" height="15" fill="rgb(227,15,28)" fg:x="127" fg:w="5"/><text x="96.4621%" y="239.50">allo..</text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 3.79%)</title><rect x="96.2121%" y="213" width="3.7879%" height="15" fill="rgb(240,159,37)" fg:x="127" fg:w="5"/><text x="96.4621%" y="223.50">cfre..</text></g><g><title>_int_free (3 samples, 2.27%)</title><rect x="97.7273%" y="197" width="2.2727%" height="15" fill="rgb(221,113,48)" fg:x="129" fg:w="3"/><text x="97.9773%" y="207.50">_..</text></g></svg></svg>