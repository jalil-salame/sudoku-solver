<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1061.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1061.00"> </text><svg id="frames" x="10" width="1180" total_samples="356"><g><title>[unknown] (2 samples, 0.56%)</title><rect x="0.0000%" y="997" width="0.5618%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1007.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="0.2809%" y="981" width="0.2809%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.5309%" y="991.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.28%)</title><rect x="0.2809%" y="965" width="0.2809%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.5309%" y="975.50"></text></g><g><title>malloc_consolidate (1 samples, 0.28%)</title><rect x="0.2809%" y="949" width="0.2809%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.5309%" y="959.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.28%)</title><rect x="0.2809%" y="933" width="0.2809%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.5309%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="0.2809%" y="917" width="0.2809%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.5309%" y="927.50"></text></g><g><title>__tls_init_tp (1 samples, 0.28%)</title><rect x="0.5618%" y="997" width="0.2809%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.8118%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="0.5618%" y="981" width="0.2809%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.8118%" y="991.50"></text></g><g><title>_dl_start_user (1 samples, 0.28%)</title><rect x="0.8427%" y="997" width="0.2809%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="1.0927%" y="1007.50"></text></g><g><title>_dl_init (1 samples, 0.28%)</title><rect x="0.8427%" y="981" width="0.2809%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="1.0927%" y="991.50"></text></g><g><title>call_init (1 samples, 0.28%)</title><rect x="0.8427%" y="965" width="0.2809%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="1.0927%" y="975.50"></text></g><g><title>__cpu_indicator_init@GCC_4.8.0 (1 samples, 0.28%)</title><rect x="0.8427%" y="949" width="0.2809%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="1.0927%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="1.4045%" y="981" width="0.2809%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="1"/><text x="1.6545%" y="991.50"></text></g><g><title>exit (1 samples, 0.28%)</title><rect x="1.6854%" y="949" width="0.2809%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="1.9354%" y="959.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.28%)</title><rect x="1.6854%" y="933" width="0.2809%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="1"/><text x="1.9354%" y="943.50"></text></g><g><title>_fini (1 samples, 0.28%)</title><rect x="1.6854%" y="917" width="0.2809%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="1.9354%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.28%)</title><rect x="1.9663%" y="725" width="0.2809%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="2.2163%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.28%)</title><rect x="1.9663%" y="709" width="0.2809%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="2.2163%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.28%)</title><rect x="1.9663%" y="693" width="0.2809%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="2.2163%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.28%)</title><rect x="1.9663%" y="677" width="0.2809%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="2.2163%" y="687.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="1.9663%" y="661" width="0.2809%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="2.2163%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.28%)</title><rect x="1.9663%" y="645" width="0.2809%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="2.2163%" y="655.50"></text></g><g><title>&lt;std::env::Args as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1 samples, 0.28%)</title><rect x="1.9663%" y="629" width="0.2809%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="2.2163%" y="639.50"></text></g><g><title>std::ffi::os_str::OsString::into_string (1 samples, 0.28%)</title><rect x="1.9663%" y="613" width="0.2809%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="2.2163%" y="623.50"></text></g><g><title>std::sys::os_str::bytes::Buf::into_string (1 samples, 0.28%)</title><rect x="1.9663%" y="597" width="0.2809%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="2.2163%" y="607.50"></text></g><g><title>alloc::string::String::from_utf8 (1 samples, 0.28%)</title><rect x="1.9663%" y="581" width="0.2809%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="1"/><text x="2.2163%" y="591.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.28%)</title><rect x="1.9663%" y="565" width="0.2809%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="2.2163%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="1.9663%" y="549" width="0.2809%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="2.2163%" y="559.50"></text></g><g><title>getopts::Options::parse (1 samples, 0.28%)</title><rect x="2.2472%" y="693" width="0.2809%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="2.4972%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.28%)</title><rect x="2.2472%" y="677" width="0.2809%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="2.4972%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.28%)</title><rect x="2.2472%" y="661" width="0.2809%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="1"/><text x="2.4972%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.28%)</title><rect x="2.2472%" y="645" width="0.2809%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="2.4972%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.28%)</title><rect x="2.2472%" y="629" width="0.2809%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="2.4972%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.28%)</title><rect x="2.2472%" y="613" width="0.2809%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="2.4972%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.28%)</title><rect x="2.2472%" y="597" width="0.2809%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="1"/><text x="2.4972%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.28%)</title><rect x="2.2472%" y="581" width="0.2809%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="2.4972%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.28%)</title><rect x="2.2472%" y="565" width="0.2809%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="2.4972%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.28%)</title><rect x="2.2472%" y="549" width="0.2809%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="1"/><text x="2.4972%" y="559.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.28%)</title><rect x="2.2472%" y="533" width="0.2809%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="1"/><text x="2.4972%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.28%)</title><rect x="2.2472%" y="517" width="0.2809%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="2.4972%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1 samples, 0.28%)</title><rect x="2.2472%" y="501" width="0.2809%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="2.4972%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.28%)</title><rect x="2.2472%" y="485" width="0.2809%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="2.4972%" y="495.50"></text></g><g><title>test::cli::optgroups (1 samples, 0.28%)</title><rect x="2.5281%" y="693" width="0.2809%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="2.7781%" y="703.50"></text></g><g><title>getopts::Options::optopt (1 samples, 0.28%)</title><rect x="2.5281%" y="677" width="0.2809%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="2.7781%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.28%)</title><rect x="2.5281%" y="661" width="0.2809%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="2.7781%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.28%)</title><rect x="2.5281%" y="645" width="0.2809%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="1"/><text x="2.7781%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.28%)</title><rect x="2.5281%" y="629" width="0.2809%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="1"/><text x="2.7781%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.28%)</title><rect x="2.5281%" y="613" width="0.2809%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="1"/><text x="2.7781%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.28%)</title><rect x="2.5281%" y="597" width="0.2809%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="1"/><text x="2.7781%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.28%)</title><rect x="2.5281%" y="581" width="0.2809%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="2.7781%" y="591.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.28%)</title><rect x="2.5281%" y="565" width="0.2809%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="1"/><text x="2.7781%" y="575.50"></text></g><g><title>realloc (1 samples, 0.28%)</title><rect x="2.5281%" y="549" width="0.2809%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="1"/><text x="2.7781%" y="559.50"></text></g><g><title>_int_realloc (1 samples, 0.28%)</title><rect x="2.5281%" y="533" width="0.2809%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="1"/><text x="2.7781%" y="543.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.28%)</title><rect x="2.5281%" y="517" width="0.2809%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="2.7781%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;getopts::Matches&gt; (1 samples, 0.28%)</title><rect x="2.8090%" y="677" width="0.2809%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="1"/><text x="3.0590%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;getopts::Opt&gt;&gt; (1 samples, 0.28%)</title><rect x="2.8090%" y="661" width="0.2809%" height="15" fill="rgb(251,118,11)" fg:x="10" fg:w="1"/><text x="3.0590%" y="671.50"></text></g><g><title>test::cli::parse_opts (4 samples, 1.12%)</title><rect x="2.2472%" y="709" width="1.1236%" height="15" fill="rgb(217,147,25)" fg:x="8" fg:w="4"/><text x="2.4972%" y="719.50"></text></g><g><title>test::cli::parse_opts_impl (2 samples, 0.56%)</title><rect x="2.8090%" y="693" width="0.5618%" height="15" fill="rgb(247,81,37)" fg:x="10" fg:w="2"/><text x="3.0590%" y="703.50"></text></g><g><title>test::cli::get_shuffle (1 samples, 0.28%)</title><rect x="3.0899%" y="677" width="0.2809%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="1"/><text x="3.3399%" y="687.50"></text></g><g><title>getopts::Matches::opt_present (1 samples, 0.28%)</title><rect x="3.0899%" y="661" width="0.2809%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="1"/><text x="3.3399%" y="671.50"></text></g><g><title>getopts::Matches::opt_vals (1 samples, 0.28%)</title><rect x="3.0899%" y="645" width="0.2809%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="1"/><text x="3.3399%" y="655.50"></text></g><g><title>getopts::find_opt (1 samples, 0.28%)</title><rect x="3.0899%" y="629" width="0.2809%" height="15" fill="rgb(221,10,30)" fg:x="11" fg:w="1"/><text x="3.3399%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.28%)</title><rect x="3.0899%" y="613" width="0.2809%" height="15" fill="rgb(210,229,1)" fg:x="11" fg:w="1"/><text x="3.3399%" y="623.50"></text></g><g><title>getopts::find_opt::_{{closure}} (1 samples, 0.28%)</title><rect x="3.0899%" y="597" width="0.2809%" height="15" fill="rgb(222,148,37)" fg:x="11" fg:w="1"/><text x="3.3399%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.28%)</title><rect x="3.0899%" y="581" width="0.2809%" height="15" fill="rgb(234,67,33)" fg:x="11" fg:w="1"/><text x="3.3399%" y="591.50"></text></g><g><title>&lt;getopts::Name as core::cmp::PartialEq&gt;::eq (1 samples, 0.28%)</title><rect x="3.0899%" y="565" width="0.2809%" height="15" fill="rgb(247,98,35)" fg:x="11" fg:w="1"/><text x="3.3399%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.28%)</title><rect x="3.0899%" y="549" width="0.2809%" height="15" fill="rgb(247,138,52)" fg:x="11" fg:w="1"/><text x="3.3399%" y="559.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.28%)</title><rect x="3.0899%" y="533" width="0.2809%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="1"/><text x="3.3399%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.28%)</title><rect x="3.0899%" y="517" width="0.2809%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="1"/><text x="3.3399%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.28%)</title><rect x="3.0899%" y="501" width="0.2809%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="3.3399%" y="511.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.28%)</title><rect x="3.0899%" y="485" width="0.2809%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="1"/><text x="3.3399%" y="495.50"></text></g><g><title>&lt;test::formatters::pretty::PrettyFormatter&lt;T&gt; as test::formatters::OutputFormatter&gt;::write_run_finish (1 samples, 0.28%)</title><rect x="3.3708%" y="693" width="0.2809%" height="15" fill="rgb(244,35,45)" fg:x="12" fg:w="1"/><text x="3.6208%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.28%)</title><rect x="3.3708%" y="677" width="0.2809%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="1"/><text x="3.6208%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.28%)</title><rect x="3.3708%" y="661" width="0.2809%" height="15" fill="rgb(240,54,50)" fg:x="12" fg:w="1"/><text x="3.6208%" y="671.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1 samples, 0.28%)</title><rect x="3.3708%" y="645" width="0.2809%" height="15" fill="rgb(233,84,52)" fg:x="12" fg:w="1"/><text x="3.6208%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.28%)</title><rect x="3.3708%" y="629" width="0.2809%" height="15" fill="rgb(207,117,47)" fg:x="12" fg:w="1"/><text x="3.6208%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.28%)</title><rect x="3.3708%" y="613" width="0.2809%" height="15" fill="rgb(249,43,39)" fg:x="12" fg:w="1"/><text x="3.6208%" y="623.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.28%)</title><rect x="3.3708%" y="597" width="0.2809%" height="15" fill="rgb(209,38,44)" fg:x="12" fg:w="1"/><text x="3.6208%" y="607.50"></text></g><g><title>&lt;test::time::TestSuiteExecTime as core::fmt::Display&gt;::fmt (1 samples, 0.28%)</title><rect x="3.3708%" y="581" width="0.2809%" height="15" fill="rgb(236,212,23)" fg:x="12" fg:w="1"/><text x="3.6208%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.28%)</title><rect x="3.3708%" y="565" width="0.2809%" height="15" fill="rgb(242,79,21)" fg:x="12" fg:w="1"/><text x="3.6208%" y="575.50"></text></g><g><title>core::fmt::run (1 samples, 0.28%)</title><rect x="3.3708%" y="549" width="0.2809%" height="15" fill="rgb(211,96,35)" fg:x="12" fg:w="1"/><text x="3.6208%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.28%)</title><rect x="3.3708%" y="533" width="0.2809%" height="15" fill="rgb(253,215,40)" fg:x="12" fg:w="1"/><text x="3.6208%" y="543.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.28%)</title><rect x="3.3708%" y="517" width="0.2809%" height="15" fill="rgb(211,81,21)" fg:x="12" fg:w="1"/><text x="3.6208%" y="527.50"></text></g><g><title>core::num::flt2dec::to_exact_fixed_str (1 samples, 0.28%)</title><rect x="3.3708%" y="501" width="0.2809%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="1"/><text x="3.6208%" y="511.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.28%)</title><rect x="3.3708%" y="485" width="0.2809%" height="15" fill="rgb(235,213,38)" fg:x="12" fg:w="1"/><text x="3.6208%" y="495.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact (1 samples, 0.28%)</title><rect x="3.3708%" y="469" width="0.2809%" height="15" fill="rgb(237,122,38)" fg:x="12" fg:w="1"/><text x="3.6208%" y="479.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (1 samples, 0.28%)</title><rect x="3.3708%" y="453" width="0.2809%" height="15" fill="rgb(244,218,35)" fg:x="12" fg:w="1"/><text x="3.6208%" y="463.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt::possibly_round (1 samples, 0.28%)</title><rect x="3.3708%" y="437" width="0.2809%" height="15" fill="rgb(240,68,47)" fg:x="12" fg:w="1"/><text x="3.6208%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.28%)</title><rect x="3.6517%" y="693" width="0.2809%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="1"/><text x="3.9017%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.28%)</title><rect x="3.6517%" y="677" width="0.2809%" height="15" fill="rgb(235,124,12)" fg:x="13" fg:w="1"/><text x="3.9017%" y="687.50"></text></g><g><title>test::helpers::concurrency::get_concurrency (1 samples, 0.28%)</title><rect x="3.6517%" y="661" width="0.2809%" height="15" fill="rgb(224,169,11)" fg:x="13" fg:w="1"/><text x="3.9017%" y="671.50"></text></g><g><title>std::thread::available_parallelism (1 samples, 0.28%)</title><rect x="3.6517%" y="645" width="0.2809%" height="15" fill="rgb(250,166,2)" fg:x="13" fg:w="1"/><text x="3.9017%" y="655.50"></text></g><g><title>std::sys::pal::unix::thread::available_parallelism (1 samples, 0.28%)</title><rect x="3.6517%" y="629" width="0.2809%" height="15" fill="rgb(242,216,29)" fg:x="13" fg:w="1"/><text x="3.9017%" y="639.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota (1 samples, 0.28%)</title><rect x="3.6517%" y="613" width="0.2809%" height="15" fill="rgb(230,116,27)" fg:x="13" fg:w="1"/><text x="3.9017%" y="623.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota_v2 (1 samples, 0.28%)</title><rect x="3.6517%" y="597" width="0.2809%" height="15" fill="rgb(228,99,48)" fg:x="13" fg:w="1"/><text x="3.9017%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.28%)</title><rect x="3.6517%" y="581" width="0.2809%" height="15" fill="rgb(253,11,6)" fg:x="13" fg:w="1"/><text x="3.9017%" y="591.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota_v2::_{{closure}} (1 samples, 0.28%)</title><rect x="3.6517%" y="565" width="0.2809%" height="15" fill="rgb(247,143,39)" fg:x="13" fg:w="1"/><text x="3.9017%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (1 samples, 0.28%)</title><rect x="3.6517%" y="549" width="0.2809%" height="15" fill="rgb(236,97,10)" fg:x="13" fg:w="1"/><text x="3.9017%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fs::File&gt; (1 samples, 0.28%)</title><rect x="3.6517%" y="533" width="0.2809%" height="15" fill="rgb(233,208,19)" fg:x="13" fg:w="1"/><text x="3.9017%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fd::FileDesc&gt; (1 samples, 0.28%)</title><rect x="3.6517%" y="517" width="0.2809%" height="15" fill="rgb(216,164,2)" fg:x="13" fg:w="1"/><text x="3.9017%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (1 samples, 0.28%)</title><rect x="3.6517%" y="501" width="0.2809%" height="15" fill="rgb(220,129,5)" fg:x="13" fg:w="1"/><text x="3.9017%" y="511.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (1 samples, 0.28%)</title><rect x="3.6517%" y="485" width="0.2809%" height="15" fill="rgb(242,17,10)" fg:x="13" fg:w="1"/><text x="3.9017%" y="495.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.28%)</title><rect x="3.6517%" y="469" width="0.2809%" height="15" fill="rgb(242,107,0)" fg:x="13" fg:w="1"/><text x="3.9017%" y="479.50"></text></g><g><title>std::io::default_read_to_string (1 samples, 0.28%)</title><rect x="3.6517%" y="453" width="0.2809%" height="15" fill="rgb(251,28,31)" fg:x="13" fg:w="1"/><text x="3.9017%" y="463.50"></text></g><g><title>std::io::append_to_string (1 samples, 0.28%)</title><rect x="3.6517%" y="437" width="0.2809%" height="15" fill="rgb(233,223,10)" fg:x="13" fg:w="1"/><text x="3.9017%" y="447.50"></text></g><g><title>std::io::default_read_to_end (1 samples, 0.28%)</title><rect x="3.6517%" y="421" width="0.2809%" height="15" fill="rgb(215,21,27)" fg:x="13" fg:w="1"/><text x="3.9017%" y="431.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.28%)</title><rect x="3.6517%" y="405" width="0.2809%" height="15" fill="rgb(232,23,21)" fg:x="13" fg:w="1"/><text x="3.9017%" y="415.50"></text></g><g><title>std::sys::pal::unix::fs::File::read_buf (1 samples, 0.28%)</title><rect x="3.6517%" y="389" width="0.2809%" height="15" fill="rgb(244,5,23)" fg:x="13" fg:w="1"/><text x="3.9017%" y="399.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (1 samples, 0.28%)</title><rect x="3.6517%" y="373" width="0.2809%" height="15" fill="rgb(226,81,46)" fg:x="13" fg:w="1"/><text x="3.9017%" y="383.50"></text></g><g><title>read (1 samples, 0.28%)</title><rect x="3.6517%" y="357" width="0.2809%" height="15" fill="rgb(247,70,30)" fg:x="13" fg:w="1"/><text x="3.9017%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="3.6517%" y="341" width="0.2809%" height="15" fill="rgb(212,68,19)" fg:x="13" fg:w="1"/><text x="3.9017%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.28%)</title><rect x="3.9326%" y="629" width="0.2809%" height="15" fill="rgb(240,187,13)" fg:x="14" fg:w="1"/><text x="4.1826%" y="639.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="3.9326%" y="613" width="0.2809%" height="15" fill="rgb(223,113,26)" fg:x="14" fg:w="1"/><text x="4.1826%" y="623.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.28%)</title><rect x="3.9326%" y="597" width="0.2809%" height="15" fill="rgb(206,192,2)" fg:x="14" fg:w="1"/><text x="4.1826%" y="607.50"></text></g><g><title>malloc_consolidate (1 samples, 0.28%)</title><rect x="3.9326%" y="581" width="0.2809%" height="15" fill="rgb(241,108,4)" fg:x="14" fg:w="1"/><text x="4.1826%" y="591.50"></text></g><g><title>unlink_chunk.isra.0 (1 samples, 0.28%)</title><rect x="3.9326%" y="565" width="0.2809%" height="15" fill="rgb(247,173,49)" fg:x="14" fg:w="1"/><text x="4.1826%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn test::formatters::OutputFormatter&gt;&gt; (3 samples, 0.84%)</title><rect x="3.9326%" y="693" width="0.8427%" height="15" fill="rgb(224,114,35)" fg:x="14" fg:w="3"/><text x="4.1826%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;test::formatters::pretty::PrettyFormatter&lt;std::io::stdio::Stdout&gt;&gt; (3 samples, 0.84%)</title><rect x="3.9326%" y="677" width="0.8427%" height="15" fill="rgb(245,159,27)" fg:x="14" fg:w="3"/><text x="4.1826%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;test::console::OutputLocation&lt;std::io::stdio::Stdout&gt;&gt; (3 samples, 0.84%)</title><rect x="3.9326%" y="661" width="0.8427%" height="15" fill="rgb(245,172,44)" fg:x="14" fg:w="3"/><text x="4.1826%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn test::term::Terminal+core::marker::Send&gt;&gt; (3 samples, 0.84%)</title><rect x="3.9326%" y="645" width="0.8427%" height="15" fill="rgb(236,23,11)" fg:x="14" fg:w="3"/><text x="4.1826%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;u8&gt;&gt;&gt; (2 samples, 0.56%)</title><rect x="4.2135%" y="629" width="0.5618%" height="15" fill="rgb(205,117,38)" fg:x="15" fg:w="2"/><text x="4.4635%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;u8&gt;,std::hash::random::RandomState&gt;&gt; (2 samples, 0.56%)</title><rect x="4.2135%" y="613" width="0.5618%" height="15" fill="rgb(237,72,25)" fg:x="15" fg:w="2"/><text x="4.4635%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::vec::Vec&lt;u8&gt;)&gt;&gt; (2 samples, 0.56%)</title><rect x="4.2135%" y="597" width="0.5618%" height="15" fill="rgb(244,70,9)" fg:x="15" fg:w="2"/><text x="4.4635%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.56%)</title><rect x="4.2135%" y="581" width="0.5618%" height="15" fill="rgb(217,125,39)" fg:x="15" fg:w="2"/><text x="4.4635%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.56%)</title><rect x="4.2135%" y="565" width="0.5618%" height="15" fill="rgb(235,36,10)" fg:x="15" fg:w="2"/><text x="4.4635%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.56%)</title><rect x="4.2135%" y="549" width="0.5618%" height="15" fill="rgb(251,123,47)" fg:x="15" fg:w="2"/><text x="4.4635%" y="559.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.56%)</title><rect x="4.2135%" y="533" width="0.5618%" height="15" fill="rgb(221,13,13)" fg:x="15" fg:w="2"/><text x="4.4635%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.56%)</title><rect x="4.2135%" y="517" width="0.5618%" height="15" fill="rgb(238,131,9)" fg:x="15" fg:w="2"/><text x="4.4635%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::vec::Vec&lt;u8&gt;)&gt; (2 samples, 0.56%)</title><rect x="4.2135%" y="501" width="0.5618%" height="15" fill="rgb(211,50,8)" fg:x="15" fg:w="2"/><text x="4.4635%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.56%)</title><rect x="4.2135%" y="485" width="0.5618%" height="15" fill="rgb(245,182,24)" fg:x="15" fg:w="2"/><text x="4.4635%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.56%)</title><rect x="4.2135%" y="469" width="0.5618%" height="15" fill="rgb(242,14,37)" fg:x="15" fg:w="2"/><text x="4.4635%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.56%)</title><rect x="4.2135%" y="453" width="0.5618%" height="15" fill="rgb(246,228,12)" fg:x="15" fg:w="2"/><text x="4.4635%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.56%)</title><rect x="4.2135%" y="437" width="0.5618%" height="15" fill="rgb(213,55,15)" fg:x="15" fg:w="2"/><text x="4.4635%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.56%)</title><rect x="4.2135%" y="421" width="0.5618%" height="15" fill="rgb(209,9,3)" fg:x="15" fg:w="2"/><text x="4.4635%" y="431.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.56%)</title><rect x="4.2135%" y="405" width="0.5618%" height="15" fill="rgb(230,59,30)" fg:x="15" fg:w="2"/><text x="4.4635%" y="415.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="4.4944%" y="389" width="0.2809%" height="15" fill="rgb(209,121,21)" fg:x="16" fg:w="1"/><text x="4.7444%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.28%)</title><rect x="4.7753%" y="677" width="0.2809%" height="15" fill="rgb(220,109,13)" fg:x="17" fg:w="1"/><text x="5.0253%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.28%)</title><rect x="4.7753%" y="661" width="0.2809%" height="15" fill="rgb(232,18,1)" fg:x="17" fg:w="1"/><text x="5.0253%" y="671.50"></text></g><g><title>test::helpers::concurrency::get_concurrency (1 samples, 0.28%)</title><rect x="4.7753%" y="645" width="0.2809%" height="15" fill="rgb(215,41,42)" fg:x="17" fg:w="1"/><text x="5.0253%" y="655.50"></text></g><g><title>std::thread::available_parallelism (1 samples, 0.28%)</title><rect x="4.7753%" y="629" width="0.2809%" height="15" fill="rgb(224,123,36)" fg:x="17" fg:w="1"/><text x="5.0253%" y="639.50"></text></g><g><title>std::sys::pal::unix::thread::available_parallelism (1 samples, 0.28%)</title><rect x="4.7753%" y="613" width="0.2809%" height="15" fill="rgb(240,125,3)" fg:x="17" fg:w="1"/><text x="5.0253%" y="623.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota (1 samples, 0.28%)</title><rect x="4.7753%" y="597" width="0.2809%" height="15" fill="rgb(205,98,50)" fg:x="17" fg:w="1"/><text x="5.0253%" y="607.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota_v2 (1 samples, 0.28%)</title><rect x="4.7753%" y="581" width="0.2809%" height="15" fill="rgb(205,185,37)" fg:x="17" fg:w="1"/><text x="5.0253%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.28%)</title><rect x="4.7753%" y="565" width="0.2809%" height="15" fill="rgb(238,207,15)" fg:x="17" fg:w="1"/><text x="5.0253%" y="575.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota_v2::_{{closure}} (1 samples, 0.28%)</title><rect x="4.7753%" y="549" width="0.2809%" height="15" fill="rgb(213,199,42)" fg:x="17" fg:w="1"/><text x="5.0253%" y="559.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.28%)</title><rect x="4.7753%" y="533" width="0.2809%" height="15" fill="rgb(235,201,11)" fg:x="17" fg:w="1"/><text x="5.0253%" y="543.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.28%)</title><rect x="4.7753%" y="517" width="0.2809%" height="15" fill="rgb(207,46,11)" fg:x="17" fg:w="1"/><text x="5.0253%" y="527.50"></text></g><g><title>std::fs::buffer_capacity_required (1 samples, 0.28%)</title><rect x="4.7753%" y="501" width="0.2809%" height="15" fill="rgb(241,35,35)" fg:x="17" fg:w="1"/><text x="5.0253%" y="511.50"></text></g><g><title>std::fs::File::metadata (1 samples, 0.28%)</title><rect x="4.7753%" y="485" width="0.2809%" height="15" fill="rgb(243,32,47)" fg:x="17" fg:w="1"/><text x="5.0253%" y="495.50"></text></g><g><title>std::sys::pal::unix::fs::File::file_attr (1 samples, 0.28%)</title><rect x="4.7753%" y="469" width="0.2809%" height="15" fill="rgb(247,202,23)" fg:x="17" fg:w="1"/><text x="5.0253%" y="479.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx (1 samples, 0.28%)</title><rect x="4.7753%" y="453" width="0.2809%" height="15" fill="rgb(219,102,11)" fg:x="17" fg:w="1"/><text x="5.0253%" y="463.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx::statx (1 samples, 0.28%)</title><rect x="4.7753%" y="437" width="0.2809%" height="15" fill="rgb(243,110,44)" fg:x="17" fg:w="1"/><text x="5.0253%" y="447.50"></text></g><g><title>statx (1 samples, 0.28%)</title><rect x="4.7753%" y="421" width="0.2809%" height="15" fill="rgb(222,74,54)" fg:x="17" fg:w="1"/><text x="5.0253%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="4.7753%" y="405" width="0.2809%" height="15" fill="rgb(216,99,12)" fg:x="17" fg:w="1"/><text x="5.0253%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="4.7753%" y="389" width="0.2809%" height="15" fill="rgb(226,22,26)" fg:x="17" fg:w="1"/><text x="5.0253%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpsc::Receiver&lt;test::event::CompletedTest&gt;&gt; (1 samples, 0.28%)</title><rect x="5.0562%" y="677" width="0.2809%" height="15" fill="rgb(217,163,10)" fg:x="18" fg:w="1"/><text x="5.3062%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpmc::Receiver&lt;test::event::CompletedTest&gt;&gt; (1 samples, 0.28%)</title><rect x="5.0562%" y="661" width="0.2809%" height="15" fill="rgb(213,25,53)" fg:x="18" fg:w="1"/><text x="5.3062%" y="671.50"></text></g><g><title>&lt;std::sync::mpmc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.28%)</title><rect x="5.0562%" y="645" width="0.2809%" height="15" fill="rgb(252,105,26)" fg:x="18" fg:w="1"/><text x="5.3062%" y="655.50"></text></g><g><title>std::sync::mpmc::counter::Receiver&lt;C&gt;::release (1 samples, 0.28%)</title><rect x="5.0562%" y="629" width="0.2809%" height="15" fill="rgb(220,39,43)" fg:x="18" fg:w="1"/><text x="5.3062%" y="639.50"></text></g><g><title>&lt;std::sync::mpmc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop::_{{closure}} (1 samples, 0.28%)</title><rect x="5.0562%" y="613" width="0.2809%" height="15" fill="rgb(229,68,48)" fg:x="18" fg:w="1"/><text x="5.3062%" y="623.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::disconnect_receivers (1 samples, 0.28%)</title><rect x="5.0562%" y="597" width="0.2809%" height="15" fill="rgb(252,8,32)" fg:x="18" fg:w="1"/><text x="5.3062%" y="607.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::discard_all_messages (1 samples, 0.28%)</title><rect x="5.0562%" y="581" width="0.2809%" height="15" fill="rgb(223,20,43)" fg:x="18" fg:w="1"/><text x="5.3062%" y="591.50"></text></g><g><title>core::mem::drop (1 samples, 0.28%)</title><rect x="5.0562%" y="565" width="0.2809%" height="15" fill="rgb(229,81,49)" fg:x="18" fg:w="1"/><text x="5.3062%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;std::sync::mpmc::list::Block&lt;test::event::CompletedTest&gt;&gt;&gt; (1 samples, 0.28%)</title><rect x="5.0562%" y="549" width="0.2809%" height="15" fill="rgb(236,28,36)" fg:x="18" fg:w="1"/><text x="5.3062%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.28%)</title><rect x="5.0562%" y="533" width="0.2809%" height="15" fill="rgb(249,185,26)" fg:x="18" fg:w="1"/><text x="5.3062%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.28%)</title><rect x="5.0562%" y="517" width="0.2809%" height="15" fill="rgb(249,174,33)" fg:x="18" fg:w="1"/><text x="5.3062%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.28%)</title><rect x="5.0562%" y="501" width="0.2809%" height="15" fill="rgb(233,201,37)" fg:x="18" fg:w="1"/><text x="5.3062%" y="511.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.28%)</title><rect x="5.0562%" y="485" width="0.2809%" height="15" fill="rgb(221,78,26)" fg:x="18" fg:w="1"/><text x="5.3062%" y="495.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="5.0562%" y="469" width="0.2809%" height="15" fill="rgb(250,127,30)" fg:x="18" fg:w="1"/><text x="5.3062%" y="479.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (1 samples, 0.28%)</title><rect x="5.0562%" y="453" width="0.2809%" height="15" fill="rgb(230,49,44)" fg:x="18" fg:w="1"/><text x="5.3062%" y="463.50"></text></g><g><title>malloc_consolidate (1 samples, 0.28%)</title><rect x="5.0562%" y="437" width="0.2809%" height="15" fill="rgb(229,67,23)" fg:x="18" fg:w="1"/><text x="5.3062%" y="447.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv_timeout (1 samples, 0.28%)</title><rect x="5.3371%" y="677" width="0.2809%" height="15" fill="rgb(249,83,47)" fg:x="19" fg:w="1"/><text x="5.5871%" y="687.50"></text></g><g><title>std::sync::mpmc::Receiver&lt;T&gt;::recv_timeout (1 samples, 0.28%)</title><rect x="5.3371%" y="661" width="0.2809%" height="15" fill="rgb(215,43,3)" fg:x="19" fg:w="1"/><text x="5.5871%" y="671.50"></text></g><g><title>std::sync::mpmc::Receiver&lt;T&gt;::recv_deadline (1 samples, 0.28%)</title><rect x="5.3371%" y="645" width="0.2809%" height="15" fill="rgb(238,154,13)" fg:x="19" fg:w="1"/><text x="5.5871%" y="655.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (1 samples, 0.28%)</title><rect x="5.3371%" y="629" width="0.2809%" height="15" fill="rgb(219,56,2)" fg:x="19" fg:w="1"/><text x="5.5871%" y="639.50"></text></g><g><title>std::sync::mpmc::context::Context::with (1 samples, 0.28%)</title><rect x="5.3371%" y="613" width="0.2809%" height="15" fill="rgb(233,0,4)" fg:x="19" fg:w="1"/><text x="5.5871%" y="623.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.28%)</title><rect x="5.3371%" y="597" width="0.2809%" height="15" fill="rgb(235,30,7)" fg:x="19" fg:w="1"/><text x="5.5871%" y="607.50"></text></g><g><title>std::sync::mpmc::context::Context::with::_{{closure}} (1 samples, 0.28%)</title><rect x="5.3371%" y="581" width="0.2809%" height="15" fill="rgb(250,79,13)" fg:x="19" fg:w="1"/><text x="5.5871%" y="591.50"></text></g><g><title>std::sync::mpmc::context::Context::with::_{{closure}} (1 samples, 0.28%)</title><rect x="5.3371%" y="565" width="0.2809%" height="15" fill="rgb(211,146,34)" fg:x="19" fg:w="1"/><text x="5.5871%" y="575.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv::_{{closure}} (1 samples, 0.28%)</title><rect x="5.3371%" y="549" width="0.2809%" height="15" fill="rgb(228,22,38)" fg:x="19" fg:w="1"/><text x="5.5871%" y="559.50"></text></g><g><title>std::sync::mpmc::context::Context::wait_until (1 samples, 0.28%)</title><rect x="5.3371%" y="533" width="0.2809%" height="15" fill="rgb(235,168,5)" fg:x="19" fg:w="1"/><text x="5.5871%" y="543.50"></text></g><g><title>std::thread::park_timeout (1 samples, 0.28%)</title><rect x="5.3371%" y="517" width="0.2809%" height="15" fill="rgb(221,155,16)" fg:x="19" fg:w="1"/><text x="5.5871%" y="527.50"></text></g><g><title>std::sys_common::thread_parking::futex::Parker::park_timeout (1 samples, 0.28%)</title><rect x="5.3371%" y="501" width="0.2809%" height="15" fill="rgb(215,215,53)" fg:x="19" fg:w="1"/><text x="5.5871%" y="511.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (1 samples, 0.28%)</title><rect x="5.3371%" y="485" width="0.2809%" height="15" fill="rgb(223,4,10)" fg:x="19" fg:w="1"/><text x="5.5871%" y="495.50"></text></g><g><title>test::console::run_tests_console::_{{closure}} (1 samples, 0.28%)</title><rect x="5.6180%" y="677" width="0.2809%" height="15" fill="rgb(234,103,6)" fg:x="20" fg:w="1"/><text x="5.8680%" y="687.50"></text></g><g><title>test::console::on_test_event (1 samples, 0.28%)</title><rect x="5.6180%" y="661" width="0.2809%" height="15" fill="rgb(227,97,0)" fg:x="20" fg:w="1"/><text x="5.8680%" y="671.50"></text></g><g><title>&lt;test::formatters::pretty::PrettyFormatter&lt;T&gt; as test::formatters::OutputFormatter&gt;::write_result (1 samples, 0.28%)</title><rect x="5.6180%" y="645" width="0.2809%" height="15" fill="rgb(234,150,53)" fg:x="20" fg:w="1"/><text x="5.8680%" y="655.50"></text></g><g><title>test::formatters::pretty::PrettyFormatter&lt;T&gt;::write_pretty (1 samples, 0.28%)</title><rect x="5.6180%" y="629" width="0.2809%" height="15" fill="rgb(228,201,54)" fg:x="20" fg:w="1"/><text x="5.8680%" y="639.50"></text></g><g><title>&lt;test::term::terminfo::TerminfoTerminal&lt;T&gt; as test::term::Terminal&gt;::fg (1 samples, 0.28%)</title><rect x="5.6180%" y="613" width="0.2809%" height="15" fill="rgb(222,22,37)" fg:x="20" fg:w="1"/><text x="5.8680%" y="623.50"></text></g><g><title>test::term::terminfo::TerminfoTerminal&lt;T&gt;::apply_cap (1 samples, 0.28%)</title><rect x="5.6180%" y="597" width="0.2809%" height="15" fill="rgb(237,53,32)" fg:x="20" fg:w="1"/><text x="5.8680%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.28%)</title><rect x="5.6180%" y="581" width="0.2809%" height="15" fill="rgb(233,25,53)" fg:x="20" fg:w="1"/><text x="5.8680%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.28%)</title><rect x="5.6180%" y="565" width="0.2809%" height="15" fill="rgb(210,40,34)" fg:x="20" fg:w="1"/><text x="5.8680%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.28%)</title><rect x="5.6180%" y="549" width="0.2809%" height="15" fill="rgb(241,220,44)" fg:x="20" fg:w="1"/><text x="5.8680%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.28%)</title><rect x="5.6180%" y="533" width="0.2809%" height="15" fill="rgb(235,28,35)" fg:x="20" fg:w="1"/><text x="5.8680%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.28%)</title><rect x="5.6180%" y="517" width="0.2809%" height="15" fill="rgb(210,56,17)" fg:x="20" fg:w="1"/><text x="5.8680%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.28%)</title><rect x="5.6180%" y="501" width="0.2809%" height="15" fill="rgb(224,130,29)" fg:x="20" fg:w="1"/><text x="5.8680%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.28%)</title><rect x="5.6180%" y="485" width="0.2809%" height="15" fill="rgb(235,212,8)" fg:x="20" fg:w="1"/><text x="5.8680%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.28%)</title><rect x="5.6180%" y="469" width="0.2809%" height="15" fill="rgb(223,33,50)" fg:x="20" fg:w="1"/><text x="5.8680%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.28%)</title><rect x="5.6180%" y="453" width="0.2809%" height="15" fill="rgb(219,149,13)" fg:x="20" fg:w="1"/><text x="5.8680%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.28%)</title><rect x="5.6180%" y="437" width="0.2809%" height="15" fill="rgb(250,156,29)" fg:x="20" fg:w="1"/><text x="5.8680%" y="447.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.28%)</title><rect x="5.6180%" y="421" width="0.2809%" height="15" fill="rgb(216,193,19)" fg:x="20" fg:w="1"/><text x="5.8680%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.28%)</title><rect x="5.6180%" y="405" width="0.2809%" height="15" fill="rgb(216,135,14)" fg:x="20" fg:w="1"/><text x="5.8680%" y="415.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.28%)</title><rect x="5.6180%" y="389" width="0.2809%" height="15" fill="rgb(241,47,5)" fg:x="20" fg:w="1"/><text x="5.8680%" y="399.50"></text></g><g><title>test::convert_benchmarks_to_tests (1 samples, 0.28%)</title><rect x="5.8989%" y="677" width="0.2809%" height="15" fill="rgb(233,42,35)" fg:x="21" fg:w="1"/><text x="6.1489%" y="687.50"></text></g><g><title>test::run_tests (7 samples, 1.97%)</title><rect x="4.7753%" y="693" width="1.9663%" height="15" fill="rgb(231,13,6)" fg:x="17" fg:w="7"/><text x="5.0253%" y="703.50">t..</text></g><g><title>test::run_test (2 samples, 0.56%)</title><rect x="6.1798%" y="677" width="0.5618%" height="15" fill="rgb(207,181,40)" fg:x="22" fg:w="2"/><text x="6.4298%" y="687.50"></text></g><g><title>std::thread::Builder::spawn (1 samples, 0.28%)</title><rect x="6.4607%" y="661" width="0.2809%" height="15" fill="rgb(254,173,49)" fg:x="23" fg:w="1"/><text x="6.7107%" y="671.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 0.28%)</title><rect x="6.4607%" y="645" width="0.2809%" height="15" fill="rgb(221,1,38)" fg:x="23" fg:w="1"/><text x="6.7107%" y="655.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (1 samples, 0.28%)</title><rect x="6.4607%" y="629" width="0.2809%" height="15" fill="rgb(206,124,46)" fg:x="23" fg:w="1"/><text x="6.7107%" y="639.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (1 samples, 0.28%)</title><rect x="6.4607%" y="613" width="0.2809%" height="15" fill="rgb(249,21,11)" fg:x="23" fg:w="1"/><text x="6.7107%" y="623.50"></text></g><g><title>pthread_attr_init@@GLIBC_2.2.5 (1 samples, 0.28%)</title><rect x="6.4607%" y="597" width="0.2809%" height="15" fill="rgb(222,201,40)" fg:x="23" fg:w="1"/><text x="6.7107%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.28%)</title><rect x="6.7416%" y="677" width="0.2809%" height="15" fill="rgb(235,61,29)" fg:x="24" fg:w="1"/><text x="6.9916%" y="687.50"></text></g><g><title>test::term::stdout::_{{closure}} (1 samples, 0.28%)</title><rect x="6.7416%" y="661" width="0.2809%" height="15" fill="rgb(219,207,3)" fg:x="24" fg:w="1"/><text x="6.9916%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.28%)</title><rect x="6.7416%" y="645" width="0.2809%" height="15" fill="rgb(222,56,46)" fg:x="24" fg:w="1"/><text x="6.9916%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.28%)</title><rect x="6.7416%" y="629" width="0.2809%" height="15" fill="rgb(239,76,54)" fg:x="24" fg:w="1"/><text x="6.9916%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.28%)</title><rect x="6.7416%" y="613" width="0.2809%" height="15" fill="rgb(231,124,27)" fg:x="24" fg:w="1"/><text x="6.9916%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.28%)</title><rect x="6.7416%" y="597" width="0.2809%" height="15" fill="rgb(249,195,6)" fg:x="24" fg:w="1"/><text x="6.9916%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.28%)</title><rect x="6.7416%" y="581" width="0.2809%" height="15" fill="rgb(237,174,47)" fg:x="24" fg:w="1"/><text x="6.9916%" y="591.50"></text></g><g><title>malloc (1 samples, 0.28%)</title><rect x="6.7416%" y="565" width="0.2809%" height="15" fill="rgb(206,201,31)" fg:x="24" fg:w="1"/><text x="6.9916%" y="575.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="6.7416%" y="549" width="0.2809%" height="15" fill="rgb(231,57,52)" fg:x="24" fg:w="1"/><text x="6.9916%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.28%)</title><rect x="7.0225%" y="469" width="0.2809%" height="15" fill="rgb(248,177,22)" fg:x="25" fg:w="1"/><text x="7.2725%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.28%)</title><rect x="7.0225%" y="453" width="0.2809%" height="15" fill="rgb(215,211,37)" fg:x="25" fg:w="1"/><text x="7.2725%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.28%)</title><rect x="7.0225%" y="437" width="0.2809%" height="15" fill="rgb(241,128,51)" fg:x="25" fg:w="1"/><text x="7.2725%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.28%)</title><rect x="7.0225%" y="421" width="0.2809%" height="15" fill="rgb(227,165,31)" fg:x="25" fg:w="1"/><text x="7.2725%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.28%)</title><rect x="7.0225%" y="405" width="0.2809%" height="15" fill="rgb(228,167,24)" fg:x="25" fg:w="1"/><text x="7.2725%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.28%)</title><rect x="7.0225%" y="389" width="0.2809%" height="15" fill="rgb(228,143,12)" fg:x="25" fg:w="1"/><text x="7.2725%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.28%)</title><rect x="7.0225%" y="373" width="0.2809%" height="15" fill="rgb(249,149,8)" fg:x="25" fg:w="1"/><text x="7.2725%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.28%)</title><rect x="7.0225%" y="357" width="0.2809%" height="15" fill="rgb(243,35,44)" fg:x="25" fg:w="1"/><text x="7.2725%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.28%)</title><rect x="7.0225%" y="341" width="0.2809%" height="15" fill="rgb(246,89,9)" fg:x="25" fg:w="1"/><text x="7.2725%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.28%)</title><rect x="7.0225%" y="325" width="0.2809%" height="15" fill="rgb(233,213,13)" fg:x="25" fg:w="1"/><text x="7.2725%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.28%)</title><rect x="7.0225%" y="309" width="0.2809%" height="15" fill="rgb(233,141,41)" fg:x="25" fg:w="1"/><text x="7.2725%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.28%)</title><rect x="7.0225%" y="293" width="0.2809%" height="15" fill="rgb(239,167,4)" fg:x="25" fg:w="1"/><text x="7.2725%" y="303.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.28%)</title><rect x="7.0225%" y="277" width="0.2809%" height="15" fill="rgb(209,217,16)" fg:x="25" fg:w="1"/><text x="7.2725%" y="287.50"></text></g><g><title>realloc (1 samples, 0.28%)</title><rect x="7.0225%" y="261" width="0.2809%" height="15" fill="rgb(219,88,35)" fg:x="25" fg:w="1"/><text x="7.2725%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.28%)</title><rect x="7.3034%" y="373" width="0.2809%" height="15" fill="rgb(220,193,23)" fg:x="26" fg:w="1"/><text x="7.5534%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.28%)</title><rect x="7.3034%" y="357" width="0.2809%" height="15" fill="rgb(230,90,52)" fg:x="26" fg:w="1"/><text x="7.5534%" y="367.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (1 samples, 0.28%)</title><rect x="7.3034%" y="341" width="0.2809%" height="15" fill="rgb(252,106,19)" fg:x="26" fg:w="1"/><text x="7.5534%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (1 samples, 0.28%)</title><rect x="7.3034%" y="325" width="0.2809%" height="15" fill="rgb(206,74,20)" fg:x="26" fg:w="1"/><text x="7.5534%" y="335.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (1 samples, 0.28%)</title><rect x="7.3034%" y="309" width="0.2809%" height="15" fill="rgb(230,138,44)" fg:x="26" fg:w="1"/><text x="7.5534%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.28%)</title><rect x="7.3034%" y="293" width="0.2809%" height="15" fill="rgb(235,182,43)" fg:x="26" fg:w="1"/><text x="7.5534%" y="303.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.28%)</title><rect x="7.3034%" y="277" width="0.2809%" height="15" fill="rgb(242,16,51)" fg:x="26" fg:w="1"/><text x="7.5534%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.28%)</title><rect x="7.3034%" y="261" width="0.2809%" height="15" fill="rgb(248,9,4)" fg:x="26" fg:w="1"/><text x="7.5534%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.28%)</title><rect x="7.3034%" y="245" width="0.2809%" height="15" fill="rgb(210,31,22)" fg:x="26" fg:w="1"/><text x="7.5534%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.28%)</title><rect x="7.3034%" y="229" width="0.2809%" height="15" fill="rgb(239,54,39)" fg:x="26" fg:w="1"/><text x="7.5534%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.28%)</title><rect x="7.3034%" y="213" width="0.2809%" height="15" fill="rgb(230,99,41)" fg:x="26" fg:w="1"/><text x="7.5534%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.28%)</title><rect x="7.3034%" y="197" width="0.2809%" height="15" fill="rgb(253,106,12)" fg:x="26" fg:w="1"/><text x="7.5534%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.28%)</title><rect x="7.3034%" y="181" width="0.2809%" height="15" fill="rgb(213,46,41)" fg:x="26" fg:w="1"/><text x="7.5534%" y="191.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="7.5843%" y="309" width="0.2809%" height="15" fill="rgb(215,133,35)" fg:x="27" fg:w="1"/><text x="7.8343%" y="319.50"></text></g><g><title>core::ptr::read (1 samples, 0.28%)</title><rect x="7.5843%" y="293" width="0.2809%" height="15" fill="rgb(213,28,5)" fg:x="27" fg:w="1"/><text x="7.8343%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.28%)</title><rect x="7.8652%" y="149" width="0.2809%" height="15" fill="rgb(215,77,49)" fg:x="28" fg:w="1"/><text x="8.1152%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.28%)</title><rect x="7.8652%" y="133" width="0.2809%" height="15" fill="rgb(248,100,22)" fg:x="28" fg:w="1"/><text x="8.1152%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.28%)</title><rect x="7.8652%" y="117" width="0.2809%" height="15" fill="rgb(208,67,9)" fg:x="28" fg:w="1"/><text x="8.1152%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.56%)</title><rect x="7.8652%" y="181" width="0.5618%" height="15" fill="rgb(219,133,21)" fg:x="28" fg:w="2"/><text x="8.1152%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.56%)</title><rect x="7.8652%" y="165" width="0.5618%" height="15" fill="rgb(246,46,29)" fg:x="28" fg:w="2"/><text x="8.1152%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.28%)</title><rect x="8.1461%" y="149" width="0.2809%" height="15" fill="rgb(246,185,52)" fg:x="29" fg:w="1"/><text x="8.3961%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.28%)</title><rect x="8.1461%" y="133" width="0.2809%" height="15" fill="rgb(252,136,11)" fg:x="29" fg:w="1"/><text x="8.3961%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.28%)</title><rect x="8.1461%" y="117" width="0.2809%" height="15" fill="rgb(219,138,53)" fg:x="29" fg:w="1"/><text x="8.3961%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.28%)</title><rect x="8.1461%" y="101" width="0.2809%" height="15" fill="rgb(211,51,23)" fg:x="29" fg:w="1"/><text x="8.3961%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.28%)</title><rect x="8.1461%" y="85" width="0.2809%" height="15" fill="rgb(247,221,28)" fg:x="29" fg:w="1"/><text x="8.3961%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.28%)</title><rect x="8.1461%" y="69" width="0.2809%" height="15" fill="rgb(251,222,45)" fg:x="29" fg:w="1"/><text x="8.3961%" y="79.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.28%)</title><rect x="8.1461%" y="53" width="0.2809%" height="15" fill="rgb(217,162,53)" fg:x="29" fg:w="1"/><text x="8.3961%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.28%)</title><rect x="8.1461%" y="37" width="0.2809%" height="15" fill="rgb(229,93,14)" fg:x="29" fg:w="1"/><text x="8.3961%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 1.69%)</title><rect x="7.0225%" y="549" width="1.6854%" height="15" fill="rgb(209,67,49)" fg:x="25" fg:w="6"/><text x="7.2725%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (6 samples, 1.69%)</title><rect x="7.0225%" y="533" width="1.6854%" height="15" fill="rgb(213,87,29)" fg:x="25" fg:w="6"/><text x="7.2725%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 1.69%)</title><rect x="7.0225%" y="517" width="1.6854%" height="15" fill="rgb(205,151,52)" fg:x="25" fg:w="6"/><text x="7.2725%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (6 samples, 1.69%)</title><rect x="7.0225%" y="501" width="1.6854%" height="15" fill="rgb(253,215,39)" fg:x="25" fg:w="6"/><text x="7.2725%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 1.69%)</title><rect x="7.0225%" y="485" width="1.6854%" height="15" fill="rgb(221,220,41)" fg:x="25" fg:w="6"/><text x="7.2725%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 1.40%)</title><rect x="7.3034%" y="469" width="1.4045%" height="15" fill="rgb(218,133,21)" fg:x="26" fg:w="5"/><text x="7.5534%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 1.40%)</title><rect x="7.3034%" y="453" width="1.4045%" height="15" fill="rgb(221,193,43)" fg:x="26" fg:w="5"/><text x="7.5534%" y="463.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 1.40%)</title><rect x="7.3034%" y="437" width="1.4045%" height="15" fill="rgb(240,128,52)" fg:x="26" fg:w="5"/><text x="7.5534%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 1.40%)</title><rect x="7.3034%" y="421" width="1.4045%" height="15" fill="rgb(253,114,12)" fg:x="26" fg:w="5"/><text x="7.5534%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 1.40%)</title><rect x="7.3034%" y="405" width="1.4045%" height="15" fill="rgb(215,223,47)" fg:x="26" fg:w="5"/><text x="7.5534%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 1.40%)</title><rect x="7.3034%" y="389" width="1.4045%" height="15" fill="rgb(248,225,23)" fg:x="26" fg:w="5"/><text x="7.5534%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 1.12%)</title><rect x="7.5843%" y="373" width="1.1236%" height="15" fill="rgb(250,108,0)" fg:x="27" fg:w="4"/><text x="7.8343%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 1.12%)</title><rect x="7.5843%" y="357" width="1.1236%" height="15" fill="rgb(228,208,7)" fg:x="27" fg:w="4"/><text x="7.8343%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 1.12%)</title><rect x="7.5843%" y="341" width="1.1236%" height="15" fill="rgb(244,45,10)" fg:x="27" fg:w="4"/><text x="7.8343%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 1.12%)</title><rect x="7.5843%" y="325" width="1.1236%" height="15" fill="rgb(207,125,25)" fg:x="27" fg:w="4"/><text x="7.8343%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (3 samples, 0.84%)</title><rect x="7.8652%" y="309" width="0.8427%" height="15" fill="rgb(210,195,18)" fg:x="28" fg:w="3"/><text x="8.1152%" y="319.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (3 samples, 0.84%)</title><rect x="7.8652%" y="293" width="0.8427%" height="15" fill="rgb(249,80,12)" fg:x="28" fg:w="3"/><text x="8.1152%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (3 samples, 0.84%)</title><rect x="7.8652%" y="277" width="0.8427%" height="15" fill="rgb(221,65,9)" fg:x="28" fg:w="3"/><text x="8.1152%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (3 samples, 0.84%)</title><rect x="7.8652%" y="261" width="0.8427%" height="15" fill="rgb(235,49,36)" fg:x="28" fg:w="3"/><text x="8.1152%" y="271.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (3 samples, 0.84%)</title><rect x="7.8652%" y="245" width="0.8427%" height="15" fill="rgb(225,32,20)" fg:x="28" fg:w="3"/><text x="8.1152%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.84%)</title><rect x="7.8652%" y="229" width="0.8427%" height="15" fill="rgb(215,141,46)" fg:x="28" fg:w="3"/><text x="8.1152%" y="239.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (3 samples, 0.84%)</title><rect x="7.8652%" y="213" width="0.8427%" height="15" fill="rgb(250,160,47)" fg:x="28" fg:w="3"/><text x="8.1152%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.84%)</title><rect x="7.8652%" y="197" width="0.8427%" height="15" fill="rgb(216,222,40)" fg:x="28" fg:w="3"/><text x="8.1152%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.28%)</title><rect x="8.4270%" y="181" width="0.2809%" height="15" fill="rgb(234,217,39)" fg:x="30" fg:w="1"/><text x="8.6770%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.28%)</title><rect x="8.4270%" y="165" width="0.2809%" height="15" fill="rgb(207,178,40)" fg:x="30" fg:w="1"/><text x="8.6770%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.28%)</title><rect x="8.4270%" y="149" width="0.2809%" height="15" fill="rgb(221,136,13)" fg:x="30" fg:w="1"/><text x="8.6770%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.28%)</title><rect x="8.4270%" y="133" width="0.2809%" height="15" fill="rgb(249,199,10)" fg:x="30" fg:w="1"/><text x="8.6770%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.28%)</title><rect x="8.4270%" y="117" width="0.2809%" height="15" fill="rgb(249,222,13)" fg:x="30" fg:w="1"/><text x="8.6770%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.28%)</title><rect x="8.4270%" y="101" width="0.2809%" height="15" fill="rgb(244,185,38)" fg:x="30" fg:w="1"/><text x="8.6770%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.28%)</title><rect x="8.4270%" y="85" width="0.2809%" height="15" fill="rgb(236,202,9)" fg:x="30" fg:w="1"/><text x="8.6770%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.28%)</title><rect x="8.4270%" y="69" width="0.2809%" height="15" fill="rgb(250,229,37)" fg:x="30" fg:w="1"/><text x="8.6770%" y="79.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (1 samples, 0.28%)</title><rect x="8.7079%" y="517" width="0.2809%" height="15" fill="rgb(206,174,23)" fg:x="31" fg:w="1"/><text x="8.9579%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (8 samples, 2.25%)</title><rect x="7.0225%" y="629" width="2.2472%" height="15" fill="rgb(211,33,43)" fg:x="25" fg:w="8"/><text x="7.2725%" y="639.50">c..</text></g><g><title>test::term::terminfo::TermInfo::from_name::_{{closure}} (8 samples, 2.25%)</title><rect x="7.0225%" y="613" width="2.2472%" height="15" fill="rgb(245,58,50)" fg:x="25" fg:w="8"/><text x="7.2725%" y="623.50">t..</text></g><g><title>test::term::terminfo::TermInfo::from_path (8 samples, 2.25%)</title><rect x="7.0225%" y="597" width="2.2472%" height="15" fill="rgb(244,68,36)" fg:x="25" fg:w="8"/><text x="7.2725%" y="607.50">t..</text></g><g><title>test::term::terminfo::TermInfo::_from_path (8 samples, 2.25%)</title><rect x="7.0225%" y="581" width="2.2472%" height="15" fill="rgb(232,229,15)" fg:x="25" fg:w="8"/><text x="7.2725%" y="591.50">t..</text></g><g><title>test::term::terminfo::parser::compiled::parse (8 samples, 2.25%)</title><rect x="7.0225%" y="565" width="2.2472%" height="15" fill="rgb(254,30,23)" fg:x="25" fg:w="8"/><text x="7.2725%" y="575.50">t..</text></g><g><title>std::io::Read::read_to_end (2 samples, 0.56%)</title><rect x="8.7079%" y="549" width="0.5618%" height="15" fill="rgb(235,160,14)" fg:x="31" fg:w="2"/><text x="8.9579%" y="559.50"></text></g><g><title>std::io::default_read_to_end (2 samples, 0.56%)</title><rect x="8.7079%" y="533" width="0.5618%" height="15" fill="rgb(212,155,44)" fg:x="31" fg:w="2"/><text x="8.9579%" y="543.50"></text></g><g><title>std::io::default_read_to_end::small_probe_read (1 samples, 0.28%)</title><rect x="8.9888%" y="517" width="0.2809%" height="15" fill="rgb(226,2,50)" fg:x="32" fg:w="1"/><text x="9.2388%" y="527.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (1 samples, 0.28%)</title><rect x="8.9888%" y="501" width="0.2809%" height="15" fill="rgb(234,177,6)" fg:x="32" fg:w="1"/><text x="9.2388%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.28%)</title><rect x="8.9888%" y="485" width="0.2809%" height="15" fill="rgb(217,24,9)" fg:x="32" fg:w="1"/><text x="9.2388%" y="495.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.28%)</title><rect x="8.9888%" y="469" width="0.2809%" height="15" fill="rgb(220,13,46)" fg:x="32" fg:w="1"/><text x="9.2388%" y="479.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="9.2697%" y="613" width="0.2809%" height="15" fill="rgb(239,221,27)" fg:x="33" fg:w="1"/><text x="9.5197%" y="623.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.28%)</title><rect x="9.2697%" y="597" width="0.2809%" height="15" fill="rgb(222,198,25)" fg:x="33" fg:w="1"/><text x="9.5197%" y="607.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.28%)</title><rect x="9.2697%" y="581" width="0.2809%" height="15" fill="rgb(211,99,13)" fg:x="33" fg:w="1"/><text x="9.5197%" y="591.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.28%)</title><rect x="9.2697%" y="565" width="0.2809%" height="15" fill="rgb(232,111,31)" fg:x="33" fg:w="1"/><text x="9.5197%" y="575.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.28%)</title><rect x="9.2697%" y="549" width="0.2809%" height="15" fill="rgb(245,82,37)" fg:x="33" fg:w="1"/><text x="9.5197%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (1 samples, 0.28%)</title><rect x="9.2697%" y="533" width="0.2809%" height="15" fill="rgb(227,149,46)" fg:x="33" fg:w="1"/><text x="9.5197%" y="543.50"></text></g><g><title>core::ptr::align_offset (1 samples, 0.28%)</title><rect x="9.2697%" y="517" width="0.2809%" height="15" fill="rgb(218,36,50)" fg:x="33" fg:w="1"/><text x="9.5197%" y="527.50"></text></g><g><title>std::panic::catch_unwind (28 samples, 7.87%)</title><rect x="1.9663%" y="853" width="7.8652%" height="15" fill="rgb(226,80,48)" fg:x="7" fg:w="28"/><text x="2.2163%" y="863.50">std::panic:..</text></g><g><title>std::panicking::try (28 samples, 7.87%)</title><rect x="1.9663%" y="837" width="7.8652%" height="15" fill="rgb(238,224,15)" fg:x="7" fg:w="28"/><text x="2.2163%" y="847.50">std::panick..</text></g><g><title>std::panicking::try::do_call (28 samples, 7.87%)</title><rect x="1.9663%" y="821" width="7.8652%" height="15" fill="rgb(241,136,10)" fg:x="7" fg:w="28"/><text x="2.2163%" y="831.50">std::panick..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (28 samples, 7.87%)</title><rect x="1.9663%" y="805" width="7.8652%" height="15" fill="rgb(208,32,45)" fg:x="7" fg:w="28"/><text x="2.2163%" y="815.50">core::ops::..</text></g><g><title>std::rt::lang_start::_{{closure}} (28 samples, 7.87%)</title><rect x="1.9663%" y="789" width="7.8652%" height="15" fill="rgb(207,135,9)" fg:x="7" fg:w="28"/><text x="2.2163%" y="799.50">std::rt::la..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (28 samples, 7.87%)</title><rect x="1.9663%" y="773" width="7.8652%" height="15" fill="rgb(206,86,44)" fg:x="7" fg:w="28"/><text x="2.2163%" y="783.50">std::sys_co..</text></g><g><title>core::ops::function::FnOnce::call_once (28 samples, 7.87%)</title><rect x="1.9663%" y="757" width="7.8652%" height="15" fill="rgb(245,177,15)" fg:x="7" fg:w="28"/><text x="2.2163%" y="767.50">core::ops::..</text></g><g><title>test::test_main_static (28 samples, 7.87%)</title><rect x="1.9663%" y="741" width="7.8652%" height="15" fill="rgb(206,64,50)" fg:x="7" fg:w="28"/><text x="2.2163%" y="751.50">test::test_..</text></g><g><title>test::test_main (27 samples, 7.58%)</title><rect x="2.2472%" y="725" width="7.5843%" height="15" fill="rgb(234,36,40)" fg:x="8" fg:w="27"/><text x="2.4972%" y="735.50">test::test..</text></g><g><title>test::console::run_tests_console (23 samples, 6.46%)</title><rect x="3.3708%" y="709" width="6.4607%" height="15" fill="rgb(213,64,8)" fg:x="12" fg:w="23"/><text x="3.6208%" y="719.50">test::co..</text></g><g><title>test::term::stdout (11 samples, 3.09%)</title><rect x="6.7416%" y="693" width="3.0899%" height="15" fill="rgb(210,75,36)" fg:x="24" fg:w="11"/><text x="6.9916%" y="703.50">tes..</text></g><g><title>test::term::terminfo::TerminfoTerminal&lt;T&gt;::new (10 samples, 2.81%)</title><rect x="7.0225%" y="677" width="2.8090%" height="15" fill="rgb(229,88,21)" fg:x="25" fg:w="10"/><text x="7.2725%" y="687.50">te..</text></g><g><title>test::term::terminfo::TermInfo::from_env (10 samples, 2.81%)</title><rect x="7.0225%" y="661" width="2.8090%" height="15" fill="rgb(252,204,47)" fg:x="25" fg:w="10"/><text x="7.2725%" y="671.50">te..</text></g><g><title>test::term::terminfo::TermInfo::from_name (10 samples, 2.81%)</title><rect x="7.0225%" y="645" width="2.8090%" height="15" fill="rgb(208,77,27)" fg:x="25" fg:w="10"/><text x="7.2725%" y="655.50">te..</text></g><g><title>test::term::terminfo::searcher::get_dbpath_for_term (2 samples, 0.56%)</title><rect x="9.2697%" y="629" width="0.5618%" height="15" fill="rgb(221,76,26)" fg:x="33" fg:w="2"/><text x="9.5197%" y="639.50"></text></g><g><title>std::path::PathBuf::pop (1 samples, 0.28%)</title><rect x="9.5506%" y="613" width="0.2809%" height="15" fill="rgb(225,139,18)" fg:x="34" fg:w="1"/><text x="9.8006%" y="623.50"></text></g><g><title>std::path::Path::parent (1 samples, 0.28%)</title><rect x="9.5506%" y="597" width="0.2809%" height="15" fill="rgb(230,137,11)" fg:x="34" fg:w="1"/><text x="9.8006%" y="607.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.28%)</title><rect x="9.5506%" y="581" width="0.2809%" height="15" fill="rgb(212,28,1)" fg:x="34" fg:w="1"/><text x="9.8006%" y="591.50"></text></g><g><title>std::path::Components::parse_next_component_back (1 samples, 0.28%)</title><rect x="9.5506%" y="565" width="0.2809%" height="15" fill="rgb(248,164,17)" fg:x="34" fg:w="1"/><text x="9.8006%" y="575.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.28%)</title><rect x="9.5506%" y="549" width="0.2809%" height="15" fill="rgb(222,171,42)" fg:x="34" fg:w="1"/><text x="9.8006%" y="559.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.28%)</title><rect x="9.5506%" y="533" width="0.2809%" height="15" fill="rgb(243,84,45)" fg:x="34" fg:w="1"/><text x="9.8006%" y="543.50"></text></g><g><title>std::sys::pal::unix::init (1 samples, 0.28%)</title><rect x="9.8315%" y="837" width="0.2809%" height="15" fill="rgb(252,49,23)" fg:x="35" fg:w="1"/><text x="10.0815%" y="847.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::init (1 samples, 0.28%)</title><rect x="9.8315%" y="821" width="0.2809%" height="15" fill="rgb(215,19,7)" fg:x="35" fg:w="1"/><text x="10.0815%" y="831.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.28%)</title><rect x="9.8315%" y="805" width="0.2809%" height="15" fill="rgb(238,81,41)" fg:x="35" fg:w="1"/><text x="10.0815%" y="815.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (1 samples, 0.28%)</title><rect x="9.8315%" y="789" width="0.2809%" height="15" fill="rgb(210,199,37)" fg:x="35" fg:w="1"/><text x="10.0815%" y="799.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stackp (1 samples, 0.28%)</title><rect x="9.8315%" y="773" width="0.2809%" height="15" fill="rgb(244,192,49)" fg:x="35" fg:w="1"/><text x="10.0815%" y="783.50"></text></g><g><title>__sysconf (1 samples, 0.28%)</title><rect x="9.8315%" y="757" width="0.2809%" height="15" fill="rgb(226,211,11)" fg:x="35" fg:w="1"/><text x="10.0815%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="9.8315%" y="741" width="0.2809%" height="15" fill="rgb(236,162,54)" fg:x="35" fg:w="1"/><text x="10.0815%" y="751.50"></text></g><g><title>__fopen_internal (1 samples, 0.28%)</title><rect x="10.1124%" y="773" width="0.2809%" height="15" fill="rgb(220,229,9)" fg:x="36" fg:w="1"/><text x="10.3624%" y="783.50"></text></g><g><title>_IO_file_fopen@@GLIBC_2.2.5 (1 samples, 0.28%)</title><rect x="10.1124%" y="757" width="0.2809%" height="15" fill="rgb(250,87,22)" fg:x="36" fg:w="1"/><text x="10.3624%" y="767.50"></text></g><g><title>__isoc23_sscanf (2 samples, 0.56%)</title><rect x="10.3933%" y="773" width="0.5618%" height="15" fill="rgb(239,43,17)" fg:x="37" fg:w="2"/><text x="10.6433%" y="783.50"></text></g><g><title>__vfscanf_internal (2 samples, 0.56%)</title><rect x="10.3933%" y="757" width="0.5618%" height="15" fill="rgb(231,177,25)" fg:x="37" fg:w="2"/><text x="10.6433%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="10.6742%" y="741" width="0.2809%" height="15" fill="rgb(219,179,1)" fg:x="38" fg:w="1"/><text x="10.9242%" y="751.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (34 samples, 9.55%)</title><rect x="1.6854%" y="981" width="9.5506%" height="15" fill="rgb(238,219,53)" fg:x="6" fg:w="34"/><text x="1.9354%" y="991.50">__libc_start_m..</text></g><g><title>__libc_start_call_main (34 samples, 9.55%)</title><rect x="1.6854%" y="965" width="9.5506%" height="15" fill="rgb(232,167,36)" fg:x="6" fg:w="34"/><text x="1.9354%" y="975.50">__libc_start_c..</text></g><g><title>main (33 samples, 9.27%)</title><rect x="1.9663%" y="949" width="9.2697%" height="15" fill="rgb(244,19,51)" fg:x="7" fg:w="33"/><text x="2.2163%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (33 samples, 9.27%)</title><rect x="1.9663%" y="933" width="9.2697%" height="15" fill="rgb(224,6,22)" fg:x="7" fg:w="33"/><text x="2.2163%" y="943.50">std::rt::lang..</text></g><g><title>std::panic::catch_unwind (33 samples, 9.27%)</title><rect x="1.9663%" y="917" width="9.2697%" height="15" fill="rgb(224,145,5)" fg:x="7" fg:w="33"/><text x="2.2163%" y="927.50">std::panic::c..</text></g><g><title>std::panicking::try (33 samples, 9.27%)</title><rect x="1.9663%" y="901" width="9.2697%" height="15" fill="rgb(234,130,49)" fg:x="7" fg:w="33"/><text x="2.2163%" y="911.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (33 samples, 9.27%)</title><rect x="1.9663%" y="885" width="9.2697%" height="15" fill="rgb(254,6,2)" fg:x="7" fg:w="33"/><text x="2.2163%" y="895.50">std::panickin..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (33 samples, 9.27%)</title><rect x="1.9663%" y="869" width="9.2697%" height="15" fill="rgb(208,96,46)" fg:x="7" fg:w="33"/><text x="2.2163%" y="879.50">std::rt::lang..</text></g><g><title>std::rt::init (5 samples, 1.40%)</title><rect x="9.8315%" y="853" width="1.4045%" height="15" fill="rgb(239,3,39)" fg:x="35" fg:w="5"/><text x="10.0815%" y="863.50"></text></g><g><title>std::sys::pal::unix::thread::guard::init (4 samples, 1.12%)</title><rect x="10.1124%" y="837" width="1.1236%" height="15" fill="rgb(233,210,1)" fg:x="36" fg:w="4"/><text x="10.3624%" y="847.50"></text></g><g><title>std::sys::pal::unix::thread::guard::get_stack_start_aligned (4 samples, 1.12%)</title><rect x="10.1124%" y="821" width="1.1236%" height="15" fill="rgb(244,137,37)" fg:x="36" fg:w="4"/><text x="10.3624%" y="831.50"></text></g><g><title>std::sys::pal::unix::thread::guard::get_stack_start (4 samples, 1.12%)</title><rect x="10.1124%" y="805" width="1.1236%" height="15" fill="rgb(240,136,2)" fg:x="36" fg:w="4"/><text x="10.3624%" y="815.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (4 samples, 1.12%)</title><rect x="10.1124%" y="789" width="1.1236%" height="15" fill="rgb(239,18,37)" fg:x="36" fg:w="4"/><text x="10.3624%" y="799.50"></text></g><g><title>pthread_attr_setaffinity_np@@GLIBC_2.32 (1 samples, 0.28%)</title><rect x="10.9551%" y="773" width="0.2809%" height="15" fill="rgb(218,185,22)" fg:x="39" fg:w="1"/><text x="11.2051%" y="783.50"></text></g><g><title>malloc (1 samples, 0.28%)</title><rect x="10.9551%" y="757" width="0.2809%" height="15" fill="rgb(225,218,4)" fg:x="39" fg:w="1"/><text x="11.2051%" y="767.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="10.9551%" y="741" width="0.2809%" height="15" fill="rgb(230,182,32)" fg:x="39" fg:w="1"/><text x="11.2051%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="19.1011%" y="965" width="0.2809%" height="15" fill="rgb(242,56,43)" fg:x="68" fg:w="1"/><text x="19.3511%" y="975.50"></text></g><g><title>__rtld_malloc_init_real (1 samples, 0.28%)</title><rect x="19.3820%" y="933" width="0.2809%" height="15" fill="rgb(233,99,24)" fg:x="69" fg:w="1"/><text x="19.6320%" y="943.50"></text></g><g><title>lookup_malloc_symbol (1 samples, 0.28%)</title><rect x="19.3820%" y="917" width="0.2809%" height="15" fill="rgb(234,209,42)" fg:x="69" fg:w="1"/><text x="19.6320%" y="927.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.28%)</title><rect x="19.3820%" y="901" width="0.2809%" height="15" fill="rgb(227,7,12)" fg:x="69" fg:w="1"/><text x="19.6320%" y="911.50"></text></g><g><title>do_lookup_x (1 samples, 0.28%)</title><rect x="19.3820%" y="885" width="0.2809%" height="15" fill="rgb(245,203,43)" fg:x="69" fg:w="1"/><text x="19.6320%" y="895.50"></text></g><g><title>_dl_map_object_from_fd (3 samples, 0.84%)</title><rect x="20.2247%" y="869" width="0.8427%" height="15" fill="rgb(238,205,33)" fg:x="72" fg:w="3"/><text x="20.4747%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.56%)</title><rect x="20.5056%" y="853" width="0.5618%" height="15" fill="rgb(231,56,7)" fg:x="73" fg:w="2"/><text x="20.7556%" y="863.50"></text></g><g><title>memmove (1 samples, 0.28%)</title><rect x="21.0674%" y="853" width="0.2809%" height="15" fill="rgb(244,186,29)" fg:x="75" fg:w="1"/><text x="21.3174%" y="863.50"></text></g><g><title>_dl_map_object_deps (7 samples, 1.97%)</title><rect x="19.6629%" y="933" width="1.9663%" height="15" fill="rgb(234,111,31)" fg:x="70" fg:w="7"/><text x="19.9129%" y="943.50">_..</text></g><g><title>_dl_catch_exception (6 samples, 1.69%)</title><rect x="19.9438%" y="917" width="1.6854%" height="15" fill="rgb(241,149,10)" fg:x="71" fg:w="6"/><text x="20.1938%" y="927.50"></text></g><g><title>openaux (5 samples, 1.40%)</title><rect x="20.2247%" y="901" width="1.4045%" height="15" fill="rgb(249,206,44)" fg:x="72" fg:w="5"/><text x="20.4747%" y="911.50"></text></g><g><title>_dl_map_object (5 samples, 1.40%)</title><rect x="20.2247%" y="885" width="1.4045%" height="15" fill="rgb(251,153,30)" fg:x="72" fg:w="5"/><text x="20.4747%" y="895.50"></text></g><g><title>open_path (2 samples, 0.56%)</title><rect x="21.0674%" y="869" width="0.5618%" height="15" fill="rgb(239,152,38)" fg:x="75" fg:w="2"/><text x="21.3174%" y="879.50"></text></g><g><title>open_verify.constprop.0 (1 samples, 0.28%)</title><rect x="21.3483%" y="853" width="0.2809%" height="15" fill="rgb(249,139,47)" fg:x="76" fg:w="1"/><text x="21.5983%" y="863.50"></text></g><g><title>_dl_receive_error (4 samples, 1.12%)</title><rect x="21.6292%" y="933" width="1.1236%" height="15" fill="rgb(244,64,35)" fg:x="77" fg:w="4"/><text x="21.8792%" y="943.50"></text></g><g><title>version_check_doit (4 samples, 1.12%)</title><rect x="21.6292%" y="917" width="1.1236%" height="15" fill="rgb(216,46,15)" fg:x="77" fg:w="4"/><text x="21.8792%" y="927.50"></text></g><g><title>_dl_check_all_versions (4 samples, 1.12%)</title><rect x="21.6292%" y="901" width="1.1236%" height="15" fill="rgb(250,74,19)" fg:x="77" fg:w="4"/><text x="21.8792%" y="911.50"></text></g><g><title>_dl_check_map_versions (4 samples, 1.12%)</title><rect x="21.6292%" y="885" width="1.1236%" height="15" fill="rgb(249,42,33)" fg:x="77" fg:w="4"/><text x="21.8792%" y="895.50"></text></g><g><title>_dl_name_match_p (1 samples, 0.28%)</title><rect x="22.4719%" y="869" width="0.2809%" height="15" fill="rgb(242,149,17)" fg:x="80" fg:w="1"/><text x="22.7219%" y="879.50"></text></g><g><title>strcmp (1 samples, 0.28%)</title><rect x="22.4719%" y="853" width="0.2809%" height="15" fill="rgb(244,29,21)" fg:x="80" fg:w="1"/><text x="22.7219%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="23.8764%" y="917" width="0.2809%" height="15" fill="rgb(220,130,37)" fg:x="85" fg:w="1"/><text x="24.1264%" y="927.50"></text></g><g><title>__acos_finite@GLIBC_2.15 (1 samples, 0.28%)</title><rect x="24.1573%" y="917" width="0.2809%" height="15" fill="rgb(211,67,2)" fg:x="86" fg:w="1"/><text x="24.4073%" y="927.50"></text></g><g><title>_dl_lookup_symbol_x (15 samples, 4.21%)</title><rect x="24.4382%" y="917" width="4.2135%" height="15" fill="rgb(235,68,52)" fg:x="87" fg:w="15"/><text x="24.6882%" y="927.50">_dl_l..</text></g><g><title>do_lookup_x (8 samples, 2.25%)</title><rect x="26.4045%" y="901" width="2.2472%" height="15" fill="rgb(246,142,3)" fg:x="94" fg:w="8"/><text x="26.6545%" y="911.50">d..</text></g><g><title>check_match (4 samples, 1.12%)</title><rect x="27.5281%" y="885" width="1.1236%" height="15" fill="rgb(241,25,7)" fg:x="98" fg:w="4"/><text x="27.7781%" y="895.50"></text></g><g><title>strcmp (3 samples, 0.84%)</title><rect x="27.8090%" y="869" width="0.8427%" height="15" fill="rgb(242,119,39)" fg:x="99" fg:w="3"/><text x="28.0590%" y="879.50"></text></g><g><title>_start (99 samples, 27.81%)</title><rect x="1.1236%" y="997" width="27.8090%" height="15" fill="rgb(241,98,45)" fg:x="4" fg:w="99"/><text x="1.3736%" y="1007.50">_start</text></g><g><title>_dl_start (63 samples, 17.70%)</title><rect x="11.2360%" y="981" width="17.6966%" height="15" fill="rgb(254,28,30)" fg:x="40" fg:w="63"/><text x="11.4860%" y="991.50">_dl_start</text></g><g><title>_dl_sysdep_start (34 samples, 9.55%)</title><rect x="19.3820%" y="965" width="9.5506%" height="15" fill="rgb(241,142,54)" fg:x="69" fg:w="34"/><text x="19.6320%" y="975.50">_dl_sysdep_sta..</text></g><g><title>dl_main (34 samples, 9.55%)</title><rect x="19.3820%" y="949" width="9.5506%" height="15" fill="rgb(222,85,15)" fg:x="69" fg:w="34"/><text x="19.6320%" y="959.50">dl_main</text></g><g><title>_dl_relocate_object (22 samples, 6.18%)</title><rect x="22.7528%" y="933" width="6.1798%" height="15" fill="rgb(210,85,47)" fg:x="81" fg:w="22"/><text x="23.0028%" y="943.50">_dl_relo..</text></g><g><title>strncpy (1 samples, 0.28%)</title><rect x="28.6517%" y="917" width="0.2809%" height="15" fill="rgb(224,206,25)" fg:x="102" fg:w="1"/><text x="28.9017%" y="927.50"></text></g><g><title>__ctype_init (5 samples, 1.40%)</title><rect x="30.0562%" y="965" width="1.4045%" height="15" fill="rgb(243,201,19)" fg:x="107" fg:w="5"/><text x="30.3062%" y="975.50"></text></g><g><title>clone3 (28 samples, 7.87%)</title><rect x="28.9326%" y="997" width="7.8652%" height="15" fill="rgb(236,59,4)" fg:x="103" fg:w="28"/><text x="29.1826%" y="1007.50">clone3</text></g><g><title>start_thread (28 samples, 7.87%)</title><rect x="28.9326%" y="981" width="7.8652%" height="15" fill="rgb(254,179,45)" fg:x="103" fg:w="28"/><text x="29.1826%" y="991.50">start_thread</text></g><g><title>name_stack_maps (19 samples, 5.34%)</title><rect x="31.4607%" y="965" width="5.3371%" height="15" fill="rgb(226,14,10)" fg:x="112" fg:w="19"/><text x="31.7107%" y="975.50">name_st..</text></g><g><title>__GI___snprintf (17 samples, 4.78%)</title><rect x="32.0225%" y="949" width="4.7753%" height="15" fill="rgb(244,27,41)" fg:x="114" fg:w="17"/><text x="32.2725%" y="959.50">__GI__..</text></g><g><title>libsolver-df786 (132 samples, 37.08%)</title><rect x="0.0000%" y="1013" width="37.0787%" height="15" fill="rgb(235,35,32)" fg:x="0" fg:w="132"/><text x="0.2500%" y="1023.50">libsolver-df786</text></g><g><title>open_path (1 samples, 0.28%)</title><rect x="36.7978%" y="997" width="0.2809%" height="15" fill="rgb(218,68,31)" fg:x="131" fg:w="1"/><text x="37.0478%" y="1007.50"></text></g><g><title>open_verify.constprop.0 (1 samples, 0.28%)</title><rect x="36.7978%" y="981" width="0.2809%" height="15" fill="rgb(207,120,37)" fg:x="131" fg:w="1"/><text x="37.0478%" y="991.50"></text></g><g><title>__GI___pread64_nocancel (1 samples, 0.28%)</title><rect x="36.7978%" y="965" width="0.2809%" height="15" fill="rgb(227,98,0)" fg:x="131" fg:w="1"/><text x="37.0478%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.28%)</title><rect x="36.7978%" y="949" width="0.2809%" height="15" fill="rgb(207,7,3)" fg:x="131" fg:w="1"/><text x="37.0478%" y="959.50"></text></g><g><title>__malloc_arena_thread_freeres (1 samples, 0.28%)</title><rect x="37.0787%" y="965" width="0.2809%" height="15" fill="rgb(206,98,19)" fg:x="132" fg:w="1"/><text x="37.3287%" y="975.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.28%)</title><rect x="37.0787%" y="949" width="0.2809%" height="15" fill="rgb(217,5,26)" fg:x="132" fg:w="1"/><text x="37.3287%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.28%)</title><rect x="37.3596%" y="549" width="0.2809%" height="15" fill="rgb(235,190,38)" fg:x="133" fg:w="1"/><text x="37.6096%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (4 samples, 1.12%)</title><rect x="37.6404%" y="549" width="1.1236%" height="15" fill="rgb(247,86,24)" fg:x="134" fg:w="4"/><text x="37.8904%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 1.12%)</title><rect x="37.6404%" y="533" width="1.1236%" height="15" fill="rgb(205,101,16)" fg:x="134" fg:w="4"/><text x="37.8904%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (2 samples, 0.56%)</title><rect x="38.2022%" y="517" width="0.5618%" height="15" fill="rgb(246,168,33)" fg:x="136" fg:w="2"/><text x="38.4522%" y="527.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (2 samples, 0.56%)</title><rect x="38.2022%" y="501" width="0.5618%" height="15" fill="rgb(231,114,1)" fg:x="136" fg:w="2"/><text x="38.4522%" y="511.50"></text></g><g><title>libsolver::solver::SudokuValueSet::contains (2 samples, 0.56%)</title><rect x="38.2022%" y="485" width="0.5618%" height="15" fill="rgb(207,184,53)" fg:x="136" fg:w="2"/><text x="38.4522%" y="495.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (1 samples, 0.28%)</title><rect x="38.7640%" y="501" width="0.2809%" height="15" fill="rgb(224,95,51)" fg:x="138" fg:w="1"/><text x="39.0140%" y="511.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (1 samples, 0.28%)</title><rect x="38.7640%" y="485" width="0.2809%" height="15" fill="rgb(212,188,45)" fg:x="138" fg:w="1"/><text x="39.0140%" y="495.50"></text></g><g><title>libsolver::solver::SudokuValueSet::len (1 samples, 0.28%)</title><rect x="38.7640%" y="469" width="0.2809%" height="15" fill="rgb(223,154,38)" fg:x="138" fg:w="1"/><text x="39.0140%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.28%)</title><rect x="38.7640%" y="453" width="0.2809%" height="15" fill="rgb(251,22,52)" fg:x="138" fg:w="1"/><text x="39.0140%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.28%)</title><rect x="38.7640%" y="437" width="0.2809%" height="15" fill="rgb(229,209,22)" fg:x="138" fg:w="1"/><text x="39.0140%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.28%)</title><rect x="38.7640%" y="421" width="0.2809%" height="15" fill="rgb(234,138,34)" fg:x="138" fg:w="1"/><text x="39.0140%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.28%)</title><rect x="38.7640%" y="405" width="0.2809%" height="15" fill="rgb(212,95,11)" fg:x="138" fg:w="1"/><text x="39.0140%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.28%)</title><rect x="38.7640%" y="389" width="0.2809%" height="15" fill="rgb(240,179,47)" fg:x="138" fg:w="1"/><text x="39.0140%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.28%)</title><rect x="38.7640%" y="373" width="0.2809%" height="15" fill="rgb(240,163,11)" fg:x="138" fg:w="1"/><text x="39.0140%" y="383.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (1 samples, 0.28%)</title><rect x="38.7640%" y="357" width="0.2809%" height="15" fill="rgb(236,37,12)" fg:x="138" fg:w="1"/><text x="39.0140%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.28%)</title><rect x="38.7640%" y="341" width="0.2809%" height="15" fill="rgb(232,164,16)" fg:x="138" fg:w="1"/><text x="39.0140%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (1 samples, 0.28%)</title><rect x="38.7640%" y="325" width="0.2809%" height="15" fill="rgb(244,205,15)" fg:x="138" fg:w="1"/><text x="39.0140%" y="335.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (3 samples, 0.84%)</title><rect x="39.0449%" y="421" width="0.8427%" height="15" fill="rgb(223,117,47)" fg:x="139" fg:w="3"/><text x="39.2949%" y="431.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (3 samples, 0.84%)</title><rect x="39.0449%" y="405" width="0.8427%" height="15" fill="rgb(244,107,35)" fg:x="139" fg:w="3"/><text x="39.2949%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.84%)</title><rect x="39.0449%" y="389" width="0.8427%" height="15" fill="rgb(205,140,8)" fg:x="139" fg:w="3"/><text x="39.2949%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (3 samples, 0.84%)</title><rect x="39.0449%" y="373" width="0.8427%" height="15" fill="rgb(228,84,46)" fg:x="139" fg:w="3"/><text x="39.2949%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.84%)</title><rect x="39.0449%" y="357" width="0.8427%" height="15" fill="rgb(254,188,9)" fg:x="139" fg:w="3"/><text x="39.2949%" y="367.50"></text></g><g><title>&lt;libsolver::solver::Row as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="39.6067%" y="341" width="0.2809%" height="15" fill="rgb(206,112,54)" fg:x="141" fg:w="1"/><text x="39.8567%" y="351.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (1 samples, 0.28%)</title><rect x="39.6067%" y="325" width="0.2809%" height="15" fill="rgb(216,84,49)" fg:x="141" fg:w="1"/><text x="39.8567%" y="335.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (7 samples, 1.97%)</title><rect x="39.0449%" y="453" width="1.9663%" height="15" fill="rgb(214,194,35)" fg:x="139" fg:w="7"/><text x="39.2949%" y="463.50">c..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (7 samples, 1.97%)</title><rect x="39.0449%" y="437" width="1.9663%" height="15" fill="rgb(249,28,3)" fg:x="139" fg:w="7"/><text x="39.2949%" y="447.50">&lt;..</text></g><g><title>libsolver::solver::SudokuValueSet::len (4 samples, 1.12%)</title><rect x="39.8876%" y="421" width="1.1236%" height="15" fill="rgb(222,56,52)" fg:x="142" fg:w="4"/><text x="40.1376%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (4 samples, 1.12%)</title><rect x="39.8876%" y="405" width="1.1236%" height="15" fill="rgb(245,217,50)" fg:x="142" fg:w="4"/><text x="40.1376%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (4 samples, 1.12%)</title><rect x="39.8876%" y="389" width="1.1236%" height="15" fill="rgb(213,201,24)" fg:x="142" fg:w="4"/><text x="40.1376%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (4 samples, 1.12%)</title><rect x="39.8876%" y="373" width="1.1236%" height="15" fill="rgb(248,116,28)" fg:x="142" fg:w="4"/><text x="40.1376%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.12%)</title><rect x="39.8876%" y="357" width="1.1236%" height="15" fill="rgb(219,72,43)" fg:x="142" fg:w="4"/><text x="40.1376%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.12%)</title><rect x="39.8876%" y="341" width="1.1236%" height="15" fill="rgb(209,138,14)" fg:x="142" fg:w="4"/><text x="40.1376%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.12%)</title><rect x="39.8876%" y="325" width="1.1236%" height="15" fill="rgb(222,18,33)" fg:x="142" fg:w="4"/><text x="40.1376%" y="335.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (2 samples, 0.56%)</title><rect x="40.4494%" y="309" width="0.5618%" height="15" fill="rgb(213,199,7)" fg:x="144" fg:w="2"/><text x="40.6994%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.56%)</title><rect x="40.4494%" y="293" width="0.5618%" height="15" fill="rgb(250,110,10)" fg:x="144" fg:w="2"/><text x="40.6994%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (2 samples, 0.56%)</title><rect x="40.4494%" y="277" width="0.5618%" height="15" fill="rgb(248,123,6)" fg:x="144" fg:w="2"/><text x="40.6994%" y="287.50"></text></g><g><title>core::slice::sort::choose_pivot (9 samples, 2.53%)</title><rect x="39.0449%" y="501" width="2.5281%" height="15" fill="rgb(206,91,31)" fg:x="139" fg:w="9"/><text x="39.2949%" y="511.50">co..</text></g><g><title>core::slice::sort::choose_pivot::_{{closure}} (9 samples, 2.53%)</title><rect x="39.0449%" y="485" width="2.5281%" height="15" fill="rgb(211,154,13)" fg:x="139" fg:w="9"/><text x="39.2949%" y="495.50">co..</text></g><g><title>core::slice::sort::choose_pivot::_{{closure}} (9 samples, 2.53%)</title><rect x="39.0449%" y="469" width="2.5281%" height="15" fill="rgb(225,148,7)" fg:x="139" fg:w="9"/><text x="39.2949%" y="479.50">co..</text></g><g><title>core::slice::sort::choose_pivot::_{{closure}} (2 samples, 0.56%)</title><rect x="41.0112%" y="453" width="0.5618%" height="15" fill="rgb(220,160,43)" fg:x="146" fg:w="2"/><text x="41.2612%" y="463.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (2 samples, 0.56%)</title><rect x="41.0112%" y="437" width="0.5618%" height="15" fill="rgb(213,52,39)" fg:x="146" fg:w="2"/><text x="41.2612%" y="447.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (2 samples, 0.56%)</title><rect x="41.0112%" y="421" width="0.5618%" height="15" fill="rgb(243,137,7)" fg:x="146" fg:w="2"/><text x="41.2612%" y="431.50"></text></g><g><title>libsolver::solver::SudokuValueSet::len (2 samples, 0.56%)</title><rect x="41.0112%" y="405" width="0.5618%" height="15" fill="rgb(230,79,13)" fg:x="146" fg:w="2"/><text x="41.2612%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (2 samples, 0.56%)</title><rect x="41.0112%" y="389" width="0.5618%" height="15" fill="rgb(247,105,23)" fg:x="146" fg:w="2"/><text x="41.2612%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 0.56%)</title><rect x="41.0112%" y="373" width="0.5618%" height="15" fill="rgb(223,179,41)" fg:x="146" fg:w="2"/><text x="41.2612%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2 samples, 0.56%)</title><rect x="41.0112%" y="357" width="0.5618%" height="15" fill="rgb(218,9,34)" fg:x="146" fg:w="2"/><text x="41.2612%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.56%)</title><rect x="41.0112%" y="341" width="0.5618%" height="15" fill="rgb(222,106,8)" fg:x="146" fg:w="2"/><text x="41.2612%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.56%)</title><rect x="41.0112%" y="325" width="0.5618%" height="15" fill="rgb(211,220,0)" fg:x="146" fg:w="2"/><text x="41.2612%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.56%)</title><rect x="41.0112%" y="309" width="0.5618%" height="15" fill="rgb(229,52,16)" fg:x="146" fg:w="2"/><text x="41.2612%" y="319.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (2 samples, 0.56%)</title><rect x="41.0112%" y="293" width="0.5618%" height="15" fill="rgb(212,155,18)" fg:x="146" fg:w="2"/><text x="41.2612%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.56%)</title><rect x="41.0112%" y="277" width="0.5618%" height="15" fill="rgb(242,21,14)" fg:x="146" fg:w="2"/><text x="41.2612%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (2 samples, 0.56%)</title><rect x="41.0112%" y="261" width="0.5618%" height="15" fill="rgb(222,19,48)" fg:x="146" fg:w="2"/><text x="41.2612%" y="271.50"></text></g><g><title>&lt;libsolver::solver::Cell as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.12%)</title><rect x="44.9438%" y="357" width="1.1236%" height="15" fill="rgb(232,45,27)" fg:x="160" fg:w="4"/><text x="45.1938%" y="367.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (2 samples, 0.56%)</title><rect x="45.5056%" y="341" width="0.5618%" height="15" fill="rgb(249,103,42)" fg:x="162" fg:w="2"/><text x="45.7556%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 3.37%)</title><rect x="43.2584%" y="405" width="3.3708%" height="15" fill="rgb(246,81,33)" fg:x="154" fg:w="12"/><text x="43.5084%" y="415.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (12 samples, 3.37%)</title><rect x="43.2584%" y="389" width="3.3708%" height="15" fill="rgb(252,33,42)" fg:x="154" fg:w="12"/><text x="43.5084%" y="399.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (12 samples, 3.37%)</title><rect x="43.2584%" y="373" width="3.3708%" height="15" fill="rgb(209,212,41)" fg:x="154" fg:w="12"/><text x="43.5084%" y="383.50">cor..</text></g><g><title>&lt;libsolver::solver::Row as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.56%)</title><rect x="46.0674%" y="357" width="0.5618%" height="15" fill="rgb(207,154,6)" fg:x="164" fg:w="2"/><text x="46.3174%" y="367.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (2 samples, 0.56%)</title><rect x="46.0674%" y="341" width="0.5618%" height="15" fill="rgb(223,64,47)" fg:x="164" fg:w="2"/><text x="46.3174%" y="351.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (18 samples, 5.06%)</title><rect x="43.2584%" y="421" width="5.0562%" height="15" fill="rgb(211,161,38)" fg:x="154" fg:w="18"/><text x="43.5084%" y="431.50">&lt;libso..</text></g><g><title>libsolver::solver::SudokuValueSet::insert (6 samples, 1.69%)</title><rect x="46.6292%" y="405" width="1.6854%" height="15" fill="rgb(219,138,40)" fg:x="166" fg:w="6"/><text x="46.8792%" y="415.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (25 samples, 7.02%)</title><rect x="41.5730%" y="437" width="7.0225%" height="15" fill="rgb(241,228,46)" fg:x="148" fg:w="25"/><text x="41.8230%" y="447.50">libsolver..</text></g><g><title>libsolver::solver::Sudoku::cell_from_ix (1 samples, 0.28%)</title><rect x="48.3146%" y="421" width="0.2809%" height="15" fill="rgb(223,209,38)" fg:x="172" fg:w="1"/><text x="48.5646%" y="431.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (31 samples, 8.71%)</title><rect x="41.5730%" y="501" width="8.7079%" height="15" fill="rgb(236,164,45)" fg:x="148" fg:w="31"/><text x="41.8230%" y="511.50">core::slice:..</text></g><g><title>core::slice::sort::insert_tail (31 samples, 8.71%)</title><rect x="41.5730%" y="485" width="8.7079%" height="15" fill="rgb(231,15,5)" fg:x="148" fg:w="31"/><text x="41.8230%" y="495.50">core::slice:..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (31 samples, 8.71%)</title><rect x="41.5730%" y="469" width="8.7079%" height="15" fill="rgb(252,35,15)" fg:x="148" fg:w="31"/><text x="41.8230%" y="479.50">core::slice:..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (31 samples, 8.71%)</title><rect x="41.5730%" y="453" width="8.7079%" height="15" fill="rgb(248,181,18)" fg:x="148" fg:w="31"/><text x="41.8230%" y="463.50">&lt;libsolver::..</text></g><g><title>libsolver::solver::SudokuValueSet::len (6 samples, 1.69%)</title><rect x="48.5955%" y="437" width="1.6854%" height="15" fill="rgb(233,39,42)" fg:x="173" fg:w="6"/><text x="48.8455%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (6 samples, 1.69%)</title><rect x="48.5955%" y="421" width="1.6854%" height="15" fill="rgb(238,110,33)" fg:x="173" fg:w="6"/><text x="48.8455%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (6 samples, 1.69%)</title><rect x="48.5955%" y="405" width="1.6854%" height="15" fill="rgb(233,195,10)" fg:x="173" fg:w="6"/><text x="48.8455%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (6 samples, 1.69%)</title><rect x="48.5955%" y="389" width="1.6854%" height="15" fill="rgb(254,105,3)" fg:x="173" fg:w="6"/><text x="48.8455%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 1.69%)</title><rect x="48.5955%" y="373" width="1.6854%" height="15" fill="rgb(221,225,9)" fg:x="173" fg:w="6"/><text x="48.8455%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 1.69%)</title><rect x="48.5955%" y="357" width="1.6854%" height="15" fill="rgb(224,227,45)" fg:x="173" fg:w="6"/><text x="48.8455%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 1.69%)</title><rect x="48.5955%" y="341" width="1.6854%" height="15" fill="rgb(229,198,43)" fg:x="173" fg:w="6"/><text x="48.8455%" y="351.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (6 samples, 1.69%)</title><rect x="48.5955%" y="325" width="1.6854%" height="15" fill="rgb(206,209,35)" fg:x="173" fg:w="6"/><text x="48.8455%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6 samples, 1.69%)</title><rect x="48.5955%" y="309" width="1.6854%" height="15" fill="rgb(245,195,53)" fg:x="173" fg:w="6"/><text x="48.8455%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (6 samples, 1.69%)</title><rect x="48.5955%" y="293" width="1.6854%" height="15" fill="rgb(240,92,26)" fg:x="173" fg:w="6"/><text x="48.8455%" y="303.50"></text></g><g><title>&lt;libsolver::solver::Cell as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.56%)</title><rect x="51.1236%" y="373" width="0.5618%" height="15" fill="rgb(207,40,23)" fg:x="182" fg:w="2"/><text x="51.3736%" y="383.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (2 samples, 0.56%)</title><rect x="51.1236%" y="357" width="0.5618%" height="15" fill="rgb(223,111,35)" fg:x="182" fg:w="2"/><text x="51.3736%" y="367.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (5 samples, 1.40%)</title><rect x="50.5618%" y="453" width="1.4045%" height="15" fill="rgb(229,147,28)" fg:x="180" fg:w="5"/><text x="50.8118%" y="463.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (4 samples, 1.12%)</title><rect x="50.8427%" y="437" width="1.1236%" height="15" fill="rgb(211,29,28)" fg:x="181" fg:w="4"/><text x="51.0927%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.12%)</title><rect x="50.8427%" y="421" width="1.1236%" height="15" fill="rgb(228,72,33)" fg:x="181" fg:w="4"/><text x="51.0927%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (4 samples, 1.12%)</title><rect x="50.8427%" y="405" width="1.1236%" height="15" fill="rgb(205,214,31)" fg:x="181" fg:w="4"/><text x="51.0927%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 1.12%)</title><rect x="50.8427%" y="389" width="1.1236%" height="15" fill="rgb(224,111,15)" fg:x="181" fg:w="4"/><text x="51.0927%" y="399.50"></text></g><g><title>&lt;libsolver::solver::Row as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="51.6854%" y="373" width="0.2809%" height="15" fill="rgb(253,21,26)" fg:x="184" fg:w="1"/><text x="51.9354%" y="383.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (1 samples, 0.28%)</title><rect x="51.6854%" y="357" width="0.2809%" height="15" fill="rgb(245,139,43)" fg:x="184" fg:w="1"/><text x="51.9354%" y="367.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (10 samples, 2.81%)</title><rect x="50.2809%" y="501" width="2.8090%" height="15" fill="rgb(252,170,7)" fg:x="179" fg:w="10"/><text x="50.5309%" y="511.50">co..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (9 samples, 2.53%)</title><rect x="50.5618%" y="485" width="2.5281%" height="15" fill="rgb(231,118,14)" fg:x="180" fg:w="9"/><text x="50.8118%" y="495.50">co..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (9 samples, 2.53%)</title><rect x="50.5618%" y="469" width="2.5281%" height="15" fill="rgb(238,83,0)" fg:x="180" fg:w="9"/><text x="50.8118%" y="479.50">&lt;l..</text></g><g><title>libsolver::solver::SudokuValueSet::len (4 samples, 1.12%)</title><rect x="51.9663%" y="453" width="1.1236%" height="15" fill="rgb(221,39,39)" fg:x="185" fg:w="4"/><text x="52.2163%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (4 samples, 1.12%)</title><rect x="51.9663%" y="437" width="1.1236%" height="15" fill="rgb(222,119,46)" fg:x="185" fg:w="4"/><text x="52.2163%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (4 samples, 1.12%)</title><rect x="51.9663%" y="421" width="1.1236%" height="15" fill="rgb(222,165,49)" fg:x="185" fg:w="4"/><text x="52.2163%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (4 samples, 1.12%)</title><rect x="51.9663%" y="405" width="1.1236%" height="15" fill="rgb(219,113,52)" fg:x="185" fg:w="4"/><text x="52.2163%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.12%)</title><rect x="51.9663%" y="389" width="1.1236%" height="15" fill="rgb(214,7,15)" fg:x="185" fg:w="4"/><text x="52.2163%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.12%)</title><rect x="51.9663%" y="373" width="1.1236%" height="15" fill="rgb(235,32,4)" fg:x="185" fg:w="4"/><text x="52.2163%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.12%)</title><rect x="51.9663%" y="357" width="1.1236%" height="15" fill="rgb(238,90,54)" fg:x="185" fg:w="4"/><text x="52.2163%" y="367.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (3 samples, 0.84%)</title><rect x="52.2472%" y="341" width="0.8427%" height="15" fill="rgb(213,208,19)" fg:x="186" fg:w="3"/><text x="52.4972%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3 samples, 0.84%)</title><rect x="52.2472%" y="325" width="0.8427%" height="15" fill="rgb(233,156,4)" fg:x="186" fg:w="3"/><text x="52.4972%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (3 samples, 0.84%)</title><rect x="52.2472%" y="309" width="0.8427%" height="15" fill="rgb(207,194,5)" fg:x="186" fg:w="3"/><text x="52.4972%" y="319.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (2 samples, 0.56%)</title><rect x="59.8315%" y="357" width="0.5618%" height="15" fill="rgb(206,111,30)" fg:x="213" fg:w="2"/><text x="60.0815%" y="367.50"></text></g><g><title>&lt;libsolver::solver::Cell as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 2.25%)</title><rect x="58.9888%" y="373" width="2.2472%" height="15" fill="rgb(243,70,54)" fg:x="210" fg:w="8"/><text x="59.2388%" y="383.50">&lt;..</text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (3 samples, 0.84%)</title><rect x="60.3933%" y="357" width="0.8427%" height="15" fill="rgb(242,28,8)" fg:x="215" fg:w="3"/><text x="60.6433%" y="367.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (3 samples, 0.84%)</title><rect x="60.3933%" y="341" width="0.8427%" height="15" fill="rgb(219,106,18)" fg:x="215" fg:w="3"/><text x="60.6433%" y="351.50"></text></g><g><title>core::array::drain::drain_array_with (3 samples, 0.84%)</title><rect x="60.3933%" y="325" width="0.8427%" height="15" fill="rgb(244,222,10)" fg:x="215" fg:w="3"/><text x="60.6433%" y="335.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (3 samples, 0.84%)</title><rect x="60.3933%" y="309" width="0.8427%" height="15" fill="rgb(236,179,52)" fg:x="215" fg:w="3"/><text x="60.6433%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 6.18%)</title><rect x="55.6180%" y="421" width="6.1798%" height="15" fill="rgb(213,23,39)" fg:x="198" fg:w="22"/><text x="55.8680%" y="431.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (22 samples, 6.18%)</title><rect x="55.6180%" y="405" width="6.1798%" height="15" fill="rgb(238,48,10)" fg:x="198" fg:w="22"/><text x="55.8680%" y="415.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (22 samples, 6.18%)</title><rect x="55.6180%" y="389" width="6.1798%" height="15" fill="rgb(251,196,23)" fg:x="198" fg:w="22"/><text x="55.8680%" y="399.50">core::it..</text></g><g><title>&lt;libsolver::solver::Row as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.56%)</title><rect x="61.2360%" y="373" width="0.5618%" height="15" fill="rgb(250,152,24)" fg:x="218" fg:w="2"/><text x="61.4860%" y="383.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (2 samples, 0.56%)</title><rect x="61.2360%" y="357" width="0.5618%" height="15" fill="rgb(209,150,17)" fg:x="218" fg:w="2"/><text x="61.4860%" y="367.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (25 samples, 7.02%)</title><rect x="55.6180%" y="437" width="7.0225%" height="15" fill="rgb(234,202,34)" fg:x="198" fg:w="25"/><text x="55.8680%" y="447.50">&lt;libsolve..</text></g><g><title>libsolver::solver::SudokuValueSet::insert (3 samples, 0.84%)</title><rect x="61.7978%" y="421" width="0.8427%" height="15" fill="rgb(253,148,53)" fg:x="220" fg:w="3"/><text x="62.0478%" y="431.50"></text></g><g><title>libsolver::solver::Sudoku::cell_from_ix (1 samples, 0.28%)</title><rect x="62.6404%" y="437" width="0.2809%" height="15" fill="rgb(218,129,16)" fg:x="223" fg:w="1"/><text x="62.8904%" y="447.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (32 samples, 8.99%)</title><rect x="54.2135%" y="453" width="8.9888%" height="15" fill="rgb(216,85,19)" fg:x="193" fg:w="32"/><text x="54.4635%" y="463.50">libsolver::so..</text></g><g><title>libsolver::solver::Sudoku::row (1 samples, 0.28%)</title><rect x="62.9213%" y="437" width="0.2809%" height="15" fill="rgb(235,228,7)" fg:x="224" fg:w="1"/><text x="63.1713%" y="447.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (54 samples, 15.17%)</title><rect x="53.0899%" y="485" width="15.1685%" height="15" fill="rgb(245,175,0)" fg:x="189" fg:w="54"/><text x="53.3399%" y="495.50">core::slice::_&lt;impl [T]..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (54 samples, 15.17%)</title><rect x="53.0899%" y="469" width="15.1685%" height="15" fill="rgb(208,168,36)" fg:x="189" fg:w="54"/><text x="53.3399%" y="479.50">&lt;libsolver::solver::Ite..</text></g><g><title>libsolver::solver::SudokuValueSet::len (18 samples, 5.06%)</title><rect x="63.2022%" y="453" width="5.0562%" height="15" fill="rgb(246,171,24)" fg:x="225" fg:w="18"/><text x="63.4522%" y="463.50">libsol..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (18 samples, 5.06%)</title><rect x="63.2022%" y="437" width="5.0562%" height="15" fill="rgb(215,142,24)" fg:x="225" fg:w="18"/><text x="63.4522%" y="447.50">&lt;core:..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (18 samples, 5.06%)</title><rect x="63.2022%" y="421" width="5.0562%" height="15" fill="rgb(250,187,7)" fg:x="225" fg:w="18"/><text x="63.4522%" y="431.50">core::..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (18 samples, 5.06%)</title><rect x="63.2022%" y="405" width="5.0562%" height="15" fill="rgb(228,66,33)" fg:x="225" fg:w="18"/><text x="63.4522%" y="415.50">&lt;usize..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 5.06%)</title><rect x="63.2022%" y="389" width="5.0562%" height="15" fill="rgb(234,215,21)" fg:x="225" fg:w="18"/><text x="63.4522%" y="399.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 5.06%)</title><rect x="63.2022%" y="373" width="5.0562%" height="15" fill="rgb(222,191,20)" fg:x="225" fg:w="18"/><text x="63.4522%" y="383.50">&lt;core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 5.06%)</title><rect x="63.2022%" y="357" width="5.0562%" height="15" fill="rgb(245,79,54)" fg:x="225" fg:w="18"/><text x="63.4522%" y="367.50">&lt;core:..</text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (13 samples, 3.65%)</title><rect x="64.6067%" y="341" width="3.6517%" height="15" fill="rgb(240,10,37)" fg:x="230" fg:w="13"/><text x="64.8567%" y="351.50">core..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (13 samples, 3.65%)</title><rect x="64.6067%" y="325" width="3.6517%" height="15" fill="rgb(214,192,32)" fg:x="230" fg:w="13"/><text x="64.8567%" y="335.50">core..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (13 samples, 3.65%)</title><rect x="64.6067%" y="309" width="3.6517%" height="15" fill="rgb(209,36,54)" fg:x="230" fg:w="13"/><text x="64.8567%" y="319.50">&lt;usi..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.28%)</title><rect x="68.5393%" y="469" width="0.2809%" height="15" fill="rgb(220,10,11)" fg:x="244" fg:w="1"/><text x="68.7893%" y="479.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (1 samples, 0.28%)</title><rect x="72.1910%" y="341" width="0.2809%" height="15" fill="rgb(221,106,17)" fg:x="257" fg:w="1"/><text x="72.4410%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.97%)</title><rect x="70.7865%" y="405" width="1.9663%" height="15" fill="rgb(251,142,44)" fg:x="252" fg:w="7"/><text x="71.0365%" y="415.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (7 samples, 1.97%)</title><rect x="70.7865%" y="389" width="1.9663%" height="15" fill="rgb(238,13,15)" fg:x="252" fg:w="7"/><text x="71.0365%" y="399.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7 samples, 1.97%)</title><rect x="70.7865%" y="373" width="1.9663%" height="15" fill="rgb(208,107,27)" fg:x="252" fg:w="7"/><text x="71.0365%" y="383.50">c..</text></g><g><title>&lt;libsolver::solver::Row as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.56%)</title><rect x="72.1910%" y="357" width="0.5618%" height="15" fill="rgb(205,136,37)" fg:x="257" fg:w="2"/><text x="72.4410%" y="367.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (1 samples, 0.28%)</title><rect x="72.4719%" y="341" width="0.2809%" height="15" fill="rgb(250,205,27)" fg:x="258" fg:w="1"/><text x="72.7219%" y="351.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (1 samples, 0.28%)</title><rect x="72.4719%" y="325" width="0.2809%" height="15" fill="rgb(210,80,43)" fg:x="258" fg:w="1"/><text x="72.7219%" y="335.50"></text></g><g><title>core::array::drain::drain_array_with (1 samples, 0.28%)</title><rect x="72.4719%" y="309" width="0.2809%" height="15" fill="rgb(247,160,36)" fg:x="258" fg:w="1"/><text x="72.7219%" y="319.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.28%)</title><rect x="72.4719%" y="293" width="0.2809%" height="15" fill="rgb(234,13,49)" fg:x="258" fg:w="1"/><text x="72.7219%" y="303.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (8 samples, 2.25%)</title><rect x="70.7865%" y="421" width="2.2472%" height="15" fill="rgb(234,122,0)" fg:x="252" fg:w="8"/><text x="71.0365%" y="431.50">&lt;..</text></g><g><title>libsolver::solver::SudokuValueSet::insert (1 samples, 0.28%)</title><rect x="72.7528%" y="405" width="0.2809%" height="15" fill="rgb(207,146,38)" fg:x="259" fg:w="1"/><text x="73.0028%" y="415.50"></text></g><g><title>libsolver::solver::Sudoku::cell (1 samples, 0.28%)</title><rect x="73.0337%" y="421" width="0.2809%" height="15" fill="rgb(207,177,25)" fg:x="260" fg:w="1"/><text x="73.2837%" y="431.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (15 samples, 4.21%)</title><rect x="69.6629%" y="437" width="4.2135%" height="15" fill="rgb(211,178,42)" fg:x="248" fg:w="15"/><text x="69.9129%" y="447.50">libso..</text></g><g><title>libsolver::solver::Sudoku::cell_from_ix (2 samples, 0.56%)</title><rect x="73.3146%" y="421" width="0.5618%" height="15" fill="rgb(230,69,54)" fg:x="261" fg:w="2"/><text x="73.5646%" y="431.50"></text></g><g><title>core::slice::sort::partition (81 samples, 22.75%)</title><rect x="53.0899%" y="501" width="22.7528%" height="15" fill="rgb(214,135,41)" fg:x="189" fg:w="81"/><text x="53.3399%" y="511.50">core::slice::sort::partition</text></g><g><title>core::slice::sort::partition_in_blocks (27 samples, 7.58%)</title><rect x="68.2584%" y="485" width="7.5843%" height="15" fill="rgb(237,67,25)" fg:x="243" fg:w="27"/><text x="68.5084%" y="495.50">core::slic..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (25 samples, 7.02%)</title><rect x="68.8202%" y="469" width="7.0225%" height="15" fill="rgb(222,189,50)" fg:x="245" fg:w="25"/><text x="69.0702%" y="479.50">core::sli..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (25 samples, 7.02%)</title><rect x="68.8202%" y="453" width="7.0225%" height="15" fill="rgb(245,148,34)" fg:x="245" fg:w="25"/><text x="69.0702%" y="463.50">&lt;libsolve..</text></g><g><title>libsolver::solver::SudokuValueSet::len (7 samples, 1.97%)</title><rect x="73.8764%" y="437" width="1.9663%" height="15" fill="rgb(222,29,6)" fg:x="263" fg:w="7"/><text x="74.1264%" y="447.50">l..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (7 samples, 1.97%)</title><rect x="73.8764%" y="421" width="1.9663%" height="15" fill="rgb(221,189,43)" fg:x="263" fg:w="7"/><text x="74.1264%" y="431.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (7 samples, 1.97%)</title><rect x="73.8764%" y="405" width="1.9663%" height="15" fill="rgb(207,36,27)" fg:x="263" fg:w="7"/><text x="74.1264%" y="415.50">c..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (7 samples, 1.97%)</title><rect x="73.8764%" y="389" width="1.9663%" height="15" fill="rgb(217,90,24)" fg:x="263" fg:w="7"/><text x="74.1264%" y="399.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 1.97%)</title><rect x="73.8764%" y="373" width="1.9663%" height="15" fill="rgb(224,66,35)" fg:x="263" fg:w="7"/><text x="74.1264%" y="383.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 1.97%)</title><rect x="73.8764%" y="357" width="1.9663%" height="15" fill="rgb(221,13,50)" fg:x="263" fg:w="7"/><text x="74.1264%" y="367.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 1.97%)</title><rect x="73.8764%" y="341" width="1.9663%" height="15" fill="rgb(236,68,49)" fg:x="263" fg:w="7"/><text x="74.1264%" y="351.50">&lt;..</text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (4 samples, 1.12%)</title><rect x="74.7191%" y="325" width="1.1236%" height="15" fill="rgb(229,146,28)" fg:x="266" fg:w="4"/><text x="74.9691%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4 samples, 1.12%)</title><rect x="74.7191%" y="309" width="1.1236%" height="15" fill="rgb(225,31,38)" fg:x="266" fg:w="4"/><text x="74.9691%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (4 samples, 1.12%)</title><rect x="74.7191%" y="293" width="1.1236%" height="15" fill="rgb(250,208,3)" fg:x="266" fg:w="4"/><text x="74.9691%" y="303.50"></text></g><g><title>&lt;libsolver::solver::Cell as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.56%)</title><rect x="78.3708%" y="373" width="0.5618%" height="15" fill="rgb(246,54,23)" fg:x="279" fg:w="2"/><text x="78.6208%" y="383.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (1 samples, 0.28%)</title><rect x="78.6517%" y="357" width="0.2809%" height="15" fill="rgb(243,76,11)" fg:x="280" fg:w="1"/><text x="78.9017%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 3.09%)</title><rect x="76.1236%" y="421" width="3.0899%" height="15" fill="rgb(245,21,50)" fg:x="271" fg:w="11"/><text x="76.3736%" y="431.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (11 samples, 3.09%)</title><rect x="76.1236%" y="405" width="3.0899%" height="15" fill="rgb(228,9,43)" fg:x="271" fg:w="11"/><text x="76.3736%" y="415.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (11 samples, 3.09%)</title><rect x="76.1236%" y="389" width="3.0899%" height="15" fill="rgb(208,100,47)" fg:x="271" fg:w="11"/><text x="76.3736%" y="399.50">cor..</text></g><g><title>&lt;libsolver::solver::Row as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="78.9326%" y="373" width="0.2809%" height="15" fill="rgb(232,26,8)" fg:x="281" fg:w="1"/><text x="79.1826%" y="383.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (1 samples, 0.28%)</title><rect x="78.9326%" y="357" width="0.2809%" height="15" fill="rgb(216,166,38)" fg:x="281" fg:w="1"/><text x="79.1826%" y="367.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (1 samples, 0.28%)</title><rect x="78.9326%" y="341" width="0.2809%" height="15" fill="rgb(251,202,51)" fg:x="281" fg:w="1"/><text x="79.1826%" y="351.50"></text></g><g><title>core::array::drain::drain_array_with (1 samples, 0.28%)</title><rect x="78.9326%" y="325" width="0.2809%" height="15" fill="rgb(254,216,34)" fg:x="281" fg:w="1"/><text x="79.1826%" y="335.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.28%)</title><rect x="78.9326%" y="309" width="0.2809%" height="15" fill="rgb(251,32,27)" fg:x="281" fg:w="1"/><text x="79.1826%" y="319.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (13 samples, 3.65%)</title><rect x="76.1236%" y="437" width="3.6517%" height="15" fill="rgb(208,127,28)" fg:x="271" fg:w="13"/><text x="76.3736%" y="447.50">&lt;lib..</text></g><g><title>libsolver::solver::SudokuValueSet::insert (2 samples, 0.56%)</title><rect x="79.2135%" y="421" width="0.5618%" height="15" fill="rgb(224,137,22)" fg:x="282" fg:w="2"/><text x="79.4635%" y="431.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (15 samples, 4.21%)</title><rect x="75.8427%" y="453" width="4.2135%" height="15" fill="rgb(254,70,32)" fg:x="270" fg:w="15"/><text x="76.0927%" y="463.50">libso..</text></g><g><title>libsolver::solver::Sudoku::cell_from_ix (1 samples, 0.28%)</title><rect x="79.7753%" y="437" width="0.2809%" height="15" fill="rgb(229,75,37)" fg:x="284" fg:w="1"/><text x="80.0253%" y="447.50"></text></g><g><title>core::slice::sort::partition_equal (19 samples, 5.34%)</title><rect x="75.8427%" y="501" width="5.3371%" height="15" fill="rgb(252,64,23)" fg:x="270" fg:w="19"/><text x="76.0927%" y="511.50">core::s..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (19 samples, 5.34%)</title><rect x="75.8427%" y="485" width="5.3371%" height="15" fill="rgb(232,162,48)" fg:x="270" fg:w="19"/><text x="76.0927%" y="495.50">core::s..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (19 samples, 5.34%)</title><rect x="75.8427%" y="469" width="5.3371%" height="15" fill="rgb(246,160,12)" fg:x="270" fg:w="19"/><text x="76.0927%" y="479.50">&lt;libsol..</text></g><g><title>libsolver::solver::SudokuValueSet::len (4 samples, 1.12%)</title><rect x="80.0562%" y="453" width="1.1236%" height="15" fill="rgb(247,166,0)" fg:x="285" fg:w="4"/><text x="80.3062%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (4 samples, 1.12%)</title><rect x="80.0562%" y="437" width="1.1236%" height="15" fill="rgb(249,219,21)" fg:x="285" fg:w="4"/><text x="80.3062%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (4 samples, 1.12%)</title><rect x="80.0562%" y="421" width="1.1236%" height="15" fill="rgb(205,209,3)" fg:x="285" fg:w="4"/><text x="80.3062%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (4 samples, 1.12%)</title><rect x="80.0562%" y="405" width="1.1236%" height="15" fill="rgb(243,44,1)" fg:x="285" fg:w="4"/><text x="80.3062%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.12%)</title><rect x="80.0562%" y="389" width="1.1236%" height="15" fill="rgb(206,159,16)" fg:x="285" fg:w="4"/><text x="80.3062%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.12%)</title><rect x="80.0562%" y="373" width="1.1236%" height="15" fill="rgb(244,77,30)" fg:x="285" fg:w="4"/><text x="80.3062%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.12%)</title><rect x="80.0562%" y="357" width="1.1236%" height="15" fill="rgb(218,69,12)" fg:x="285" fg:w="4"/><text x="80.3062%" y="367.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (4 samples, 1.12%)</title><rect x="80.0562%" y="341" width="1.1236%" height="15" fill="rgb(212,87,7)" fg:x="285" fg:w="4"/><text x="80.3062%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4 samples, 1.12%)</title><rect x="80.0562%" y="325" width="1.1236%" height="15" fill="rgb(245,114,25)" fg:x="285" fg:w="4"/><text x="80.3062%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (4 samples, 1.12%)</title><rect x="80.0562%" y="309" width="1.1236%" height="15" fill="rgb(210,61,42)" fg:x="285" fg:w="4"/><text x="80.3062%" y="319.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (1 samples, 0.28%)</title><rect x="81.4607%" y="405" width="0.2809%" height="15" fill="rgb(211,52,33)" fg:x="290" fg:w="1"/><text x="81.7107%" y="415.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (1 samples, 0.28%)</title><rect x="81.4607%" y="389" width="0.2809%" height="15" fill="rgb(234,58,33)" fg:x="290" fg:w="1"/><text x="81.7107%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="81.4607%" y="373" width="0.2809%" height="15" fill="rgb(220,115,36)" fg:x="290" fg:w="1"/><text x="81.7107%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.28%)</title><rect x="81.4607%" y="357" width="0.2809%" height="15" fill="rgb(243,153,54)" fg:x="290" fg:w="1"/><text x="81.7107%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.28%)</title><rect x="81.4607%" y="341" width="0.2809%" height="15" fill="rgb(251,47,18)" fg:x="290" fg:w="1"/><text x="81.7107%" y="351.50"></text></g><g><title>core::slice::sort::choose_pivot (3 samples, 0.84%)</title><rect x="81.1798%" y="485" width="0.8427%" height="15" fill="rgb(242,102,42)" fg:x="289" fg:w="3"/><text x="81.4298%" y="495.50"></text></g><g><title>core::slice::sort::choose_pivot::_{{closure}} (3 samples, 0.84%)</title><rect x="81.1798%" y="469" width="0.8427%" height="15" fill="rgb(234,31,38)" fg:x="289" fg:w="3"/><text x="81.4298%" y="479.50"></text></g><g><title>core::slice::sort::choose_pivot::_{{closure}} (3 samples, 0.84%)</title><rect x="81.1798%" y="453" width="0.8427%" height="15" fill="rgb(221,117,51)" fg:x="289" fg:w="3"/><text x="81.4298%" y="463.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (3 samples, 0.84%)</title><rect x="81.1798%" y="437" width="0.8427%" height="15" fill="rgb(212,20,18)" fg:x="289" fg:w="3"/><text x="81.4298%" y="447.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (3 samples, 0.84%)</title><rect x="81.1798%" y="421" width="0.8427%" height="15" fill="rgb(245,133,36)" fg:x="289" fg:w="3"/><text x="81.4298%" y="431.50"></text></g><g><title>libsolver::solver::SudokuValueSet::len (1 samples, 0.28%)</title><rect x="81.7416%" y="405" width="0.2809%" height="15" fill="rgb(212,6,19)" fg:x="291" fg:w="1"/><text x="81.9916%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.28%)</title><rect x="81.7416%" y="389" width="0.2809%" height="15" fill="rgb(218,1,36)" fg:x="291" fg:w="1"/><text x="81.9916%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.28%)</title><rect x="81.7416%" y="373" width="0.2809%" height="15" fill="rgb(246,84,54)" fg:x="291" fg:w="1"/><text x="81.9916%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.28%)</title><rect x="81.7416%" y="357" width="0.2809%" height="15" fill="rgb(242,110,6)" fg:x="291" fg:w="1"/><text x="81.9916%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.28%)</title><rect x="81.7416%" y="341" width="0.2809%" height="15" fill="rgb(214,47,5)" fg:x="291" fg:w="1"/><text x="81.9916%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.28%)</title><rect x="81.7416%" y="325" width="0.2809%" height="15" fill="rgb(218,159,25)" fg:x="291" fg:w="1"/><text x="81.9916%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.28%)</title><rect x="81.7416%" y="309" width="0.2809%" height="15" fill="rgb(215,211,28)" fg:x="291" fg:w="1"/><text x="81.9916%" y="319.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (1 samples, 0.28%)</title><rect x="81.7416%" y="293" width="0.2809%" height="15" fill="rgb(238,59,32)" fg:x="291" fg:w="1"/><text x="81.9916%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.28%)</title><rect x="81.7416%" y="277" width="0.2809%" height="15" fill="rgb(226,82,3)" fg:x="291" fg:w="1"/><text x="81.9916%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (1 samples, 0.28%)</title><rect x="81.7416%" y="261" width="0.2809%" height="15" fill="rgb(240,164,32)" fg:x="291" fg:w="1"/><text x="81.9916%" y="271.50"></text></g><g><title>&lt;libsolver::solver::Cell as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.97%)</title><rect x="86.5169%" y="341" width="1.9663%" height="15" fill="rgb(232,46,7)" fg:x="308" fg:w="7"/><text x="86.7669%" y="351.50">&lt;..</text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (6 samples, 1.69%)</title><rect x="86.7978%" y="325" width="1.6854%" height="15" fill="rgb(229,129,53)" fg:x="309" fg:w="6"/><text x="87.0478%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 6.18%)</title><rect x="82.5843%" y="389" width="6.1798%" height="15" fill="rgb(234,188,29)" fg:x="294" fg:w="22"/><text x="82.8343%" y="399.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (22 samples, 6.18%)</title><rect x="82.5843%" y="373" width="6.1798%" height="15" fill="rgb(246,141,4)" fg:x="294" fg:w="22"/><text x="82.8343%" y="383.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (22 samples, 6.18%)</title><rect x="82.5843%" y="357" width="6.1798%" height="15" fill="rgb(229,23,39)" fg:x="294" fg:w="22"/><text x="82.8343%" y="367.50">core::it..</text></g><g><title>&lt;libsolver::solver::Row as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="88.4831%" y="341" width="0.2809%" height="15" fill="rgb(206,12,3)" fg:x="315" fg:w="1"/><text x="88.7331%" y="351.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (1 samples, 0.28%)</title><rect x="88.4831%" y="325" width="0.2809%" height="15" fill="rgb(252,226,20)" fg:x="315" fg:w="1"/><text x="88.7331%" y="335.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (1 samples, 0.28%)</title><rect x="88.4831%" y="309" width="0.2809%" height="15" fill="rgb(216,123,35)" fg:x="315" fg:w="1"/><text x="88.7331%" y="319.50"></text></g><g><title>core::array::drain::drain_array_with (1 samples, 0.28%)</title><rect x="88.4831%" y="293" width="0.2809%" height="15" fill="rgb(212,68,40)" fg:x="315" fg:w="1"/><text x="88.7331%" y="303.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.28%)</title><rect x="88.4831%" y="277" width="0.2809%" height="15" fill="rgb(254,125,32)" fg:x="315" fg:w="1"/><text x="88.7331%" y="287.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (25 samples, 7.02%)</title><rect x="82.0225%" y="421" width="7.0225%" height="15" fill="rgb(253,97,22)" fg:x="292" fg:w="25"/><text x="82.2725%" y="431.50">libsolver..</text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (23 samples, 6.46%)</title><rect x="82.5843%" y="405" width="6.4607%" height="15" fill="rgb(241,101,14)" fg:x="294" fg:w="23"/><text x="82.8343%" y="415.50">&lt;libsolv..</text></g><g><title>libsolver::solver::SudokuValueSet::insert (1 samples, 0.28%)</title><rect x="88.7640%" y="389" width="0.2809%" height="15" fill="rgb(238,103,29)" fg:x="316" fg:w="1"/><text x="89.0140%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (50 samples, 14.04%)</title><rect x="82.0225%" y="485" width="14.0449%" height="15" fill="rgb(233,195,47)" fg:x="292" fg:w="50"/><text x="82.2725%" y="495.50">core::slice::sort::in..</text></g><g><title>core::slice::sort::insert_tail (50 samples, 14.04%)</title><rect x="82.0225%" y="469" width="14.0449%" height="15" fill="rgb(246,218,30)" fg:x="292" fg:w="50"/><text x="82.2725%" y="479.50">core::slice::sort::in..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (50 samples, 14.04%)</title><rect x="82.0225%" y="453" width="14.0449%" height="15" fill="rgb(219,145,47)" fg:x="292" fg:w="50"/><text x="82.2725%" y="463.50">core::slice::_&lt;impl [..</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (50 samples, 14.04%)</title><rect x="82.0225%" y="437" width="14.0449%" height="15" fill="rgb(243,12,26)" fg:x="292" fg:w="50"/><text x="82.2725%" y="447.50">&lt;libsolver::solver::I..</text></g><g><title>libsolver::solver::SudokuValueSet::len (25 samples, 7.02%)</title><rect x="89.0449%" y="421" width="7.0225%" height="15" fill="rgb(214,87,16)" fg:x="317" fg:w="25"/><text x="89.2949%" y="431.50">libsolver..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (25 samples, 7.02%)</title><rect x="89.0449%" y="405" width="7.0225%" height="15" fill="rgb(208,99,42)" fg:x="317" fg:w="25"/><text x="89.2949%" y="415.50">&lt;core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (25 samples, 7.02%)</title><rect x="89.0449%" y="389" width="7.0225%" height="15" fill="rgb(253,99,2)" fg:x="317" fg:w="25"/><text x="89.2949%" y="399.50">core::ite..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (25 samples, 7.02%)</title><rect x="89.0449%" y="373" width="7.0225%" height="15" fill="rgb(220,168,23)" fg:x="317" fg:w="25"/><text x="89.2949%" y="383.50">&lt;usize as..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 7.02%)</title><rect x="89.0449%" y="357" width="7.0225%" height="15" fill="rgb(242,38,24)" fg:x="317" fg:w="25"/><text x="89.2949%" y="367.50">&lt;core::it..</text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 7.02%)</title><rect x="89.0449%" y="341" width="7.0225%" height="15" fill="rgb(225,182,9)" fg:x="317" fg:w="25"/><text x="89.2949%" y="351.50">&lt;core::it..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 7.02%)</title><rect x="89.0449%" y="325" width="7.0225%" height="15" fill="rgb(243,178,37)" fg:x="317" fg:w="25"/><text x="89.2949%" y="335.50">&lt;core::sl..</text></g><g><title>core::iter::adapters::copied::copy_fold::_{{closure}} (19 samples, 5.34%)</title><rect x="90.7303%" y="309" width="5.3371%" height="15" fill="rgb(232,139,19)" fg:x="323" fg:w="19"/><text x="90.9803%" y="319.50">core::i..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (19 samples, 5.34%)</title><rect x="90.7303%" y="293" width="5.3371%" height="15" fill="rgb(225,201,24)" fg:x="323" fg:w="19"/><text x="90.9803%" y="303.50">core::i..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (19 samples, 5.34%)</title><rect x="90.7303%" y="277" width="5.3371%" height="15" fill="rgb(221,47,46)" fg:x="323" fg:w="19"/><text x="90.9803%" y="287.50">&lt;usize ..</text></g><g><title>core::slice::sort::partial_insertion_sort (1 samples, 0.28%)</title><rect x="96.0674%" y="485" width="0.2809%" height="15" fill="rgb(249,23,13)" fg:x="342" fg:w="1"/><text x="96.3174%" y="495.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (1 samples, 0.28%)</title><rect x="96.0674%" y="469" width="0.2809%" height="15" fill="rgb(219,9,5)" fg:x="342" fg:w="1"/><text x="96.3174%" y="479.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (1 samples, 0.28%)</title><rect x="96.0674%" y="453" width="0.2809%" height="15" fill="rgb(254,171,16)" fg:x="342" fg:w="1"/><text x="96.3174%" y="463.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (1 samples, 0.28%)</title><rect x="96.0674%" y="437" width="0.2809%" height="15" fill="rgb(230,171,20)" fg:x="342" fg:w="1"/><text x="96.3174%" y="447.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (1 samples, 0.28%)</title><rect x="96.0674%" y="421" width="0.2809%" height="15" fill="rgb(210,71,41)" fg:x="342" fg:w="1"/><text x="96.3174%" y="431.50"></text></g><g><title>libsolver::solver::SudokuValueSet::insert (1 samples, 0.28%)</title><rect x="96.0674%" y="405" width="0.2809%" height="15" fill="rgb(206,173,20)" fg:x="342" fg:w="1"/><text x="96.3174%" y="415.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (1 samples, 0.28%)</title><rect x="96.3483%" y="469" width="0.2809%" height="15" fill="rgb(233,88,34)" fg:x="343" fg:w="1"/><text x="96.5983%" y="479.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (1 samples, 0.28%)</title><rect x="96.3483%" y="453" width="0.2809%" height="15" fill="rgb(223,209,46)" fg:x="343" fg:w="1"/><text x="96.5983%" y="463.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (1 samples, 0.28%)</title><rect x="96.3483%" y="437" width="0.2809%" height="15" fill="rgb(250,43,18)" fg:x="343" fg:w="1"/><text x="96.5983%" y="447.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (1 samples, 0.28%)</title><rect x="96.3483%" y="421" width="0.2809%" height="15" fill="rgb(208,13,10)" fg:x="343" fg:w="1"/><text x="96.5983%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="96.3483%" y="405" width="0.2809%" height="15" fill="rgb(212,200,36)" fg:x="343" fg:w="1"/><text x="96.5983%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.28%)</title><rect x="96.3483%" y="389" width="0.2809%" height="15" fill="rgb(225,90,30)" fg:x="343" fg:w="1"/><text x="96.5983%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.28%)</title><rect x="96.3483%" y="373" width="0.2809%" height="15" fill="rgb(236,182,39)" fg:x="343" fg:w="1"/><text x="96.5983%" y="383.50"></text></g><g><title>&lt;libsolver::solver::Cell as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="97.1910%" y="341" width="0.2809%" height="15" fill="rgb(212,144,35)" fg:x="346" fg:w="1"/><text x="97.4410%" y="351.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (1 samples, 0.28%)</title><rect x="97.1910%" y="325" width="0.2809%" height="15" fill="rgb(228,63,44)" fg:x="346" fg:w="1"/><text x="97.4410%" y="335.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (1 samples, 0.28%)</title><rect x="97.1910%" y="309" width="0.2809%" height="15" fill="rgb(228,109,6)" fg:x="346" fg:w="1"/><text x="97.4410%" y="319.50"></text></g><g><title>core::array::drain::drain_array_with (1 samples, 0.28%)</title><rect x="97.1910%" y="293" width="0.2809%" height="15" fill="rgb(238,117,24)" fg:x="346" fg:w="1"/><text x="97.4410%" y="303.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.28%)</title><rect x="97.1910%" y="277" width="0.2809%" height="15" fill="rgb(242,26,26)" fg:x="346" fg:w="1"/><text x="97.4410%" y="287.50"></text></g><g><title>core::slice::sort::partition (5 samples, 1.40%)</title><rect x="96.3483%" y="485" width="1.4045%" height="15" fill="rgb(221,92,48)" fg:x="343" fg:w="5"/><text x="96.5983%" y="495.50"></text></g><g><title>core::slice::sort::partition_in_blocks (4 samples, 1.12%)</title><rect x="96.6292%" y="469" width="1.1236%" height="15" fill="rgb(209,209,32)" fg:x="344" fg:w="4"/><text x="96.8792%" y="479.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (4 samples, 1.12%)</title><rect x="96.6292%" y="453" width="1.1236%" height="15" fill="rgb(221,70,22)" fg:x="344" fg:w="4"/><text x="96.8792%" y="463.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (4 samples, 1.12%)</title><rect x="96.6292%" y="437" width="1.1236%" height="15" fill="rgb(248,145,5)" fg:x="344" fg:w="4"/><text x="96.8792%" y="447.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (4 samples, 1.12%)</title><rect x="96.6292%" y="421" width="1.1236%" height="15" fill="rgb(226,116,26)" fg:x="344" fg:w="4"/><text x="96.8792%" y="431.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (4 samples, 1.12%)</title><rect x="96.6292%" y="405" width="1.1236%" height="15" fill="rgb(244,5,17)" fg:x="344" fg:w="4"/><text x="96.8792%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.12%)</title><rect x="96.6292%" y="389" width="1.1236%" height="15" fill="rgb(252,159,33)" fg:x="344" fg:w="4"/><text x="96.8792%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (4 samples, 1.12%)</title><rect x="96.6292%" y="373" width="1.1236%" height="15" fill="rgb(206,71,0)" fg:x="344" fg:w="4"/><text x="96.8792%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 1.12%)</title><rect x="96.6292%" y="357" width="1.1236%" height="15" fill="rgb(233,118,54)" fg:x="344" fg:w="4"/><text x="96.8792%" y="367.50"></text></g><g><title>&lt;libsolver::solver::Row as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="97.4719%" y="341" width="0.2809%" height="15" fill="rgb(234,83,48)" fg:x="347" fg:w="1"/><text x="97.7219%" y="351.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (1 samples, 0.28%)</title><rect x="97.4719%" y="325" width="0.2809%" height="15" fill="rgb(228,3,54)" fg:x="347" fg:w="1"/><text x="97.7219%" y="335.50"></text></g><g><title>core::slice::sort::partition_equal (1 samples, 0.28%)</title><rect x="97.7528%" y="485" width="0.2809%" height="15" fill="rgb(226,155,13)" fg:x="348" fg:w="1"/><text x="98.0028%" y="495.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (1 samples, 0.28%)</title><rect x="97.7528%" y="469" width="0.2809%" height="15" fill="rgb(241,28,37)" fg:x="348" fg:w="1"/><text x="98.0028%" y="479.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (1 samples, 0.28%)</title><rect x="97.7528%" y="453" width="0.2809%" height="15" fill="rgb(233,93,10)" fg:x="348" fg:w="1"/><text x="98.0028%" y="463.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (1 samples, 0.28%)</title><rect x="97.7528%" y="437" width="0.2809%" height="15" fill="rgb(225,113,19)" fg:x="348" fg:w="1"/><text x="98.0028%" y="447.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (1 samples, 0.28%)</title><rect x="97.7528%" y="421" width="0.2809%" height="15" fill="rgb(241,2,18)" fg:x="348" fg:w="1"/><text x="98.0028%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="97.7528%" y="405" width="0.2809%" height="15" fill="rgb(228,207,21)" fg:x="348" fg:w="1"/><text x="98.0028%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.28%)</title><rect x="97.7528%" y="389" width="0.2809%" height="15" fill="rgb(213,211,35)" fg:x="348" fg:w="1"/><text x="98.0028%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.28%)</title><rect x="97.7528%" y="373" width="0.2809%" height="15" fill="rgb(209,83,10)" fg:x="348" fg:w="1"/><text x="98.0028%" y="383.50"></text></g><g><title>&lt;libsolver::solver::Cell as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="97.7528%" y="357" width="0.2809%" height="15" fill="rgb(209,164,1)" fg:x="348" fg:w="1"/><text x="98.0028%" y="367.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (1 samples, 0.28%)</title><rect x="97.7528%" y="341" width="0.2809%" height="15" fill="rgb(213,184,43)" fg:x="348" fg:w="1"/><text x="98.0028%" y="351.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (1 samples, 0.28%)</title><rect x="97.7528%" y="325" width="0.2809%" height="15" fill="rgb(231,61,34)" fg:x="348" fg:w="1"/><text x="98.0028%" y="335.50"></text></g><g><title>core::array::drain::drain_array_with (1 samples, 0.28%)</title><rect x="97.7528%" y="309" width="0.2809%" height="15" fill="rgb(235,75,3)" fg:x="348" fg:w="1"/><text x="98.0028%" y="319.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.28%)</title><rect x="97.7528%" y="293" width="0.2809%" height="15" fill="rgb(220,106,47)" fg:x="348" fg:w="1"/><text x="98.0028%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (212 samples, 59.55%)</title><rect x="38.7640%" y="549" width="59.5506%" height="15" fill="rgb(210,196,33)" fg:x="138" fg:w="212"/><text x="39.0140%" y="559.50">core::slice::&lt;impl [T]&gt;::sort_unstable_by_key</text></g><g><title>core::slice::sort::quicksort (212 samples, 59.55%)</title><rect x="38.7640%" y="533" width="59.5506%" height="15" fill="rgb(229,154,42)" fg:x="138" fg:w="212"/><text x="39.0140%" y="543.50">core::slice::sort::quicksort</text></g><g><title>core::slice::sort::recurse (212 samples, 59.55%)</title><rect x="38.7640%" y="517" width="59.5506%" height="15" fill="rgb(228,114,26)" fg:x="138" fg:w="212"/><text x="39.0140%" y="527.50">core::slice::sort::recurse</text></g><g><title>core::slice::sort::recurse (61 samples, 17.13%)</title><rect x="81.1798%" y="501" width="17.1348%" height="15" fill="rgb(208,144,1)" fg:x="289" fg:w="61"/><text x="81.4298%" y="511.50">core::slice::sort::recurse</text></g><g><title>core::slice::sort::recurse (1 samples, 0.28%)</title><rect x="98.0337%" y="485" width="0.2809%" height="15" fill="rgb(239,112,37)" fg:x="349" fg:w="1"/><text x="98.2837%" y="495.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.28%)</title><rect x="98.0337%" y="469" width="0.2809%" height="15" fill="rgb(210,96,50)" fg:x="349" fg:w="1"/><text x="98.2837%" y="479.50"></text></g><g><title>core::slice::sort::insert_tail (1 samples, 0.28%)</title><rect x="98.0337%" y="453" width="0.2809%" height="15" fill="rgb(222,178,2)" fg:x="349" fg:w="1"/><text x="98.2837%" y="463.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (1 samples, 0.28%)</title><rect x="98.0337%" y="437" width="0.2809%" height="15" fill="rgb(226,74,18)" fg:x="349" fg:w="1"/><text x="98.2837%" y="447.50"></text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve::_{{closure}} (1 samples, 0.28%)</title><rect x="98.0337%" y="421" width="0.2809%" height="15" fill="rgb(225,67,54)" fg:x="349" fg:w="1"/><text x="98.2837%" y="431.50"></text></g><g><title>libsolver::solver::Sudoku::all_affecting (1 samples, 0.28%)</title><rect x="98.0337%" y="405" width="0.2809%" height="15" fill="rgb(251,92,32)" fg:x="349" fg:w="1"/><text x="98.2837%" y="415.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (1 samples, 0.28%)</title><rect x="98.0337%" y="389" width="0.2809%" height="15" fill="rgb(228,149,22)" fg:x="349" fg:w="1"/><text x="98.2837%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="98.0337%" y="373" width="0.2809%" height="15" fill="rgb(243,54,13)" fg:x="349" fg:w="1"/><text x="98.2837%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.28%)</title><rect x="98.0337%" y="357" width="0.2809%" height="15" fill="rgb(243,180,28)" fg:x="349" fg:w="1"/><text x="98.2837%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.28%)</title><rect x="98.0337%" y="341" width="0.2809%" height="15" fill="rgb(208,167,24)" fg:x="349" fg:w="1"/><text x="98.2837%" y="351.50"></text></g><g><title>&lt;libsolver::solver::SudokuValueSet as core::iter::traits::collect::Extend&lt;libsolver::solver::SudokuValue&gt;&gt;::extend (4 samples, 1.12%)</title><rect x="98.5955%" y="533" width="1.1236%" height="15" fill="rgb(245,73,45)" fg:x="351" fg:w="4"/><text x="98.8455%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.12%)</title><rect x="98.5955%" y="517" width="1.1236%" height="15" fill="rgb(237,203,48)" fg:x="351" fg:w="4"/><text x="98.8455%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (4 samples, 1.12%)</title><rect x="98.5955%" y="501" width="1.1236%" height="15" fill="rgb(211,197,16)" fg:x="351" fg:w="4"/><text x="98.8455%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 1.12%)</title><rect x="98.5955%" y="485" width="1.1236%" height="15" fill="rgb(243,99,51)" fg:x="351" fg:w="4"/><text x="98.8455%" y="495.50"></text></g><g><title>&lt;libsolver::solver::Row as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="99.4382%" y="469" width="0.2809%" height="15" fill="rgb(215,123,29)" fg:x="354" fg:w="1"/><text x="99.6882%" y="479.50"></text></g><g><title>&lt;libsolver::solver::Sudoku as core::ops::index::Index&lt;Ix&gt;&gt;::index (1 samples, 0.28%)</title><rect x="99.4382%" y="453" width="0.2809%" height="15" fill="rgb(239,186,37)" fg:x="354" fg:w="1"/><text x="99.6882%" y="463.50"></text></g><g><title>all (356 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(252,136,39)" fg:x="0" fg:w="356"/><text x="0.2500%" y="1039.50"></text></g><g><title>solver::test::s (224 samples, 62.92%)</title><rect x="37.0787%" y="1013" width="62.9213%" height="15" fill="rgb(223,213,32)" fg:x="132" fg:w="224"/><text x="37.3287%" y="1023.50">solver::test::s</text></g><g><title>clone3 (224 samples, 62.92%)</title><rect x="37.0787%" y="997" width="62.9213%" height="15" fill="rgb(233,115,5)" fg:x="132" fg:w="224"/><text x="37.3287%" y="1007.50">clone3</text></g><g><title>start_thread (224 samples, 62.92%)</title><rect x="37.0787%" y="981" width="62.9213%" height="15" fill="rgb(207,226,44)" fg:x="132" fg:w="224"/><text x="37.3287%" y="991.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (223 samples, 62.64%)</title><rect x="37.3596%" y="965" width="62.6404%" height="15" fill="rgb(208,126,0)" fg:x="133" fg:w="223"/><text x="37.6096%" y="975.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (223 samples, 62.64%)</title><rect x="37.3596%" y="949" width="62.6404%" height="15" fill="rgb(244,66,21)" fg:x="133" fg:w="223"/><text x="37.6096%" y="959.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (223 samples, 62.64%)</title><rect x="37.3596%" y="933" width="62.6404%" height="15" fill="rgb(222,97,12)" fg:x="133" fg:w="223"/><text x="37.6096%" y="943.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (223 samples, 62.64%)</title><rect x="37.3596%" y="917" width="62.6404%" height="15" fill="rgb(219,213,19)" fg:x="133" fg:w="223"/><text x="37.6096%" y="927.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (223 samples, 62.64%)</title><rect x="37.3596%" y="901" width="62.6404%" height="15" fill="rgb(252,169,30)" fg:x="133" fg:w="223"/><text x="37.6096%" y="911.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (223 samples, 62.64%)</title><rect x="37.3596%" y="885" width="62.6404%" height="15" fill="rgb(206,32,51)" fg:x="133" fg:w="223"/><text x="37.6096%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (223 samples, 62.64%)</title><rect x="37.3596%" y="869" width="62.6404%" height="15" fill="rgb(250,172,42)" fg:x="133" fg:w="223"/><text x="37.6096%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (223 samples, 62.64%)</title><rect x="37.3596%" y="853" width="62.6404%" height="15" fill="rgb(209,34,43)" fg:x="133" fg:w="223"/><text x="37.6096%" y="863.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (223 samples, 62.64%)</title><rect x="37.3596%" y="837" width="62.6404%" height="15" fill="rgb(223,11,35)" fg:x="133" fg:w="223"/><text x="37.6096%" y="847.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (223 samples, 62.64%)</title><rect x="37.3596%" y="821" width="62.6404%" height="15" fill="rgb(251,219,26)" fg:x="133" fg:w="223"/><text x="37.6096%" y="831.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (223 samples, 62.64%)</title><rect x="37.3596%" y="805" width="62.6404%" height="15" fill="rgb(231,119,3)" fg:x="133" fg:w="223"/><text x="37.6096%" y="815.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (223 samples, 62.64%)</title><rect x="37.3596%" y="789" width="62.6404%" height="15" fill="rgb(216,97,11)" fg:x="133" fg:w="223"/><text x="37.6096%" y="799.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (223 samples, 62.64%)</title><rect x="37.3596%" y="773" width="62.6404%" height="15" fill="rgb(223,59,9)" fg:x="133" fg:w="223"/><text x="37.6096%" y="783.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (223 samples, 62.64%)</title><rect x="37.3596%" y="757" width="62.6404%" height="15" fill="rgb(233,93,31)" fg:x="133" fg:w="223"/><text x="37.6096%" y="767.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (223 samples, 62.64%)</title><rect x="37.3596%" y="741" width="62.6404%" height="15" fill="rgb(239,81,33)" fg:x="133" fg:w="223"/><text x="37.6096%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (223 samples, 62.64%)</title><rect x="37.3596%" y="725" width="62.6404%" height="15" fill="rgb(213,120,34)" fg:x="133" fg:w="223"/><text x="37.6096%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (223 samples, 62.64%)</title><rect x="37.3596%" y="709" width="62.6404%" height="15" fill="rgb(243,49,53)" fg:x="133" fg:w="223"/><text x="37.6096%" y="719.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (223 samples, 62.64%)</title><rect x="37.3596%" y="693" width="62.6404%" height="15" fill="rgb(247,216,33)" fg:x="133" fg:w="223"/><text x="37.6096%" y="703.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>test::run_test_in_process::_{{closure}} (223 samples, 62.64%)</title><rect x="37.3596%" y="677" width="62.6404%" height="15" fill="rgb(226,26,14)" fg:x="133" fg:w="223"/><text x="37.6096%" y="687.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (223 samples, 62.64%)</title><rect x="37.3596%" y="661" width="62.6404%" height="15" fill="rgb(215,49,53)" fg:x="133" fg:w="223"/><text x="37.6096%" y="671.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (223 samples, 62.64%)</title><rect x="37.3596%" y="645" width="62.6404%" height="15" fill="rgb(245,162,40)" fg:x="133" fg:w="223"/><text x="37.6096%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (223 samples, 62.64%)</title><rect x="37.3596%" y="629" width="62.6404%" height="15" fill="rgb(229,68,17)" fg:x="133" fg:w="223"/><text x="37.6096%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>libsolver::solver::test::solve_sudoku_iterative_dfs::_{{closure}} (223 samples, 62.64%)</title><rect x="37.3596%" y="613" width="62.6404%" height="15" fill="rgb(213,182,10)" fg:x="133" fg:w="223"/><text x="37.6096%" y="623.50">libsolver::solver::test::solve_sudoku_iterative_dfs::_{{closure}}</text></g><g><title>libsolver::solver::test::solve_sudoku_iterative_dfs (223 samples, 62.64%)</title><rect x="37.3596%" y="597" width="62.6404%" height="15" fill="rgb(245,125,30)" fg:x="133" fg:w="223"/><text x="37.6096%" y="607.50">libsolver::solver::test::solve_sudoku_iterative_dfs</text></g><g><title>libsolver::solver::Solver::solve (223 samples, 62.64%)</title><rect x="37.3596%" y="581" width="62.6404%" height="15" fill="rgb(232,202,2)" fg:x="133" fg:w="223"/><text x="37.6096%" y="591.50">libsolver::solver::Solver::solve</text></g><g><title>&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve (223 samples, 62.64%)</title><rect x="37.3596%" y="565" width="62.6404%" height="15" fill="rgb(237,140,51)" fg:x="133" fg:w="223"/><text x="37.6096%" y="575.50">&lt;libsolver::solver::IterativeDFS as libsolver::solver::Solver&gt;::try_solve</text></g><g><title>libsolver::solver::Sudoku::all_affecting (6 samples, 1.69%)</title><rect x="98.3146%" y="549" width="1.6854%" height="15" fill="rgb(236,157,25)" fg:x="350" fg:w="6"/><text x="98.5646%" y="559.50"></text></g><g><title>libsolver::solver::Sudoku::cell_from_ix (1 samples, 0.28%)</title><rect x="99.7191%" y="533" width="0.2809%" height="15" fill="rgb(219,209,0)" fg:x="355" fg:w="1"/><text x="99.9691%" y="543.50"></text></g></svg></svg>